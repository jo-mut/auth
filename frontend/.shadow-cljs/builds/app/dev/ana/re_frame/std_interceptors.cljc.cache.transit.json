["^ ","~:output",["^ ","~:js","goog.provide('re_frame.std_interceptors');\nre_frame.std_interceptors.debug = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$debug_before(context){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Handling re-frame event:\",re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442))], 0));\n\nreturn context;\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$debug_after(context){\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar orig_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new_db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"No app-db changes in:\",event], 0));\n} else {\nvar vec__13711_13770 = clojure.data.diff(orig_db,new_db);\nvar only_before_13771 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__13711_13770,(0),null);\nvar only_after_13772 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__13711_13770,(1),null);\nvar db_changed_QMARK__13773 = (((!((only_before_13771 == null)))) || ((!((only_after_13772 == null)))));\nif(db_changed_QMARK__13773){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"group\",\"group\",582596132),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"db clojure.data/diff for:\",event], 0));\n\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only before:\",only_before_13771], 0));\n\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only after :\",only_after_13772], 0));\n\nre_frame.loggers.console(new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382));\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"No app-db changes resulted from:\",event], 0));\n}\n}\n\nreturn context;\n})], 0));\nre_frame.std_interceptors.unwrap = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"unwrap\",\"unwrap\",-1399175462),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$unwrap_before(context){\nvar vec__13723 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__13723,(0),null);\nvar payload = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__13723,(1),null);\nvar event = vec__13723;\nif((!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),cljs.core.count(event))) && (cljs.core.map_QMARK_(payload)))))){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"re-frame: \\\"unwrap\\\" interceptor must be a vector of two elements \\\"[event-id payload-map]\\\"\",event);\n} else {\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),payload);\n}\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$unwrap_after(context){\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403)));\n})], 0));\nre_frame.std_interceptors.trim_v = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"trim-v\",\"trim-v\",-1274938640),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$trim_v_before(context){\nif((!(cljs.core.vector_QMARK_(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442)))))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"trim-v\\\" interceptor expected event to be a vector. Got a \",cljs.core.type(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442)))], 0));\n\nreturn context;\n} else {\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),cljs.core.subvec,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(1)], 0));\n}\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$trim_v_after(context){\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403)));\n})], 0));\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n * \n *   These handlers take two arguments;  `db` and `event`, and they return `db`.\n * \n *    (fn [db event]\n *       ....)\n * \n *   So, the interceptor wraps the given handler:\n *   1. extracts two `:coeffects` keys: db and event\n *   2. calls handler-fn\n *   3. stores the db result back into context's `:effects`\n */\nre_frame.std_interceptors.db_handler__GT_interceptor = (function re_frame$std_interceptors$db_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"db-handler\",\"db-handler\",579530098),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$db_handler__GT_interceptor_$_db_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__13735 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__13736 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__13736);\n\ntry{try{var map__13737 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__13737__$1 = cljs.core.__destructure_map(map__13737);\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__13737__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__13737__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null, db,event)));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__13458__auto___13774 = re_frame.interop.now();\nvar duration__13459__auto___13775 = (end__13458__auto___13774 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__13459__auto___13775,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__13458__auto___13774);\n} else {\n}\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__13735);\n}})():(function (){var map__13739 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__13739__$1 = cljs.core.__destructure_map(map__13739);\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__13739__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__13739__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null, db,event)));\n})());\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__13460__auto___13777 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__13460__auto___13777);\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n * \n *   These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n * \n *    (fn [coeffects event]\n *       {:db ...\n *        :fx ...})\n * \n * Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n *   1. extracts `:coeffects`\n *   2. call handler-fn giving coeffects\n *   3. stores the result back into the `:effects`\n */\nre_frame.std_interceptors.fx_handler__GT_interceptor = (function re_frame$std_interceptors$fx_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"fx-handler\",\"fx-handler\",-549783097),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$fx_handler__GT_interceptor_$_fx_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__13746 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__13747 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__13747);\n\ntry{try{var map__13748 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__13748__$1 = cljs.core.__destructure_map(map__13748);\nvar coeffects = map__13748__$1;\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__13748__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null, coeffects,event)));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__13458__auto___13784 = re_frame.interop.now();\nvar duration__13459__auto___13785 = (end__13458__auto___13784 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__13459__auto___13785,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__13458__auto___13784);\n} else {\n}\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__13746);\n}})():(function (){var map__13749 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__13749__$1 = cljs.core.__destructure_map(map__13749);\nvar coeffects = map__13749__$1;\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__13749__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null, coeffects,event)));\n})());\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__13460__auto___13786 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__13460__auto___13786);\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n *   These advanced handlers take one argument: `context` and they return a modified `context`.\n *   Example:\n * \n *    (fn [context]\n *       (enqueue context [more interceptors]))\n */\nre_frame.std_interceptors.ctx_handler__GT_interceptor = (function re_frame$std_interceptors$ctx_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"ctx-handler\",\"ctx-handler\",-1777672230),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$ctx_handler__GT_interceptor_$_ctx_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__13750 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__13751 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__13751);\n\ntry{try{return (handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null, context));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__13458__auto___13787 = re_frame.interop.now();\nvar duration__13459__auto___13788 = (end__13458__auto___13787 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__13459__auto___13788,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__13458__auto___13787);\n} else {\n}\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__13750);\n}})():(handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null, context)));\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__13460__auto___13789 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__13460__auto___13789);\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\nre_frame.std_interceptors.path = (function re_frame$std_interceptors$path(var_args){\nvar args__5732__auto__ = [];\nvar len__5726__auto___13790 = arguments.length;\nvar i__5727__auto___13791 = (0);\nwhile(true){\nif((i__5727__auto___13791 < len__5726__auto___13790)){\nargs__5732__auto__.push((arguments[i__5727__auto___13791]));\n\nvar G__13792 = (i__5727__auto___13791 + (1));\ni__5727__auto___13791 = G__13792;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5733__auto__ = ((((0) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((0)),(0),null)):null);\nreturn re_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic(argseq__5733__auto__);\n});\n\n(re_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar path = cljs.core.flatten(args);\nvar history_key = new cljs.core.Keyword(\"re-frame.db\",\"path-history\",\"re-frame.db/path-history\",-1466258079);\nif(cljs.core.empty_QMARK_(path)){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"path\\\" interceptor given no params\"], 0));\n} else {\n}\n\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"path\",\"path\",-188191168),new cljs.core.Keyword(null,\"comment\",\"comment\",532206069),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"re-frame.db\",\"path\",\"re-frame.db/path\",-1845708459),path], null),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function (context){\nvar original_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nreturn re_frame.interceptor.assoc_coeffect(cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,history_key,cljs.core.conj,original_db),new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(original_db,path));\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function (context){\nvar db_store = history_key.cljs$core$IFn$_invoke$arity$1(context);\nvar original_db = cljs.core.peek(db_store);\nvar new_db_store = cljs.core.pop(db_store);\nvar context_SINGLEQUOTE_ = re_frame.interceptor.assoc_coeffect(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,history_key,new_db_store),new cljs.core.Keyword(null,\"db\",\"db\",993250759),original_db);\nvar db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\nreturn context_SINGLEQUOTE_;\n} else {\nreturn re_frame.interceptor.assoc_effect(context_SINGLEQUOTE_,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(original_db,path,db));\n}\n})], 0));\n}));\n\n(re_frame.std_interceptors.path.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(re_frame.std_interceptors.path.cljs$lang$applyTo = (function (seq13752){\nvar self__5712__auto__ = this;\nreturn self__5712__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq13752));\n}));\n\nre_frame.std_interceptors.enrich = (function re_frame$std_interceptors$enrich(f){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"enrich\",\"enrich\",-2108921925),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$enrich_$_enrich_after(context){\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar prev_db = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)):re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)));\nvar new_db = (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(prev_db,event) : f.call(null, prev_db,event));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(function (){var or__5002__auto__ = new_db;\nif(cljs.core.truth_(or__5002__auto__)){\nreturn or__5002__auto__;\n} else {\nreturn prev_db;\n}\n})());\n})], 0));\n});\nre_frame.std_interceptors.after = (function re_frame$std_interceptors$after(f){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"after\",\"after\",594996914),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$after_$_after_after(context){\nvar db = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)):re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)));\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\n(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(db,event) : f.call(null, db,event));\n\nreturn context;\n})], 0));\n});\nre_frame.std_interceptors.on_changes = (function re_frame$std_interceptors$on_changes(var_args){\nvar args__5732__auto__ = [];\nvar len__5726__auto___13793 = arguments.length;\nvar i__5727__auto___13794 = (0);\nwhile(true){\nif((i__5727__auto___13794 < len__5726__auto___13793)){\nargs__5732__auto__.push((arguments[i__5727__auto___13794]));\n\nvar G__13795 = (i__5727__auto___13794 + (1));\ni__5727__auto___13794 = G__13795;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5733__auto__ = ((((2) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((2)),(0),null)):null);\nreturn re_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5733__auto__);\n});\n\n(re_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic = (function (f,out_path,in_paths){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"on-changes\",\"on-changes\",1345912602),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$on_change_after(context){\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar old_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar new_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__13764_SHARP_){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(new_db,p1__13764_SHARP_);\n}),in_paths);\nvar old_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__13765_SHARP_){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(old_db,p1__13765_SHARP_);\n}),in_paths);\nvar changed_ins_QMARK_ = (function (){var and__5000__auto__ = cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nif(and__5000__auto__){\nreturn cljs.core.some(cljs.core.false_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.identical_QMARK_,new_ins,old_ins));\n} else {\nreturn and__5000__auto__;\n}\n})();\nif(cljs.core.truth_(changed_ins_QMARK_)){\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(new_db,out_path,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,new_ins)));\n} else {\nreturn context;\n}\n})], 0));\n}));\n\n(re_frame.std_interceptors.on_changes.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(re_frame.std_interceptors.on_changes.cljs$lang$applyTo = (function (seq13766){\nvar G__13767 = cljs.core.first(seq13766);\nvar seq13766__$1 = cljs.core.next(seq13766);\nvar G__13768 = cljs.core.first(seq13766__$1);\nvar seq13766__$2 = cljs.core.next(seq13766__$1);\nvar self__5711__auto__ = this;\nreturn self__5711__auto__.cljs$core$IFn$_invoke$arity$variadic(G__13767,G__13768,seq13766__$2);\n}));\n\n/**\n * An interceptor which adds registered global interceptors to the context's queue.\n * \n * NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\n */\nre_frame.std_interceptors.inject_global_interceptors = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"inject-global-interceptors\",\"inject-global-interceptors\",-2144129737),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$inject_global_interceptors_before(context){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),(function (p1__13769_SHARP_){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(re_frame.settings.get_global_interceptors(),p1__13769_SHARP_);\n}));\n})], 0));\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","contains re-frame supplied, standard interceptors","~:file","re_frame/std_interceptors.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",30],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react-dom","~$module$node_modules$react_dom$index","~$react","~$module$node_modules$react$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.std-interceptors","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^S","~$data","~$clojure.data","~$re-frame.trace","^V","~$re-frame.settings","^W","~$cljs.core","^X","~$interceptor","^S","~$goog","^Z","~$trace","^V","~$re-frame.utils","^10","~$settings","^W","~$re-frame.loggers","^12","~$utils","^10","^R","^R","^U","^U","~$re-frame.db","^14"],"~:seen",["^I",["~:require"]],"~:uses",["^ ","~$->interceptor","^S","~$get-effect","^S","~$get-coeffect","^S","~$assoc-coeffect","^S","~$assoc-effect","^S","~$update-coeffect","^S","~$console","^12","~$app-db","^14"],"~:require-macros",["^ ","^V","^V","^[","^V","^X","^X"],"~:form",["~#list",["~$ns","^K","contains re-frame supplied, standard interceptors",["^1B",["^16",["^S","~:refer",["^18","^19","^1:","^1;","^1<","^1="]],["^12","^1D",["^1>"]],["^W","~:as","^11"],["^14","^1D",["^1?"]],["^U","^1E","^T"],["^R","^1E","^Q"],["^10","^1E","^13"],["^V","^1E","^[","~:include-macros",true],["^S","^1E","^Y"]]]]],"~:flags",["^ ","^16",["^I",[]]],"~:js-deps",[],"~:deps",["^Z","^X","^S","^12","^W","^14","^U","^R","^10","^V"]],"^N","^K","~:resource-id",["~:shadow.build.classpath/resource","re_frame/std_interceptors.cljc"],"~:compiled-at",1741097060994,"^L",["^ ","^Q","^R","^S","^S","^T","^U","^V","^V","^W","^W","^X","^X","^Y","^S","^Z","^Z","^[","^V","^10","^10","^11","^W","^12","^12","^13","^10","^R","^R","^U","^U","^14","^14"],"~:resource-name","re_frame/std_interceptors.cljc","~:warnings",[],"~:source","(ns re-frame.std-interceptors\n  \"contains re-frame supplied, standard interceptors\"\n  (:require\n   [re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-coeffect assoc-effect update-coeffect]]\n   [re-frame.loggers :refer [console]]\n   [re-frame.settings :as settings]\n   [re-frame.db :refer [app-db]]\n   [clojure.data :as data]\n   [re-frame.cofx :as cofx]\n   [re-frame.utils :as utils]\n   [re-frame.trace :as trace :include-macros true]\n   [re-frame.interceptor :as interceptor]))\n\n(def debug\n  (->interceptor\n   :id     :debug\n   :before (fn debug-before\n             [context]\n             (console :log \"Handling re-frame event:\" (get-coeffect context :event))\n             context)\n   :after  (fn debug-after\n             [context]\n             (let [event   (get-coeffect context :event)\n                   orig-db (get-coeffect context :db)\n                   new-db  (get-effect   context :db ::not-found)]\n               (if (= new-db ::not-found)\n                 (console :log \"No app-db changes in:\" event)\n                 (let [[only-before only-after] (data/diff orig-db new-db)\n                       db-changed?    (or (some? only-before) (some? only-after))]\n                   (if db-changed?\n                     (do (console :group \"db clojure.data/diff for:\" event)\n                         (console :log \"only before:\" only-before)\n                         (console :log \"only after :\" only-after)\n                         (console :groupEnd))\n                     (console :log \"No app-db changes resulted from:\" event))))\n               context))))\n\n(def unwrap\n  (->interceptor\n   :id      :unwrap\n   :before  (fn unwrap-before\n              [context]\n              (let [[_ payload :as event] (get-coeffect context :event)]\n                (if-not (and (= 2 (count event))\n                             (map? payload))\n                  (throw (ex-info\n                          \"re-frame: \\\"unwrap\\\" interceptor must be a vector of two elements \\\"[event-id payload-map]\\\"\"\n                          event))\n                  (assoc-coeffect context :event payload))))\n   :after   (fn unwrap-after\n              [context]\n              (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n(def trim-v\n  (->interceptor\n   :id      :trim-v\n   :before  (fn trim-v-before\n              [context]\n              (if-not (vector? (get-coeffect context :event))\n                (do\n                  (console :warn \"re-frame: \\\"trim-v\\\" interceptor expected event to be a vector. Got a \" (type (get-coeffect context :event)))\n                  context)\n                (update-coeffect context :event subvec 1)))\n   :after   (fn trim-v-after\n              [context]\n              (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n;; -- Interceptor Factories - PART 1 ---------------------------------------------------------------\n;;\n;; These 3 factories wrap the 3 kinds of event handlers.\n;;\n\n(defn db-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`\"\n  [handler-fn]\n  (->interceptor\n   :id     :db-handler\n   :before (fn db-handler-before\n             [context]\n             (let [new-context\n                   (trace/with-trace\n                     {:op-type   :event/handler\n                      :operation (get-coeffect context :original-event)}\n                     (let [{:keys [db event]} (get-coeffect context)]\n                       (->> (handler-fn db event)\n                            (assoc-effect context :db))))]\n                ;; We merge these tags outside of the :event/handler trace because we want them to be assigned to the parent\n                ;; wrapping trace.\n               (trace/merge-trace!\n                {:tags {:effects   (get-effect new-context)\n                        :coeffects (get-coeffect context)}})\n               new-context))))\n\n(defn fx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :fx ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`\"\n  [handler-fn]\n  (->interceptor\n   :id     :fx-handler\n   :before (fn fx-handler-before\n             [context]\n             (let [new-context\n                   (trace/with-trace\n                     {:op-type   :event/handler\n                      :operation (get-coeffect context :original-event)}\n                     (let [{:keys [event] :as coeffects} (get-coeffect context)]\n                       (->> (handler-fn coeffects event)\n                            (assoc context :effects))))]\n               (trace/merge-trace!\n                {:tags {:effects   (get-effect new-context)\n                        :coeffects (get-coeffect context)}})\n               new-context))))\n\n(defn ctx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))\"\n  [handler-fn]\n  (->interceptor\n   :id     :ctx-handler\n   :before (fn ctx-handler-before\n             [context]\n             (let [new-context\n                   (trace/with-trace\n                     {:op-type   :event/handler\n                      :operation (get-coeffect context :original-event)}\n                     (handler-fn context))]\n               (trace/merge-trace!\n                {:tags {:effects   (get-effect new-context)\n                        :coeffects (get-coeffect context)}})\n               new-context))))\n\n;; -- Interceptors Factories -  PART 2 ------------------------------------------------------------\n\n(defn path\n  [& args]\n  (let [path (flatten args)\n        history-key :re-frame.db/path-history]    ;; this is where, within `context`, we store the original dbs\n    (when (empty? path)\n      (console :error \"re-frame: \\\"path\\\" interceptor given no params\"))\n    (->interceptor\n     :id      :path\n     :comment {:re-frame.db/path path}\n     :before  (fn\n                [context]\n                (let [original-db (get-coeffect context :db)]\n                  (-> context\n                      (update history-key conj original-db)\n                      (assoc-coeffect :db (get-in original-db path)))))\n     :after   (fn [context]\n                (let [db-store     (history-key context)\n                      original-db  (peek db-store)\n                      new-db-store (pop db-store)\n                      context'     (-> (assoc context history-key new-db-store)\n                                       (assoc-coeffect :db original-db))     ;; put the original db back so that things like debug work later on\n                      db           (get-effect context :db ::not-found)]\n                  (if (= db ::not-found)\n                    context'\n                    (->> (assoc-in original-db path db)\n                         (assoc-effect context' :db))))))))\n\n(defn enrich\n  [f]\n  (->interceptor\n   :id :enrich\n   :after (fn enrich-after\n            [context]\n            (let [event   (get-coeffect context :event)\n                  prev-db (if (contains? (get-effect context) :db)\n                            (get-effect context :db) ;; If no db effect is returned, we provide the original coeffect.\n                            (get-coeffect context :db))\n                  new-db  (f prev-db event)]\n              (assoc-effect context :db (or new-db prev-db)))))) ;; If the enriched db is nil, use the last known good db\n\n(defn after\n  [f]\n  (->interceptor\n   :id :after\n   :after (fn after-after\n            [context]\n            (let [db    (if (contains? (get-effect context) :db)\n                          (get-effect context :db)\n                          (get-coeffect context :db))\n                  event (get-coeffect context :event)]\n              (f db event) ;; call f for side effects\n              context)))) ;; context is unchanged\n\n(defn  on-changes\n  [f out-path & in-paths]\n  (->interceptor\n   :id    :on-changes\n   :after (fn on-change-after\n            [context]\n            (let [new-db   (get-effect context :db)\n                  old-db   (get-coeffect context :db)\n\n                   ;; work out if any \"inputs\" have changed\n                  new-ins      (map #(get-in new-db %) in-paths)\n                  old-ins      (map #(get-in old-db %) in-paths)\n                   ;; make sure the db is actually set in the effect\n                  changed-ins? (and (contains? (get-effect context) :db)\n                                    (some false? (map identical? new-ins old-ins)))]\n\n               ;; if one of the inputs has changed, then run 'f'\n              (if changed-ins?\n                (->> (apply f new-ins)\n                     (assoc-in new-db out-path)\n                     (assoc-effect context :db))\n                context)))))\n\n(def inject-global-interceptors\n  \"An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\"\n  (->interceptor\n   :id     :inject-global-interceptors\n   :before (fn inject-global-interceptors-before\n             [context]\n             (update context :queue #(into (settings/get-global-interceptors) %)))))\n","~:reader-features",["^I",["~:cljs"]],"~:used-var-namespaces",["^I",["~$re-frame.interop","^S","^V","^W","^X","^K","^12","^U"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.std-interceptors/debug","re_frame.interceptor.__GT_interceptor","context","re_frame.loggers.console","re_frame.interceptor.get_coeffect","event","orig-db","new-db","re_frame.interceptor.get_effect","cljs.core._EQ_","vec__13711","cljs.core.nth","only-before","only-after","clojure.data/diff","db-changed?","re-frame.loggers/console","re-frame.std-interceptors/unwrap","vec__13723","_","payload","cljs.core/count","cljs.core/map?","cljs.core.ex_info","re-frame.interceptor/assoc-coeffect","re-frame.std-interceptors/trim-v","cljs.core/vector?","cljs.core/type","re_frame.interceptor.update_coeffect","cljs.core/subvec","re-frame.std-interceptors/db-handler->interceptor","handler-fn","new-context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__13735","re-frame.trace/*current-trace*","*current-trace*-temp-val__13736","re-frame.trace/start-trace","end__13458__auto__","re-frame.interop/now","duration__13459__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","map__13737","cljs.core/--destructure-map","cljs.core.get","map__13739","db","re-frame.interceptor/assoc-effect","new-trace__13460__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.dissoc","re-frame.std-interceptors/fx-handler->interceptor","*current-trace*-orig-val__13746","*current-trace*-temp-val__13747","map__13748","map__13749","coeffects","re-frame.std-interceptors/ctx-handler->interceptor","*current-trace*-orig-val__13750","*current-trace*-temp-val__13751","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","re-frame.std-interceptors/path","seq13752","self__5712__auto__","cljs.core/seq","args","path","cljs.core/flatten","history-key","cljs.core/empty?","original-db","cljs.core.get_in","db-store","cljs.core/peek","new-db-store","cljs.core/pop","context'","cljs.core/assoc-in","re-frame.std-interceptors/enrich","f","prev-db","cljs.core/contains?","or__5002__auto__","re-frame.std-interceptors/after","re-frame.std-interceptors/on-changes","seq13766","G__13767","cljs.core/first","cljs.core/next","G__13768","self__5711__auto__","out-path","in-paths","old-db","new-ins","p1__13764#","cljs.core.map","old-ins","p1__13765#","changed-ins?","and__5000__auto__","cljs.core/some","cljs.core/false?","cljs.core/identical?","cljs.core.apply","re-frame.std-interceptors/inject-global-interceptors","p1__13769#","cljs.core.into","re-frame.settings/get-global-interceptors"]],"~:used-vars",["^I",["~$cljs.core/--destructure-map","~$re-frame.interceptor/get-effect","~$cljs.core/vector?","~$cljs.core/=","~$re-frame.trace/traces","~$re-frame.std-interceptors/debug","~$cljs.core/IndexedSeq","~$re-frame.interceptor/->interceptor","~$cljs.core/count","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.trace/start-trace","~$re-frame.loggers/console","~$re-frame.std-interceptors/inject-global-interceptors","~$cljs.core/dissoc","~$re-frame.std-interceptors/trim-v","~$re-frame.interop/now","~$cljs.core/pop","~$cljs.core/empty?","~$cljs.core/contains?","~$re-frame.std-interceptors/db-handler->interceptor","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/identical?","~$cljs.core/update","~$cljs.core/peek","~$cljs.core/map","~$cljs.core/get-in","~$cljs.core/swap!","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$cljs.core/get","~$re-frame.std-interceptors/enrich","~$clojure.data/diff","~$re-frame.std-interceptors/ctx-handler->interceptor","~$cljs.core/flatten","~$re-frame.interceptor/assoc-coeffect","~$re-frame.std-interceptors/fx-handler->interceptor","~$cljs.core/subvec","~$cljs.core/nth","~$cljs.core/ex-info","~$cljs.core/false?","~$re-frame.trace/*current-trace*","~$re-frame.std-interceptors/after","~$re-frame.settings/get-global-interceptors","~$cljs.core/next","~$re-frame.interceptor/get-coeffect","~$cljs.core/not","~$re-frame.interceptor/assoc-effect","~$cljs.core/assoc","~$cljs.core/assoc-in","~$re-frame.std-interceptors/path","~$cljs.core/first","~$re-frame.trace/run-tracing-callbacks!","~$cljs.core/merge","~$re-frame.std-interceptors/unwrap","~$re-frame.std-interceptors/on-changes","~$cljs.core/type","~$cljs.core/some"]]],"~:cache-keys",["~#cmap",[["^1K","reagent/impl/batching.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^Z","^X","~$reagent.debug","~$reagent.impl.util"]]],["^1K","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","~$goog.dom.HtmlElement"]]],["^1K","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1K","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","~$goog.asserts"]]],["^1K","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","goog/events/eventtype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","~$goog.events.eventTypeHelpers","~$goog.userAgent"]]],["^1K","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3G","^3H","^3K","^3F","^3I","^3J"]]],["^1K","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3K","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^3F"]]],["^1K","re_frame/loggers.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X","~$clojure.set"]]],["^1K","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3K"]]],["^1K","reagent/impl/util.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X","~$clojure.string","~$clojure.walk","~$goog.object","^3C"]]],["^1K","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3G","~$goog.reflect","^3F"]]],["^1K","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","goog/events/events.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3K","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","~$goog.events.BrowserFeature","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1K","re_frame/registrar.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X","^1S","^12","^W"]]],["^1K","goog/events/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3G","^3F"]]],["^1K","reagent/ratom.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X","^3D","^3C","~$reagent.impl.batching","^3R","^3U"]]],["^1K","re_frame/interop.cljs"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X","~$goog.async.nextTick","~$goog.events","~$reagent.core","~$reagent.ratom"]]],["^1K","goog/disposable/disposable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1K","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["34d722fc3583e9a07bd799a718366eac5c4d73ec","62e895deb803184b2418fd4d915d4b2a4398b5fc","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1K","shadow/js.js"],["0209a09364a21eea553e1f81028173bafdf9ada7","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","reagent/impl/template.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X","^F","^3S","^3D","~$reagent.impl.component","~$reagent.impl.input","~$reagent.impl.protocols","^47","^3C","^3U"]]],["^1K","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3K"]]],"~:SHADOW-TIMESTAMP",[1740901883000,1740901883000,1715719162000],["^4;","node_modules/react/cjs/react.development.js"],["34d722fc3583e9a07bd799a718366eac5c4d73ec","62e895deb803184b2418fd4d915d4b2a4398b5fc","2ab8d4d07350f7f4fecf33dc915a2c850a5eea16","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^4<"]]],["^1K","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3K","^3Y"]]],["^1K","goog/events/listener.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","~$goog.events.ListenableKey"]]],["^1K","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3K","~$goog.fs.blob","^3N","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3P","^3Q"]]],["^1K","goog/events/listenermap.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","~$goog.array","~$goog.events.Listener","^3U"]]],["^1K","goog/events/eventid.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3P","~$goog.html.SafeUrl","^3Q","^3K","^3F"]]],["^1K","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3K","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^4E","~$goog.html.SafeStyle","^4I","^3O","~$goog.html.uncheckedconversions","^3P","^3F"]]],["^1K","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","~$goog.dom.TagName","^3K","~$goog.dom.element"]]],["^1K","reagent/impl/component.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X","^3U","^F","^3D","^43","^4A","^47","^3C"]]],["^1K","clojure/walk.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X"]]],["^1K","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3P","^4E","^4N","~$goog.html.SafeStyleSheet","^4I","^4P","^3O","^3Q","^3K","^3V","^4G","^3U","^3F","~$goog.dom.tags","^4F"]]],["^1K","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3U"]]],["^1K","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^4G","^3F","^3G"]]],["^1K","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","re_frame/settings.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X","^1S","^12"]]],["^1K","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^4G","^3K","^4J","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4P","~$goog.dom.safe","^4M","^4O","~$goog.math.Coordinate","~$goog.math.Size","^3U","~$goog.string","^3P","~$goog.string.Unicode","^3M"]]],["^1K","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","~$goog.debug.Error","^4U"]]],["^1K","reagent/impl/protocols.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X"]]],["^1K","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^4G","^3K","~$goog.collections.maps","^4Y","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1K","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3H"]]],["^1K","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","goog/events/eventtypehelpers.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^40","^3M"]]],["^1K","re_frame/db.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X","^1S"]]],["^1K","goog/disposable/idisposable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",[]]],["^1K","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^4G","^3U"]]],["^1K","goog/disposable/dispose.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","clojure/string.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X","^4Y","~$goog.string.StringBuffer"]]],["^1K","re_frame/cofx.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X","^14","^S","~$re-frame.registrar","^12"]]],["^4;","node_modules/react/cjs/react.production.min.js"],["34d722fc3583e9a07bd799a718366eac5c4d73ec","62e895deb803184b2418fd4d915d4b2a4398b5fc","a31c0a9ff8b9566dce48df77abc4a00c5290c182","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^4<"]]],["^1K","goog/debug/entrypointregistry.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3K"]]],["^1K","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^4V","^4O","^3P","^3F"]]],["^1K","re_frame/interceptor.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X","^12","^1S","^V","^56","^10","^3R"]]],["^1K","clojure/data.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X","^3R"]]],["^1K","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3F","^3J"]]],["^1K","reagent/core.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X","^F","~$reagent.impl.template","^4?","^3D","^43","^4A","^47","^3C"]]],["^1K","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^4G","~$goog.debug.errorcontext"]]],["^1K","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","~$goog.math"]]],["^1K","re_frame/std_interceptors.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X","^S","^12","^W","^14","^U","^R","^10","^V"]]],["^1K","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","~$goog.flags"]]],["^1K","goog/async/nexttick.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3Z","~$goog.dom","^4P","^4L","^3V","^3W"]]],["^1K","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^4U","^4P"]]],["^1K","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3K","^4M","^4E","^4N","^4R","^4I","^3O","^3P","^3F"]]],["^1K","re_frame/utils.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X","^12","^1S"]]],["^1K","reagent/impl/input.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X","^4?","^43","^4A"]]],["^1K","goog/events/event.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","~$goog.Disposable","~$goog.events.EventId"]]],["^1K","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","cljs/core.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","~$goog.math.Long","~$goog.math.Integer","^4Y","^3U","^4G","~$goog.Uri","^55"]]],["^1K","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3P","^3Q","^4F","^3K"]]],["^1K","reagent/debug.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X"]]],["^1K","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3P","^4N","^3Q","^3U","^3K","^3F"]]],["^1K","goog/events/browserevent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","~$goog.debug","~$goog.events.Event","~$goog.events.EventType","^3Y","^3M"]]],["^1K","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3Y"]]],["^1K","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3M"]]],["^1K","clojure/set.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X"]]],["^1K","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3K","^4Y"]]],["^1K","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^3K","^3Q"]]],["^1K","goog/disposable/disposeall.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^49"]]],["^1K","goog/events/listenable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","goog/events/listenablekey.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z"]]],["^1K","re_frame/trace.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^3?",["^ ","^3@",null,"^3A",["^I",[]],"^3B",["^Z","^X","^1S","^12","^4L"]]]]],"~:clj-info",["^ ","jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes/and_or.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1690756440000,"jar:file:/Users/john/.m2/repository/re-frame/re-frame/1.4.3/re-frame-1.4.3.jar!/re_frame/trace.cljc",1715682669000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/core.clj",1685651089000,"jar:file:/Users/john/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1679776603000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/compiler.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/util.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/tagged_literals.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/ratom.clj",1685651089000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/env.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl/namespaces.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/debug.clj",1685651089000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64.clj",1715719162000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/interop.clj",1685651089000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/instant.clj",1715719162000,"jar:file:/Users/john/.m2/repository/re-frame/re-frame/1.4.3/re-frame-1.4.3.jar!/re_frame/interop.clj",1715682669000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/core.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/js_deps.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/data/json.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64_vlq.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/externs.clj",1715719162000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","contains re-frame supplied, standard interceptors","^7","re_frame/std_interceptors.cljc","^8",1,"^9",5,"^:",1,"^;",30],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",[]],"^J","^K","^L",["^ "],"^O",null,"^P",["^ ","^Q","^R","^S","^S","^T","^U","^V","^V","^W","^W","^X","^X","^Y","^S","^Z","^Z","^[","^V","^10","^10","^11","^W","^12","^12","^13","^10","^R","^R","^U","^U","^14","^14"],"^15",["^I",["^16"]],"^17",["^ ","^18","^S","^19","^S","^1:","^S","^1;","^S","^1<","^S","^1=","^S","^1>","^12","^1?","^14"],"~:defs",["^ ","~$unwrap",["^ ","^J","^39","^7","re_frame/std_interceptors.cljc","^8",38,"^9",1,"^:",38,"^;",12,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",38,"^9",6,"^:",38,"^;",12],"~:tag",["^I",["~$clj","~$any","~$cljs.core/IMap"]]],"~$on-changes",["^ ","~:protocol-inline",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",211,"^9",8,"^:",211,"^;",18,"~:arglists",["^1B",["~$quote",["^1B",[["~$f","~$out-path","~$&","~$in-paths"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^1B",["~$f","^6H","^6I"]]],"^6F",["^1B",[["~$f","^6H","~$&","^6I"]]],"~:arglists-meta",["^1B",[null]]]],"^J","^3:","^7","re_frame/std_interceptors.cljc","^;",18,"^6J",["^ ","^6K",true,"^6L",2,"^6M",2,"^6N",[["^1B",["~$f","^6H","^6I"]]],"^6F",["^1B",[["~$f","^6H","~$&","^6I"]]],"^6O",["^1B",[null]]],"^6N",[["^1B",["~$f","^6H","^6I"]]],"~:protocol-impl",null,"^6L",2,"^6O",["^1B",[null]],"^9",1,"^6K",true,"~:methods",[["^ ","^6L",2,"^6K",true,"^6@",["^I",["^6A","^6B","^6C"]]]],"^8",211,"~:ret-tag","^6B","^:",211,"^6M",2,"~:fn-var",true,"^6F",["^1B",[["~$f","^6H","~$&","^6I"]]]],"~$enrich",["^ ","^6E",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",185,"^9",7,"^:",185,"^;",13,"^6F",["^1B",["^6G",["^1B",[["~$f"]]]]]],"^J","^2N","^7","re_frame/std_interceptors.cljc","^;",13,"^6N",["^1B",[["~$f"]]],"^6P",null,"^6O",["^1B",[null,null]],"^9",1,"^6K",false,"^8",185,"^6R",["^I",["^6A","^6B","^6C"]],"^:",185,"^6M",1,"^6S",true,"^6F",["^1B",["^6G",["^1B",[["~$f"]]]]]],"~$path",["^ ","^6E",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",158,"^9",7,"^:",158,"^;",11,"^6F",["^1B",["^6G",["^1B",[["~$&","~$args"]]]]],"^6J",["^ ","^6K",true,"^6L",0,"^6M",0,"^6N",[["^1B",["^6V"]]],"^6F",["^1B",[["~$&","^6V"]]],"^6O",["^1B",[null]]]],"^J","^35","^7","re_frame/std_interceptors.cljc","^;",11,"^6J",["^ ","^6K",true,"^6L",0,"^6M",0,"^6N",[["^1B",["^6V"]]],"^6F",["^1B",[["~$&","^6V"]]],"^6O",["^1B",[null]]],"^6N",[["^1B",["^6V"]]],"^6P",null,"^6L",0,"^6O",["^1B",[null]],"^9",1,"^6K",true,"^6Q",[["^ ","^6L",0,"^6K",true,"^6@",["^I",["^6A","^6B","^6C"]]]],"^8",158,"^6R","^6B","^:",158,"^6M",0,"^6S",true,"^6F",["^1B",[["~$&","^6V"]]]],"~$ctx-handler->interceptor",["^ ","^6E",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",134,"^9",7,"^:",134,"^;",31,"^6F",["^1B",["^6G",["^1B",[["~$handler-fn"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"^J","^2P","^7","re_frame/std_interceptors.cljc","^;",31,"^6N",["^1B",[["^6X"]]],"^6P",null,"^6O",["^1B",[null,null]],"^9",1,"^6K",false,"^8",134,"^6R",["^I",["^6A","^6B","^6C"]],"^:",134,"^6M",1,"^6S",true,"^6F",["^1B",["^6G",["^1B",[["^6X"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"~$debug",["^ ","^J","^22","^7","re_frame/std_interceptors.cljc","^8",14,"^9",1,"^:",14,"^;",11,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",14,"^9",6,"^:",14,"^;",11],"^6@",["^I",["^6A","^6B","^6C"]]],"~$trim-v",["^ ","^J","^2<","^7","re_frame/std_interceptors.cljc","^8",54,"^9",1,"^:",54,"^;",12,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",54,"^9",6,"^:",54,"^;",12],"^6@",["^I",["^6A","^6B","^6C"]]],"~$after",["^ ","^6E",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",198,"^9",7,"^:",198,"^;",12,"^6F",["^1B",["^6G",["^1B",[["~$f"]]]]]],"^J","^2Y","^7","re_frame/std_interceptors.cljc","^;",12,"^6N",["^1B",[["~$f"]]],"^6P",null,"^6O",["^1B",[null,null]],"^9",1,"^6K",false,"^8",198,"^6R",["^I",["^6A","^6B","^6C"]],"^:",198,"^6M",1,"^6S",true,"^6F",["^1B",["^6G",["^1B",[["~$f"]]]]]],"~$fx-handler->interceptor",["^ ","^6E",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",104,"^9",7,"^:",104,"^;",30,"^6F",["^1B",["^6G",["^1B",[["^6X"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :fx ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"^J","^2S","^7","re_frame/std_interceptors.cljc","^;",30,"^6N",["^1B",[["^6X"]]],"^6P",null,"^6O",["^1B",[null,null]],"^9",1,"^6K",false,"^8",104,"^6R",["^I",["^6A","^6B","^6C"]],"^:",104,"^6M",1,"^6S",true,"^6F",["^1B",["^6G",["^1B",[["^6X"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :fx ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"~$db-handler->interceptor",["^ ","^6E",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",73,"^9",7,"^:",73,"^;",30,"^6F",["^1B",["^6G",["^1B",[["^6X"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"^J","^2A","^7","re_frame/std_interceptors.cljc","^;",30,"^6N",["^1B",[["^6X"]]],"^6P",null,"^6O",["^1B",[null,null]],"^9",1,"^6K",false,"^8",73,"^6R",["^I",["^6A","^6B","^6C"]],"^:",73,"^6M",1,"^6S",true,"^6F",["^1B",["^6G",["^1B",[["^6X"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"~$inject-global-interceptors",["^ ","^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",234,"^9",6,"^:",234,"^;",32],"^J","^2:","^7","re_frame/std_interceptors.cljc","^;",32,"^9",1,"^8",234,"^:",234,"^6@",["^I",["^6A","^6B","^6C"]],"^6","An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector."]],"^1@",["^ ","^V","^V","^[","^V","^X","^X"],"~:cljs.analyzer/constants",["^ ","^15",["^I",["~:path","~:re-frame.db/path-history","~:tags","~:original-event","~:group","~:db","~:fx-handler","~:re-frame.std-interceptors/not-found","~:queue","~:warn","~:operation","~:start","~:duration","~:debug","~:trim-v","~:event/handler","~:db-handler","~:event","~:after","~:id","~:effects","~:re-frame.db/path","~:comment","~:inject-global-interceptors","~:error","~:coeffects","~:end","~:unwrap","~:on-changes","~:groupEnd","~:ctx-handler","~:enrich","~:before","~:op-type","~:log"]],"~:order",["^7G","^7A","^7T","^7V","^7E","^7F","^79","^7;","^78","^7Q","^7O","^77","^7B","^7=","^7D","^7U","^7>","^7C","^7?","^7@","^7N","^76","^7H","^7M","^7:","^7R","^75","^7L","^74","^7J","^7I","^7S","^7P","^7K","^7<"]],"^1G",["^ ","^16",["^I",[]]],"^1H",[],"^1I",["^Z","^X","^S","^12","^W","^14","^U","^R","^10","^V"]],"^N","^K","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^3>",[["^7Z","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^7Z","~:shadow-tweaks"],null,["^7Z","~:source-map-inline"],null,["^7Z","~:shadow-optimize-constants"],null,["^7Z","~:elide-asserts"],false,["^7Z","~:optimize-constants"],null,["^7Z","^1N"],null,["^7Z","~:external-config"],null,["^7Z","~:tooling-config"],null,["^7Z","~:emit-constants"],null,["^7Z","~:load-tests"],null,["^7Z","~:form-size-threshold"],null,["^7Z","~:global-goog-object&array"],null,["^7Z","~:data-readers"],null,["~:shadow.build/config","~:target"],"~:browser",["^7Z","~:infer-externs"],"~:auto",["^7Z","^1P"],null,["^80","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^7Z","~:fn-invoke-direct"],null,["^7Z","~:source-map"],"/dev/null"]]]