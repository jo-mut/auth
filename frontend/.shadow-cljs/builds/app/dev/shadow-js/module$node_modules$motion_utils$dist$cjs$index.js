["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/motion-utils/dist/cjs/index.js"],"~:js","shadow$provide.module$node_modules$motion_utils$dist$cjs$index = function(global, require, module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {value:!0});\n  global = any => any;\n  exports.warning = global;\n  exports.invariant = global;\n  exports.warning = (check, message) => {\n    check || \"undefined\" === typeof console || console.warn(message);\n  };\n  exports.invariant = (check, message) => {\n    if (!check) {\n      throw Error(message);\n    }\n  };\n  exports.memo = function(callback) {\n    let result;\n    return () => {\n      void 0 === result && (result = callback());\n      return result;\n    };\n  };\n  exports.millisecondsToSeconds = milliseconds => milliseconds / 1000;\n  exports.noop = global;\n  exports.progress = (from, to, value) => {\n    to -= from;\n    return 0 === to ? 1 : (value - from) / to;\n  };\n  exports.secondsToMilliseconds = seconds => 1000 * seconds;\n};\n","~:source","shadow$provide[\"module$node_modules$motion_utils$dist$cjs$index\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/*#__NO_SIDE_EFFECTS__*/\nconst noop = (any) => any;\n\nexports.warning = noop;\nexports.invariant = noop;\nif (process.env.NODE_ENV !== \"production\") {\n    exports.warning = (check, message) => {\n        if (!check && typeof console !== \"undefined\") {\n            console.warn(message);\n        }\n    };\n    exports.invariant = (check, message) => {\n        if (!check) {\n            throw new Error(message);\n        }\n    };\n}\n\n/*#__NO_SIDE_EFFECTS__*/\nfunction memo(callback) {\n    let result;\n    return () => {\n        if (result === undefined)\n            result = callback();\n        return result;\n    };\n}\n\n/*\n  Progress within given range\n\n  Given a lower limit and an upper limit, we return the progress\n  (expressed as a number 0-1) represented by the given value, and\n  limit that progress to within 0-1.\n\n  @param [number]: Lower limit\n  @param [number]: Upper limit\n  @param [number]: Value to find progress within given range\n  @return [number]: Progress of value within range as expressed 0-1\n*/\n/*#__NO_SIDE_EFFECTS__*/\nconst progress = (from, to, value) => {\n    const toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\n\n/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */\n/*#__NO_SIDE_EFFECTS__*/\nconst secondsToMilliseconds = (seconds) => seconds * 1000;\n/*#__NO_SIDE_EFFECTS__*/\nconst millisecondsToSeconds = (milliseconds) => milliseconds / 1000;\n\nexports.memo = memo;\nexports.millisecondsToSeconds = millisecondsToSeconds;\nexports.noop = noop;\nexports.progress = progress;\nexports.secondsToMilliseconds = secondsToMilliseconds;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["progress","warning","secondsToMilliseconds","noop","millisecondsToSeconds","__esModule","value","invariant","memo"]],"~:compiled-at",1740925089069,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$motion_utils$dist$cjs$index.js\",\n\"lineCount\":29,\n\"mappings\":\"AAAAA,cAAA,CAAA,+CAAA,GAAoE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG5GC,QAAOC,CAAAA,cAAP,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAAA;AAGMC,QAAAA,GAAQC,GAADD,IAASC,GAAhBD;AAENJ,SAAQM,CAAAA,OAAR,GAAkBF,MAAlB;AACAJ,SAAQO,CAAAA,SAAR,GAAoBH,MAApB;AAEIJ,SAAQM,CAAAA,OAAR,GAAkB,CAACE,KAAD,EAAQC,OAAR,CAAAC,IAAoB;AAC7BF,SAAL,IAAiC,WAAjC,KAAc,MAAOG,QAArB,IACIA,OAAQC,CAAAA,IAAR,CAAaH,OAAb,CADJ;AADkC,GAAtC;AAKAT,SAAQO,CAAAA,SAAR,GAAoB,CAACC,KAAD,EAAQC,OAAR,CAAAI,IAAoB;AACpC,QAAI,CAACL,KAAL;AACI,YAAUM,KAAJ,CAAUL,OAAV,CAAN;AADJ;AADoC,GAAxC;AA8CJT,SAAQe,CAAAA,IAAR,GAtCAA,QAAa,CAACC,QAAD,CAAW;AACpB,QAAIC,MAAJ;AACA,WAAO,EAAA,IAAM;AACMC,UAAAA,EAAf,KAAID,MAAJ,KACIA,MADJ,GACaD,QAAA,EADb;AAEA,aAAOC,MAAP;AAHS,KAAb;AAFoB,GAsCxB;AACAjB,SAAQmB,CAAAA,qBAAR,GAH+BC,YAADD,IAAkBC,YAAlBD,GAAiC,IAG/D;AACAnB,SAAQI,CAAAA,IAAR,GAAeA,MAAf;AACAJ,SAAQqB,CAAAA,QAAR,GAnBiB,CAACC,IAAD,EAAOC,EAAP,EAAWpB,KAAX,CAAAkB,IAAqB;AACTE,MAAnBC,IAAwBF,IAAxBE;AACN,WAA4B,CAArB,KAAAA,EAAA,GAAyB,CAAzB,IAA8BrB,KAA9B,GAAsCmB,IAAtC,IAA8CE,EAArD;AAFkC,GAmBtC;AACAxB,SAAQyB,CAAAA,qBAAR,GAR+BC,OAADD,IAAuB,IAAvBA,GAAaC,OAQ3C;AAlE4G,CAA5G;;\",\n\"sources\":[\"node_modules/motion-utils/dist/cjs/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$motion_utils$dist$cjs$index\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\n/*#__NO_SIDE_EFFECTS__*/\\nconst noop = (any) => any;\\n\\nexports.warning = noop;\\nexports.invariant = noop;\\nif (process.env.NODE_ENV !== \\\"production\\\") {\\n    exports.warning = (check, message) => {\\n        if (!check && typeof console !== \\\"undefined\\\") {\\n            console.warn(message);\\n        }\\n    };\\n    exports.invariant = (check, message) => {\\n        if (!check) {\\n            throw new Error(message);\\n        }\\n    };\\n}\\n\\n/*#__NO_SIDE_EFFECTS__*/\\nfunction memo(callback) {\\n    let result;\\n    return () => {\\n        if (result === undefined)\\n            result = callback();\\n        return result;\\n    };\\n}\\n\\n/*\\n  Progress within given range\\n\\n  Given a lower limit and an upper limit, we return the progress\\n  (expressed as a number 0-1) represented by the given value, and\\n  limit that progress to within 0-1.\\n\\n  @param [number]: Lower limit\\n  @param [number]: Upper limit\\n  @param [number]: Value to find progress within given range\\n  @return [number]: Progress of value within range as expressed 0-1\\n*/\\n/*#__NO_SIDE_EFFECTS__*/\\nconst progress = (from, to, value) => {\\n    const toFromDifference = to - from;\\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\\n};\\n\\n/**\\n * Converts seconds to milliseconds\\n *\\n * @param seconds - Time in seconds.\\n * @return milliseconds - Converted time in milliseconds.\\n */\\n/*#__NO_SIDE_EFFECTS__*/\\nconst secondsToMilliseconds = (seconds) => seconds * 1000;\\n/*#__NO_SIDE_EFFECTS__*/\\nconst millisecondsToSeconds = (milliseconds) => milliseconds / 1000;\\n\\nexports.memo = memo;\\nexports.millisecondsToSeconds = millisecondsToSeconds;\\nexports.noop = noop;\\nexports.progress = progress;\\nexports.secondsToMilliseconds = secondsToMilliseconds;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"noop\",\"any\",\"warning\",\"invariant\",\"check\",\"message\",\"exports.warning\",\"console\",\"warn\",\"exports.invariant\",\"Error\",\"memo\",\"callback\",\"result\",\"undefined\",\"millisecondsToSeconds\",\"milliseconds\",\"progress\",\"from\",\"to\",\"toFromDifference\",\"secondsToMilliseconds\",\"seconds\"]\n}\n"]