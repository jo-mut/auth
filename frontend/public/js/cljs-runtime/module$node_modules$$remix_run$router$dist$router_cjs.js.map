{
"version":3,
"file":"module$node_modules$$remix_run$router$dist$router_cjs.js",
"lineCount":2006,
"mappings":"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",
"sources":["node_modules/@remix-run/router/dist/router.cjs.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$remix_run$router$dist$router_cjs\"] = function(global,require,module,exports) {\n/**\n * @remix-run/router v1.23.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nlet Action = /*#__PURE__*/function (Action) {\n  Action[\"Pop\"] = \"POP\";\n  Action[\"Push\"] = \"PUSH\";\n  Action[\"Replace\"] = \"REPLACE\";\n  return Action;\n}({});\n\n/**\n * The pathname, search, and hash values of a URL.\n */\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\n/**\n * A change to the current location.\n */\n/**\n * A function that receives notifications about location changes.\n */\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n\n//#endregion\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\n\nlet ResultType = /*#__PURE__*/function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n  return ResultType;\n}({});\n\n/**\n * Successful result from a loader or action\n */\n\n/**\n * Successful defer() result from a loader or action\n */\n\n/**\n * Redirect result from a loader or action\n */\n\n/**\n * Unsuccessful result from a loader or action\n */\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\n\n// Thanks https://github.com/sindresorhus/type-fest!\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n/**\n * Arguments passed to loader functions\n */\n/**\n * Arguments passed to action functions\n */\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\n/**\n * Route loader function signature\n */\n/**\n * Route action function signature\n */\n/**\n * Arguments passed to shouldRevalidate function\n */\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\n/**\n * Result from a loader or action called via dataStrategy\n */\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\n\n/**\n * Index routes must not have children\n */\n\n/**\n * Non-index routes may have children, but cannot have index\n */\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\n\n// Recursive helper for finding path parameters in the absence of wildcards\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\n/**\n * The parameters that were parsed from the URL path.\n */\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/v6/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\nfunction matchRoutesImpl(routes, locationArg, basename, allowPartial) {\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded, allowPartial);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname, allowPartial) {\n  if (allowPartial === void 0) {\n    allowPartial = false;\n  }\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    let route = meta.route;\n    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {\n      match = matchPath({\n        path: meta.relativePath,\n        caseSensitive: meta.caseSensitive,\n        end: false\n      }, remainingPathname);\n    }\n    if (!match) {\n      return null;\n    }\n    Object.assign(matchedParams, match.params);\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/v6/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/v6/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/v6/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n *\n * @deprecated The `json` method is deprecated in favor of returning raw objects.\n * This method will be removed in v7.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass DataWithResponseInit {\n  constructor(data, init) {\n    this.type = \"DataWithResponseInit\";\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nfunction data(data, init) {\n  return new DataWithResponseInit(data, typeof init === \"number\" ? {\n    status: init\n  } : init);\n}\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n/**\n * @deprecated The `defer` method is deprecated in favor of returning raw\n * objects. This method will be removed in v7.\n */\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst replace = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\n/**\n * Future flags to toggle new feature behavior\n */\n/**\n * Initialization options for createRouter\n */\n/**\n * State returned from a server-side query() call\n */\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\n/**\n * Subscriber function signature for changes to router state\n */\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\n/**\n * Function signature for determining the current scroll position\n */\n// Allowed for any navigation or fetch\n// Only allowed for navigations\n// Only allowed for submission navigations\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\n/**\n * Options for a navigate() call for a submission navigation\n */\n/**\n * Options to pass to navigate() for a navigation\n */\n/**\n * Options for a fetch() load\n */\n/**\n * Options for a fetch() submission\n */\n/**\n * Options to pass to fetch()\n */\n/**\n * Potential states for state.navigation\n */\n/**\n * Potential states for fetchers\n */\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialMatchesIsFOW = false;\n  let initialErrors = null;\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n  let initialized;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatchesIsFOW = true;\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some(m => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some(m => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    } else {\n      initialized = initialMatches.every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate = undefined;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (unblockBlockerHistoryUpdate) {\n        unblockBlockerHistoryUpdate();\n        unblockBlockerHistoryUpdate = undefined;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        let nextHistoryUpdatePromise = new Promise(resolve => {\n          unblockBlockerHistoryUpdate = resolve;\n        });\n        init.history.go(delta * -1);\n\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked, after the url\n            // restoration is also complete.  See:\n            // https://github.com/remix-run/react-router/issues/11613\n            nextHistoryUpdatePromise.then(() => init.history.go(delta));\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Remove any lingering deleted fetchers that have already been removed\n    // from state.fetchers\n    deletedFetchers.forEach(key => {\n      if (!state.fetchers.has(key) && !fetchControllers.has(key)) {\n        deletedFetchersKeys.push(key);\n      }\n    });\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      viewTransitionOpts: opts.viewTransitionOpts,\n      flushSync: opts.flushSync === true\n    }));\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    } else {\n      // We already called deleteFetcher() on these, can remove them from this\n      // Set now that we've handed the keys off to the data layer\n      deletedFetchersKeys.forEach(key => deletedFetchers.delete(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.viewTransition,\n      flushSync\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation,\n      // Proxy through any rending view transition\n      enableViewTransition: pendingViewTransitionEnabled === true\n    });\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = opts != null && opts.initialHydration && state.matches && state.matches.length > 0 && !initialMatchesIsFOW ?\n    // `matchRoutes()` has already been called if we're in here via `router.initialize()`\n    state.matches : matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial hydration will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (matches && state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        error,\n        notFoundMatches,\n        route\n      } = handleNavigational404(location.pathname);\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionResult;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [findNearestBoundary(matches).route.id, {\n        type: ResultType.error,\n        error: opts.pendingError\n      }];\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(request, location, opts.submission, matches, fogOfWar.active, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {\n          pendingNavigationController = null;\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error\n            }\n          });\n          return;\n        }\n      }\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(init.history, request.url, request.signal);\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches: updatedMatches || matches\n    }, getActionDataForCommit(pendingActionResult), {\n      loaderData,\n      errors\n    }));\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, isFogOfWar, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [boundaryId, {\n            type: ResultType.error,\n            error: discoverResult.error\n          }]\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          notFoundMatches,\n          error,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [route.id, {\n            type: ResultType.error,\n            error\n          }]\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", state, request, [actionMatch], matches, null);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result]\n      };\n    }\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result]\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(_extends({\n          navigation: loadingNavigation\n        }, actionData !== undefined ? {\n          actionData\n        } : {}), {\n          flushSync\n        });\n      }\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: discoverResult.error\n          }\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          error,\n          notFoundMatches,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult);\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null\n      }, getActionDataForCommit(pendingActionResult), updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (shouldUpdateNavigationState) {\n      let updates = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      abortFetcher(rf.key);\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds);\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // Preserve SSR errors during partial hydration\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      errors = _extends({}, state.errors, errors);\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      matches,\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getUpdatedActionData(pendingActionResult) {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {\n    revalidatingFetchers.forEach(rf => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    abortFetcher(key);\n    let flushSync = (opts && opts.flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    let preventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    function detectAndHandle405Error(m) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId\n        });\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return true;\n      }\n      return false;\n    }\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(requestMatches, new URL(fetchRequest.url).pathname, fetchRequest.signal, key);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\"action\", state, fetchRequest, [match], requestMatches, key);\n    let actionResult = actionResults[match.route.id];\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n            preventScrollReset\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]);\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      abortFetcher(staleKey);\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, new URL(fetchRequest.url).pathname, fetchRequest.signal, key);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\"loader\", state, fetchRequest, [match], matches, key);\n    let result = results[match.route.id];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false, {\n          preventScrollReset\n        });\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(request, redirect, isNavigation, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      preventScrollReset,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(location, new URL(request.url), basename);\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true\n    });\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true || redirect.response.headers.has(\"X-Remix-Replace\") ? Action.Replace : Action.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: location\n        }),\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, state, request, matchesToLoad, matches, fetcherKey) {\n    let results;\n    let dataResults = {};\n    try {\n      results = await callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties);\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach(m => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e\n        };\n      });\n      return dataResults;\n    }\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, future.v7_relativeSplatPath)\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(result);\n      }\n    }\n    return dataResults;\n  }\n  async function callLoadersAndMaybeResolveData(state, matches, matchesToLoad, fetchersToLoad, request) {\n    let currentMatches = state.matches;\n\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\"loader\", state, request, matchesToLoad, matches, null);\n    let fetcherResultsPromise = Promise.all(fetchersToLoad.map(async f => {\n      if (f.matches && f.match && f.controller) {\n        let results = await callDataStrategy(\"loader\", state, createClientSideRequest(init.history, f.path, f.controller.signal), [f.match], f.matches, f.key);\n        let result = results[f.match.route.id];\n        // Fetcher results are keyed by fetcher key from here on out, not routeId\n        return {\n          [f.key]: result\n        };\n      } else {\n        return Promise.resolve({\n          [f.key]: {\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path\n            })\n          }\n        });\n      }\n    }));\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce((acc, r) => Object.assign(acc, r), {});\n    await Promise.all([resolveNavigationDeferredResults(matches, loaderResults, request.signal, currentMatches, state.loaderData), resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad)]);\n    return {\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n      }\n      abortFetcher(key);\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n    // If this fetcher was previously marked for deletion, unmark it since we\n    // have a new instance\n    if (deletedFetchers.has(key)) {\n      deletedFetchers.delete(key);\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n\n    // If we opted into the flag we can clear this now since we're calling\n    // deleteFetcher() at the end of updateState() and we've already handed the\n    // deleted fetcher keys off to the data layer.\n    // If not, we're eagerly calling deleteFetcher() and we need to keep this\n    // Set populated until the next updateState call, and we'll clear\n    // `deletedFetchers` then\n    if (future.v7_fetcherPersist) {\n      deletedFetchers.delete(key);\n    }\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    let count = (activeFetchers.get(key) || 0) - 1;\n    if (count <= 0) {\n      activeFetchers.delete(key);\n      deletedFetchers.add(key);\n      if (!future.v7_fetcherPersist) {\n        deleteFetcher(key);\n      }\n    } else {\n      activeFetchers.set(key, count);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    if (controller) {\n      controller.abort();\n      fetchControllers.delete(key);\n    }\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function handleNavigational404(pathname) {\n    let error = getInternalRouterError(404, {\n      pathname\n    });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n    return {\n      notFoundMatches: matches,\n      route,\n      error\n    };\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function checkFogOfWar(matches, routesToUse, pathname) {\n    if (patchRoutesOnNavigationImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n        return {\n          active: true,\n          matches: fogMatches || []\n        };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n          return {\n            active: true,\n            matches: partialMatches\n          };\n        }\n      }\n    }\n    return {\n      active: false,\n      matches: null\n    };\n  }\n  async function discoverRoutes(matches, pathname, signal, fetcherKey) {\n    if (!patchRoutesOnNavigationImpl) {\n      return {\n        type: \"success\",\n        matches\n      };\n    }\n    let partialMatches = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let localManifest = manifest;\n      try {\n        await patchRoutesOnNavigationImpl({\n          signal,\n          path: pathname,\n          matches: partialMatches,\n          fetcherKey,\n          patch: (routeId, children) => {\n            if (signal.aborted) return;\n            patchRoutesImpl(routeId, children, routesToUse, localManifest, mapRouteProperties);\n          }\n        });\n      } catch (e) {\n        return {\n          type: \"error\",\n          error: e,\n          partialMatches\n        };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR && !signal.aborted) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n      if (signal.aborted) {\n        return {\n          type: \"aborted\"\n        };\n      }\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        return {\n          type: \"success\",\n          matches: newMatches\n        };\n      }\n      let newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every((m, i) => m.route.id === newPartialMatches[i].route.id)) {\n        return {\n          type: \"success\",\n          matches: null\n        };\n      }\n      partialMatches = newPartialMatches;\n    }\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  function patchRoutes(routeId, children) {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties);\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext,\n      skipLoaderErrorBubbling,\n      dataStrategy\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, skipLoaderErrorBubbling === true, null);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext,\n      dataStrategy\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, false, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, dataStrategy);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]);\n\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null);\n    return _extends({}, context, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      }\n    }, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionHeaders: result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {}\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling);\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy) {\n    let results = await callDataStrategyImpl(dataStrategy || defaultDataStrategy, type, null, request, matchesToLoad, matches, null, manifest, mapRouteProperties, requestContext);\n    let dataResults = {};\n    await Promise.all(matches.map(async match => {\n      if (!(match.route.id in results)) {\n        return;\n      }\n      let result = results[match.route.id];\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        // Throw redirects and let the server handle them with an HTTP redirect\n        throw normalizeRelativeRoutingRedirectResponse(response, request, match.route.id, matches, basename, future.v7_relativeSplatPath);\n      }\n      if (isResponse(result.result) && isRouteRequest) {\n        // For SSR single-route requests, we want to hand Responses back\n        // directly without unwrapping\n        throw result;\n      }\n      dataResults[match.route.id] = await convertDataStrategyResultToDataResult(result);\n    }));\n    return dataResults;\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Account for `?index` params when routing to the current location\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch) {\n    let nakedIndex = hasNakedIndexQuery(path.search);\n    if (activeRouteMatch.route.index && !nakedIndex) {\n      // Add one when we're targeting an index route\n      path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n    } else if (!activeRouteMatch.route.index && nakedIndex) {\n      // Remove existing ones when we're not\n      let params = new URLSearchParams(path.search);\n      let indexValues = params.getAll(\"index\");\n      params.delete(\"index\");\n      indexValues.filter(v => v).forEach(v => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? \"?\" + qs : \"\";\n    }\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n\n// Filter out all routes at/below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId, includeBoundary) {\n  if (includeBoundary === void 0) {\n    includeBoundary = false;\n  }\n  let index = matches.findIndex(m => m.route.id === boundaryId);\n  if (index >= 0) {\n    return matches.slice(0, includeBoundary ? index + 1 : index);\n  }\n  return matches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, initialHydration, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryMatches = matches;\n  if (initialHydration && state.errors) {\n    // On initial hydration, only consider matches up to _and including_ the boundary.\n    // This is inclusive to handle cases where a server loader ran successfully,\n    // a child server loader bubbled up to this route, but this route has\n    // `clientLoader.hydrate` so we want to still run the `clientLoader` so that\n    // we have a complete version of `loaderData`\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, Object.keys(state.errors)[0], true);\n  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {\n    // If an action threw an error, we call loaders up to, but not including the\n    // boundary\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]);\n  }\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (initialHydration) {\n      return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false :\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial hydration (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (initialHydration || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction shouldLoadRouteOnHydration(route, loaderData, errors) {\n  // We dunno if we have a loader - gotta find out!\n  if (route.lazy) {\n    return true;\n  }\n\n  // No loader, nothing to initialize\n  if (!route.loader) {\n    return false;\n  }\n  let hasData = loaderData != null && loaderData[route.id] !== undefined;\n  let hasError = errors != null && errors[route.id] !== undefined;\n\n  // Don't run if we error'd during SSR\n  if (!hasData && hasError) {\n    return false;\n  }\n\n  // Explicitly opting-in to running on hydration\n  if (typeof route.loader === \"function\" && route.loader.hydrate === true) {\n    return true;\n  }\n\n  // Otherwise, run if we're not yet initialized with anything\n  return !hasData && !hasError;\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\nfunction patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties) {\n  var _childrenToPatch;\n  let childrenToPatch;\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(route, \"No route found to patch children into: routeId = \" + routeId);\n    if (!route.children) {\n      route.children = [];\n    }\n    childrenToPatch = route.children;\n  } else {\n    childrenToPatch = routesToUse;\n  }\n\n  // Don't patch in routes we already know about so that `patch` is idempotent\n  // to simplify user-land code. This is useful because we re-call the\n  // `patchRoutesOnNavigation` function for matched routes with params.\n  let uniqueChildren = children.filter(newRoute => !childrenToPatch.some(existingRoute => isSameRoute(newRoute, existingRoute)));\n  let newRoutes = convertRoutesToDataRoutes(uniqueChildren, mapRouteProperties, [routeId || \"_\", \"patch\", String(((_childrenToPatch = childrenToPatch) == null ? void 0 : _childrenToPatch.length) || \"0\")], manifest);\n  childrenToPatch.push(...newRoutes);\n}\nfunction isSameRoute(newRoute, existingRoute) {\n  // Most optimal check is by id\n  if (\"id\" in newRoute && \"id\" in existingRoute && newRoute.id === existingRoute.id) {\n    return true;\n  }\n\n  // Second is by pathing differences\n  if (!(newRoute.index === existingRoute.index && newRoute.path === existingRoute.path && newRoute.caseSensitive === existingRoute.caseSensitive)) {\n    return false;\n  }\n\n  // Pathless layout routes are trickier since we need to check children.\n  // If they have no children then they're the same as far as we can tell\n  if ((!newRoute.children || newRoute.children.length === 0) && (!existingRoute.children || existingRoute.children.length === 0)) {\n    return true;\n  }\n\n  // Otherwise, we look to see if every child in the new route is already\n  // represented in the existing route's children\n  return newRoute.children.every((aChild, i) => {\n    var _existingRoute$childr;\n    return (_existingRoute$childr = existingRoute.children) == null ? void 0 : _existingRoute$childr.some(bChild => isSameRoute(aChild, bChild));\n  });\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy(_ref4) {\n  let {\n    matches\n  } = _ref4;\n  let matchesToLoad = matches.filter(m => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map(m => m.resolve()));\n  return results.reduce((acc, result, i) => Object.assign(acc, {\n    [matchesToLoad[i].route.id]: result\n  }), {});\n}\nasync function callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties, requestContext) {\n  let loadRouteDefinitionsPromises = matches.map(m => m.route.lazy ? loadLazyRouteModule(m.route, mapRouteProperties, manifest) : undefined);\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some(m => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve = async handlerOverride => {\n      if (handlerOverride && request.method === \"GET\" && (match.route.lazy || match.route.loader)) {\n        shouldLoad = true;\n      }\n      return shouldLoad ? callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, requestContext) : Promise.resolve({\n        type: ResultType.data,\n        result: undefined\n      });\n    };\n    return _extends({}, match, {\n      shouldLoad,\n      resolve\n    });\n  });\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext\n  });\n\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n  return results;\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, staticContext) {\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    let actualHandler = ctx => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n      }\n      return handler({\n        request,\n        params: match.params,\n        context: staticContext\n      }, ...(ctx !== undefined ? [ctx] : []));\n    };\n    let handlerPromise = (async () => {\n      try {\n        let val = await (handlerOverride ? handlerOverride(ctx => actualHandler(ctx)) : actualHandler());\n        return {\n          type: \"data\",\n          result: val\n        };\n      } catch (e) {\n        return {\n          type: \"error\",\n          result: e\n        };\n      }\n    })();\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadRoutePromise]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            result: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return {\n      type: ResultType.error,\n      result: e\n    };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  return result;\n}\nasync function convertDataStrategyResultToDataResult(dataStrategyResult) {\n  let {\n    result,\n    type\n  } = dataStrategyResult;\n  if (isResponse(result)) {\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      var _result$init3, _result$init4;\n      if (result.data instanceof Error) {\n        var _result$init, _result$init2;\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n          headers: (_result$init2 = result.init) != null && _result$init2.headers ? new Headers(result.init.headers) : undefined\n        };\n      }\n\n      // Convert thrown data() to ErrorResponse instances\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(((_result$init3 = result.init) == null ? void 0 : _result$init3.status) || 500, undefined, result.data),\n        statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n        headers: (_result$init4 = result.init) != null && _result$init4.headers ? new Headers(result.init.headers) : undefined\n      };\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init5, _result$init6;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,\n      headers: ((_result$init6 = result.init) == null ? void 0 : _result$init6.headers) && new Headers(result.init.headers)\n    };\n  }\n  if (isDataWithResponseInit(result)) {\n    var _result$init7, _result$init8;\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: (_result$init7 = result.init) == null ? void 0 : _result$init7.status,\n      headers: (_result$init8 = result.init) != null && _result$init8.headers ? new Headers(result.init.headers) : undefined\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  let location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n  return response;\n}\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach(match => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = {\n      [pendingActionResult[0]]: pendingError\n    };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach(rf => {\n    let {\n      key,\n      match,\n      controller\n    } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: {\n      [pendingActionResult[0]]: pendingActionResult[1].data\n    }\n  };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type,\n    message\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return {\n        key,\n        result\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDataStrategyResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\nfunction isRedirectDataStrategyResultResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDataWithResponseInit(value) {\n  return typeof value === \"object\" && value != null && \"type\" in value && \"data\" in value && \"init\" in value && value.type === \"DataWithResponseInit\";\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveNavigationDeferredResults(matches, results, signal, currentMatches, currentLoaderData) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then(result => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveFetcherDeferredResults(matches, results, revalidatingFetchers) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      routeId,\n      controller\n    } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(controller, \"Expected an AbortController for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, controller.signal, true).then(result => {\n        if (result) {\n          results[key] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexports.AbortedDeferredError = AbortedDeferredError;\nexports.Action = Action;\nexports.IDLE_BLOCKER = IDLE_BLOCKER;\nexports.IDLE_FETCHER = IDLE_FETCHER;\nexports.IDLE_NAVIGATION = IDLE_NAVIGATION;\nexports.UNSAFE_DEFERRED_SYMBOL = UNSAFE_DEFERRED_SYMBOL;\nexports.UNSAFE_DeferredData = DeferredData;\nexports.UNSAFE_ErrorResponseImpl = ErrorResponseImpl;\nexports.UNSAFE_convertRouteMatchToUiMatch = convertRouteMatchToUiMatch;\nexports.UNSAFE_convertRoutesToDataRoutes = convertRoutesToDataRoutes;\nexports.UNSAFE_decodePath = decodePath;\nexports.UNSAFE_getResolveToMatches = getResolveToMatches;\nexports.UNSAFE_invariant = invariant;\nexports.UNSAFE_warning = warning;\nexports.createBrowserHistory = createBrowserHistory;\nexports.createHashHistory = createHashHistory;\nexports.createMemoryHistory = createMemoryHistory;\nexports.createPath = createPath;\nexports.createRouter = createRouter;\nexports.createStaticHandler = createStaticHandler;\nexports.data = data;\nexports.defer = defer;\nexports.generatePath = generatePath;\nexports.getStaticContextFromError = getStaticContextFromError;\nexports.getToPathname = getToPathname;\nexports.isDataWithResponseInit = isDataWithResponseInit;\nexports.isDeferredData = isDeferredData;\nexports.isRouteErrorResponse = isRouteErrorResponse;\nexports.joinPaths = joinPaths;\nexports.json = json;\nexports.matchPath = matchPath;\nexports.matchRoutes = matchRoutes;\nexports.normalizePathname = normalizePathname;\nexports.parsePath = parsePath;\nexports.redirect = redirect;\nexports.redirectDocument = redirectDocument;\nexports.replace = replace;\nexports.resolvePath = resolvePath;\nexports.resolveTo = resolveTo;\nexports.stripBasename = stripBasename;\n//# sourceMappingURL=router.cjs.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","invariant","value","message","Error","warning","cond","console","warn","e","createLocation","current","to","state","location","pathname","search","hash","parsePath","Math","random","toString","substr","createPath","_ref","charAt","path","parsedPath","hashIndex","indexOf","searchIndex","getUrlBasedHistory","getLocation","createHref","validateLocation","options","getIndex","idx","globalHistory","handlePop","action","Action","Pop","nextIndex","delta","index","listener","history","createURL","base","window","origin","href","replace","URL","document","defaultView","v5Compat","replaceState","listen","fn","addEventListener","PopStateEventType","removeEventListener","encodeLocation","url","push","Push","historyState","usr","pushState","error","DOMException","name","Replace","go","n","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","map","route","treePath","String","id","join","children","indexRoute","pathOrLayoutRoute","undefined","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","decoded","decodePath","routesMeta","branch","matchedParams","matchedPathname","meta","end","remainingPathname","slice","match","matchPath","relativePath","caseSensitive","params","joinPaths","pathnameBase","normalizePathname","convertRouteMatchToUiMatch","loaderData","data","handle","parentsMeta","flattenRoute","childrenIndex","startsWith","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","initialScore","some","isSplat","splatPenalty","indexRouteValue","filter","s","reduce","segment","paramRe","test","dynamicSegmentValue","emptySegmentValue","staticSegmentValue","every","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","regexpSource","_","RegExp","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","relativeSegments","pop","getInvalidPathError","char","field","dest","JSON","stringify","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","isRouteErrorResponse","status","statusText","internal","throwStaticHandlerAbortedError","request","isRouteRequest","future","v7_throwAbortReason","signal","reason","method","normalizeTo","prependBasename","fromRouteId","relative","contextualMatches","activeRouteMatch","nakedIndex","hasNakedIndexQuery","URLSearchParams","indexValues","getAll","delete","append","qs","normalizeNavigateOptions","normalizeFormMethod","isFetcher","opts","formData","body","formMethod","validRequestMethods","has","getInternalRouterError","getInvalidBodyError","type","rawFormMethod","toUpperCase","formAction","stripHashFromPath","formEncType","isMutationMethod","text","FormData","Array","entries","acc","_ref3","submission","json","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","getLoaderMatchesUntilBoundary","boundaryId","includeBoundary","findIndex","m","getMatchesToLoad","initialHydration","skipActionErrorRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","deletedFetchers","fetchLoadMatches","fetchRedirectIds","routesToUse","pendingActionResult","actionResult","isErrorResult","currentUrl","nextUrl","boundaryMatches","errors","keys","actionStatus","statusCode","shouldSkipRevalidation","navigationMatches","lazy","loader","shouldLoadRouteOnHydration","isNewLoader","currentRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","revalidatingFetchers","f","routeId","fetcherMatches","fetcher","fetchers","get","fetcherMatch","getTargetMatch","shouldRevalidate","controller","AbortController","hasData","hasError","hydrate","currentLoaderData","currentMatch","isMissingData","currentPath","loaderMatch","arg","routeChoice","patchRoutesImpl","_childrenToPatch","childrenToPatch","uniqueChildren","newRoute","existingRoute","isSameRoute","newRoutes","aChild","_existingRoute$childr","bChild","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","staticRouteValue","immutableRouteKeys","defaultDataStrategy","_ref4","matchesToLoad","shouldLoad","results","Promise","all","resolve","callDataStrategyImpl","dataStrategyImpl","fetcherKey","requestContext","loadRouteDefinitionsPromises","dsMatches","loadRoutePromise","handlerOverride","callLoaderOrAction","ResultType","context","staticContext","onReject","runHandler","handler","reject","abortPromise","r","actualHandler","ctx","handlerPromise","val","race","handlerError","catch","convertDataStrategyResultToDataResult","dataStrategyResult","isResponse","contentType","headers","ErrorResponseImpl","isDataWithResponseInit","_result$init3","_result$init4","_result$init","_result$init2","init","Headers","isDeferredData","_result$init5","_result$init6","deferred","deferredData","_result$init7","_result$init8","normalizeRelativeRoutingRedirectResponse","response","ABSOLUTE_URL_REGEX","trimmedMatches","set","normalizeRedirectLocation","protocol","isSameBasename","createClientSideRequest","Request","processRouteLoaderData","activeDeferreds","skipLoaderErrorBubbling","foundError","loaderHeaders","pendingError","isRedirectResult","boundaryMatch","findNearestBoundary","isDeferredResult","processLoaderData","fetcherResults","rf","aborted","doneFetcher","getDoneFetcher","mergeLoaderData","newLoaderData","mergedLoaderData","getActionDataForCommit","actionData","reverse","eligibleMatches","find","hasErrorBoundary","getShortCircuitMatches","_temp5","errorMessage","findRedirect","isRedirectDataStrategyResultResult","redirectStatusCodes","redirect","subscribe","cancel","resolveData","validMutationMethods","resolveNavigationDeferredResults","currentMatches","isRevalidatingLoader","resolveDeferredData","then","resolveFetcherDeferredResults","unwrap","unwrappedData","getSubmissionFromNavigation","navigation","getLoadingNavigation","getLoadingFetcher","restoreAppliedTransitions","_window","transitions","sessionPositions","sessionStorage","getItem","TRANSITIONS_STORAGE_KEY","k","isArray","Set","defineProperty","paths","DataWithResponseInit","constructor","AbortedDeferredError","DeferredData","responseInit","pendingKeysSet","subscribers","deferredKeys","onAbort","unlistenAbortSignal","this.unlistenAbortSignal","_ref2","trackPromise","done","add","promise","onSettle","undefinedError","emit","settledKey","subscriber","abort","size","_tracked","_error","_data","Response","validMutationMethodsArr","validRequestMethodsArr","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","defaultMapRouteProperties","UNSAFE_DEFERRED_SYMBOL","Symbol","UNSAFE_DeferredData","UNSAFE_ErrorResponseImpl","UNSAFE_convertRouteMatchToUiMatch","UNSAFE_convertRoutesToDataRoutes","UNSAFE_decodePath","UNSAFE_getResolveToMatches","UNSAFE_invariant","UNSAFE_warning","createBrowserHistory","createBrowserLocation","createBrowserHref","createHashHistory","createHashLocation","createHashHref","querySelector","getAttribute","validateHashLocation","createMemoryHistory","createMemoryLocation","initialEntries","initialIndex","entry","min","max","nextLocation","splice","createRouter","updateState","newState","completedFetchers","deletedFetchersKeys","v7_fetcherPersist","fetchControllers","viewTransitionOpts","flushSync","deleteFetcher","completeNavigation","_temp","_location$state","_location$state2","isActionReload","_isRedirect","blockers","Map","preventScrollReset","pendingPreventScrollReset","inFlightDataRoutes","dataRoutes","isUninterruptedRevalidation","pendingAction","priorPaths","appliedViewTransitions","currentLocation","pendingViewTransitionEnabled","toPaths","historyAction","initialized","revalidation","restoreScrollPosition","getSavedScrollPosition","navigate","normalizedPath","v7_prependBasename","v7_normalizeFormMethod","userReplace","blockerKey","shouldBlockNavigation","updateBlocker","startNavigation","enableViewTransition","viewTransition","pendingNavigationController","startUninterruptedRevalidation","savedScrollPositions","getScrollPosition","getScrollKey","loadingNavigation","overrideNavigation","initialMatchesIsFOW","fogOfWar","checkFogOfWar","active","handleAction","shortCircuited","updatedMatches","handleLoaders","fetcherSubmission","notFoundMatches","handleNavigational404","isFogOfWar","interruptActiveLoads","discoverResult","discoverRoutes","partialMatches","actionMatch","callDataStrategy","startRedirectNavigation","activeSubmission","shouldUpdateNavigationState","v7_partialHydration","getUpdatedActionData","v7_skipActionErrorRevalidation","cancelActiveDeferreds","pendingNavigationLoadId","incrementingLoadId","updatedFetchers","markFetchRedirectsDone","updates","getUpdatedRevalidatingFetchers","abortFetcher","abortPendingFetchRevalidations","loaderResults","callLoadersAndMaybeResolveData","didAbortFetchLoads","abortStaleFetchLoads","revalidatingFetcher","handleFetcherAction","requestMatches","detectAndHandle405Error","setFetcherError","existingFetcher","updateFetcherState","abortController","fetchRequest","originatingLoadId","actionResults","revalidationRequest","loadId","fetchReloadIds","loadFetcher","staleKey","handleFetcherLoader","isNavigation","_temp2","redirectLocation","isBrowser","isDocumentReload","routerWindow","redirectHistoryAction","dataResults","fetchersToLoad","loaderResultsPromise","fetcherResultsPromise","getFetcher","activeFetchers","markFetchersDone","doneKeys","landedId","yeetedKeys","deleteBlocker","blockerFunctions","newBlocker","blocker","blockerFunction","predicate","cancelledRouteIds","dfd","getScrollRestorationKey","y","patchRoutesOnNavigationImpl","fogMatches","isNonHMR","localManifest","patch","newMatches","newPartialMatches","createElement","isServer","detectErrorBoundary","dataStrategy","patchRoutesOnNavigation","unlistenHistory","initialScrollRestored","hydrationData","initialMatches","initialErrors","router","removePageHideEventListener","unblockBlockerHistoryUpdate","initialize","nextHistoryUpdatePromise","_saveAppliedTransitions","setItem","enableScrollRestoration","positions","getPosition","getKey","fetch","revalidate","deleteFetcherAndUpdateState","count","dispose","clear","getBlocker","patchRoutes","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","createStaticHandler","queryImpl","routeMatch","submit","loadRouteData","actionHeaders","Location","loaderRequest","executedLoaders","fromEntries","query","_temp3","methodNotAllowedMatches","queryRoute","_temp4","values","_result$activeDeferre","defer","generatePath","originalPath","prefix","p","array","star","keyMatch","optional","param","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","getToPathname","redirectDocument"]
}
