{"version":3,"sources":["frontend/api/core.cljs"],"mappings":";AAGA,wBAAA,xBAAKA;AAEL,4BAAA,5BAAMC,gEAASC,KAAKC,MAAMC;AAA1B,AACE,uBAAA,mFAAA,qFAAA,/LAACC;;OACG,iDAAA,YAAA,mBAAA,kBAAA,8BAAA,hIAACC,MAAS,uBAAA,tBAAKN,uJAIS,eAAA,fAACO,0BAAiCJ,mBACAC,kBACAF,7NAC1D,6OACC,WAAKM,xPAKN,PAQA;AAbC,AACE,AAACC,YAAeD;;AAChB,oBAAI,AAAMA;AACR,OAAOA;;AACP,MAAO,MAAA,NAACE;;SAEZ,WAAKC;AAAL,AACE,YAAA,ZAACF,qCAAyCE;;AAC1C,AAAWA;;AACX,WAAA,2CAAA,iQAAA,0EAAA,KAAA,6DAAA,/bAAMC,uGAAuB,sHAAA,2EAAA,jMAACC,0DAAQ,AAAYF;AAAlD,AAGE,8BAAA,mFAAA,1GAACN,4LAAiCO;UAEtC,WAAKE;AAAL,AACE,uBAAA,mFAAA,1GAACT,gMAAmCS;;AACpC,MAAO,MAAA,NAACJ;;;AAEjB,0BAAA,1BAAMK,4DAAOZ,MAAMC;AAAnB,AACE,uBAAA,mFAAA,qFAAA,/LAACC;;OACG,gDAAA,YAAA,mBAAA,kBAAA,8BAAA,/HAACC,MAAS,uBAAA,tBAAKN,sJAIS,eAAA,fAACO,0BAAiCJ,mBACAC,1MAC1D,8NACC,WAAKI,zOAKN,PAOA;AAZC,AACE,AAACC,YAAeD;;AAChB,oBAAI,AAAMA;AACR,OAAOA;;AACP,MAAO,MAAA,NAACE;;SAEZ,WAAKC;AAAL,AACE,AAAWA;;AACX,WAAA,2CAAA,iQAAA,0EAAA,KAAA,6DAAA,/bAAMC,uGAAuB,sHAAA,2EAAA,jMAACC,0DAAQ,AAAYF;AAAlD,AAGE,8BAAA,mFAAA,1GAACN,4LAAiCO;UAEtC,WAAKE;AAAL,AACE,uBAAA,mFAAA,1GAACT,gMAAmCS;;AACpC,MAAO,MAAA,NAACJ;;;AAEjB,iCAAA,jCAAMM,0EAAcC;AAApB,AACE,uBAAA,mFAAA,1GAACZ;;OAEA,uDAAA,YAAA,mBAAA,kBAAA,8BAAA,tIAACC,MAAS,uBAAA,tBAAKN,6JAIS,eAAA,fAACO,yBAAgCU,7LACzD,0NACC,WAAKT,rOAIN,PAOA;AAXC,AACE,oBAAI,AAAMA;AACR,OAAOA;;AACP,MAAO,MAAA,NAACE;;SAEZ,WAAKC;AAAL,AACE,AAAWA;;AACX,WAAA,2CAAA,iQAAA,0EAAA,KAAA,6DAAA,/bAAMC,uGAAuB,sHAAA,2EAAA,jMAACC,0DAAQ,AAAYF;AAAlD,AAGE,8BAAA,mFAAA,1GAACN,4LAAiCO;UAEtC,WAAKE;AAAL,AACE,uBAAA,mFAAA,1GAACT,gMAAmCS;;AACpC,MAAO,MAAA,NAACJ;;;AAGd,+BAAA,/BAAMQ;AAAN,AACE,uBAAA,mFAAA,1GAACb;;OAEA,AAACC,MAAS,uBAAA,tBAAKN,PACf,2DACC,WAAKQ,tEAIN,PAQA;AAZC,AACE,oBAAI,AAAMA;AACR,OAAOA;;AACP,MAAO,MAAA,NAACE;;SAEZ,WAAKC;AAAL,AACE,AAAWA;;AACX,WAAA,2CAAA,iQAAA,0EAAA,KAAA,wEAAA,MAAA,6DAAA,7gBAAMC,uGAAuB,sHAAA,2EAAA,jMAACC,0DAAQ,AAAYF;AAAlD,AAIE,8BAAA,mFAAA,1GAACN,4LAAiCO;UAEtC,WAAKE;AAAL,AACE,MAAO,MAAA,NAACJ,6BAAgCI","names":["frontend.api.core/url","frontend.api.core/sign-up","name","email","password","re-frame.core/dispatch","js/fetch","js/JSON.stringify","response","js/console.log","js/Error","data","auth","cljs.core.js__GT_clj","error","frontend.api.core/login","frontend.api.core/verify-email","verification-code","frontend.api.core/check-auth"],"sourcesContent":["(ns frontend.api.core\n  (:require [re-frame.core :as rf]))\n\n(def url \"http://localhost:3000/api/auth\")\n\n(defn sign-up [name email password]\n  (rf/dispatch [:update-loading-state true])\n  (-> (js/fetch (str url \"/signup\")\n                #js {:method  \"POST\"\n                     :headers #js {\"Content-Type\" \"application/json\"\n                                   \"Accept\"       \"application/json\"}\n                     :body    (js/JSON.stringify #js {:email    email\n                                                      :password password\n                                                      :name     name})})\n      (.then\n       (fn [response]\n         (js/console.log response)\n         (if (.-ok response)\n           (.json response)\n           (throw (js/Error \"Failed to fetch sign up data\")))))\n      (.then\n       (fn [data]\n         (js/console.log  \"sign up response data \" data)\n         (.-message data)\n         (let [auth  {:user           (js->clj (.-user ^js data) :keywordize-keys true)\n                      :authenticated? true\n                      :loading?       false}]\n           (rf/dispatch [:save-auth-response auth]))))\n      (.catch\n       (fn [error]\n         (rf/dispatch [:authentication-error error])\n         (throw (js/Error \"Failed to fetch data\"))))))\n\n(defn login [email password]\n  (rf/dispatch [:update-loading-state true])\n  (-> (js/fetch (str url \"/login\")\n                #js {:method  \"POST\"\n                     :headers #js {\"Content-Type\" \"application/json\"\n                                   \"Accept\"       \"application/json\"}\n                     :body    (js/JSON.stringify #js {:email    email\n                                                      :password password})})\n      (.then\n       (fn [response]\n         (js/console.log response)\n         (if (.-ok response)\n           (.json response)\n           (throw (js/Error \"Failed to fetch login data\")))))\n      (.then\n       (fn [data]\n         (.-message data)\n         (let [auth  {:user           (js->clj (.-user ^js data) :keywordize-keys true)\n                      :authenticated? true\n                      :loading?       false}]\n           (rf/dispatch [:save-auth-response auth]))))\n      (.catch\n       (fn [error]\n         (rf/dispatch [:authentication-error error])\n         (throw (js/Error \"Failed to fetch login data\"))))))\n\n(defn verify-email [verification-code]\n  (rf/dispatch [:authentication-error])\n  (->\n   (js/fetch (str url \"/verify-email\")\n             #js {:method  \"POST\"\n                  :headers #js {\"Content-Type\" \"application/json\"\n                                \"Accept\"       \"application/json\"}\n                  :body    (js/JSON.stringify #js {:code    verification-code})})\n   (.then\n    (fn [response]\n      (if (.-ok response)\n        (.json response)\n        (throw (js/Error \"Failed to fetch verification data\")))))\n   (.then\n    (fn [data]\n      (.-message data)\n      (let [auth  {:user           (js->clj (.-user ^js data) :keywordize-keys true)\n                   :authenticated? true\n                   :loading?       false}]\n        (rf/dispatch [:save-auth-response auth]))))\n   (.catch\n    (fn [error]\n      (rf/dispatch [:authentication-error error])\n      (throw (js/Error \"Failed to fetch data\"))))))\n\n\n(defn check-auth []\n  (rf/dispatch [:checking-auth])\n  (->\n   (js/fetch (str url \"/check-auth\"))\n   (.then\n    (fn [response]\n      (if (.-ok response)\n        (.json response)\n        (throw (js/Error \"Failed to fetch auth status\")))))\n   (.then\n    (fn [data]\n      (.-message data)\n      (let [auth  {:user           (js->clj (.-user ^js data) :keywordize-keys true)\n                   :authenticated? true\n                   :checking-auth  false\n                   :loading?       false}]\n        (rf/dispatch [:save-auth-response auth]))))\n   (.catch\n    (fn [error]\n      (throw (js/Error \"Failed to fetch data\" error))))))"]}