["^ ","~:output",["^ ","~:js","goog.provide('promesa.exec');\ngoog.scope(function(){\n  promesa.exec.goog$module$goog$object = goog.module.get('goog.object');\n});\npromesa.exec._STAR_default_scheduler_STAR_ = null;\npromesa.exec._STAR_default_executor_STAR_ = null;\n/**\n * Var that indicates the availability of virtual threads.\n */\npromesa.exec.virtual_threads_available_QMARK_ = false;\n/**\n * backward compatibility alias for `virtual-threads-available?`\n */\npromesa.exec.vthread_supported_QMARK_ = promesa.exec.virtual_threads_available_QMARK_;\npromesa.exec.noop = cljs.core.constantly(null);\nif((typeof promesa !== 'undefined') && (typeof promesa.exec !== 'undefined') && (typeof promesa.exec.default_scheduler !== 'undefined')){\n} else {\n/**\n * Default scheduled executor instance.\n */\npromesa.exec.default_scheduler = (new cljs.core.Delay((function (){\nreturn (promesa.exec.scheduled_executor.cljs$core$IFn$_invoke$arity$0 ? promesa.exec.scheduled_executor.cljs$core$IFn$_invoke$arity$0() : promesa.exec.scheduled_executor.call(null, ));\n}),null));\n}\nif((typeof promesa !== 'undefined') && (typeof promesa.exec !== 'undefined') && (typeof promesa.exec.default_executor !== 'undefined')){\n} else {\n/**\n * Default executor instance, ForkJoinPool/commonPool in JVM, MicrotaskExecutor on JS.\n */\npromesa.exec.default_executor = (new cljs.core.Delay((function (){\nreturn (promesa.exec.microtask_executor.cljs$core$IFn$_invoke$arity$0 ? promesa.exec.microtask_executor.cljs$core$IFn$_invoke$arity$0() : promesa.exec.microtask_executor.call(null, ));\n}),null));\n}\n/**\n * Default Executor instance that runs the task in the same thread.\n */\npromesa.exec.default_current_thread_executor = (new cljs.core.Delay((function (){\nreturn (promesa.exec.current_thread_executor.cljs$core$IFn$_invoke$arity$0 ? promesa.exec.current_thread_executor.cljs$core$IFn$_invoke$arity$0() : promesa.exec.current_thread_executor.call(null, ));\n}),null));\nif((typeof promesa !== 'undefined') && (typeof promesa.exec !== 'undefined') && (typeof promesa.exec.default_thread_executor !== 'undefined')){\n} else {\n/**\n * A global, thread per task executor service.\n */\npromesa.exec.default_thread_executor = promesa.exec.default_executor;\n}\nif((typeof promesa !== 'undefined') && (typeof promesa.exec !== 'undefined') && (typeof promesa.exec.default_vthread_executor !== 'undefined')){\n} else {\n/**\n * A global, virtual thread per task executor service.\n */\npromesa.exec.default_vthread_executor = promesa.exec.default_executor;\n}\n/**\n * Returns true if `o` is an instane of Executor or satisfies IExecutor protocol.\n */\npromesa.exec.executor_QMARK_ = (function promesa$exec$executor_QMARK_(o){\nif((!((o == null)))){\nif(((false) || ((cljs.core.PROTOCOL_SENTINEL === o.promesa$protocols$IExecutor$)))){\nreturn true;\n} else {\nif((!o.cljs$lang$protocol_mask$partition$)){\nreturn cljs.core.native_satisfies_QMARK_(promesa.protocols.IExecutor,o);\n} else {\nreturn false;\n}\n}\n} else {\nreturn cljs.core.native_satisfies_QMARK_(promesa.protocols.IExecutor,o);\n}\n});\npromesa.exec.resolve_executor = (function promesa$exec$resolve_executor(var_args){\nvar G__18432 = arguments.length;\nswitch (G__18432) {\ncase 0:\nreturn promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(null);\n}));\n\n(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1 = (function (executor){\nif((((executor == null)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),executor)))){\nreturn cljs.core.deref(promesa.exec.default_executor);\n} else {\nvar G__18435 = executor;\nvar G__18435__$1 = (((G__18435 instanceof cljs.core.Keyword))?G__18435.fqn:null);\nswitch (G__18435__$1) {\ncase \"thread\":\nreturn promesa.util.maybe_deref(promesa.exec.default_thread_executor);\n\nbreak;\ncase \"vthread\":\nreturn promesa.util.maybe_deref(promesa.exec.default_vthread_executor);\n\nbreak;\ncase \"current-thread\":\nreturn promesa.util.maybe_deref(promesa.exec.default_current_thread_executor);\n\nbreak;\ndefault:\nreturn promesa.util.maybe_deref(executor);\n\n}\n}\n}));\n\n(promesa.exec.resolve_executor.cljs$lang$maxFixedArity = 1);\n\npromesa.exec.resolve_scheduler = (function promesa$exec$resolve_scheduler(var_args){\nvar G__18439 = arguments.length;\nswitch (G__18439) {\ncase 0:\nreturn promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$1(null);\n}));\n\n(promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$1 = (function (scheduler){\nif((((scheduler == null)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),scheduler)))){\nreturn promesa.util.maybe_deref(promesa.exec.default_scheduler);\n} else {\nreturn promesa.util.maybe_deref(scheduler);\n}\n}));\n\n(promesa.exec.resolve_scheduler.cljs$lang$maxFixedArity = 1);\n\npromesa.exec.wrap_bindings = (function promesa$exec$wrap_bindings(f){\nreturn f;\n});\n/**\n * Run the task in the provided executor.\n */\npromesa.exec.run_BANG_ = (function promesa$exec$run_BANG_(var_args){\nvar G__18445 = arguments.length;\nswitch (G__18445) {\ncase 1:\nreturn promesa.exec.run_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn promesa.exec.run_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.exec.run_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (f){\nreturn promesa.protocols._run_BANG_(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(promesa.exec._STAR_default_executor_STAR_),f);\n}));\n\n(promesa.exec.run_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (executor,f){\nreturn promesa.protocols._run_BANG_(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(executor),f);\n}));\n\n(promesa.exec.run_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Submit a task to be executed in a provided executor\n *   and return a promise that will be completed with\n *   the return value of a task.\n * \n *   A task is a plain clojure function.\n */\npromesa.exec.submit_BANG_ = (function promesa$exec$submit_BANG_(var_args){\nvar G__18449 = arguments.length;\nswitch (G__18449) {\ncase 1:\nreturn promesa.exec.submit_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn promesa.exec.submit_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.exec.submit_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (f){\nreturn promesa.protocols._submit_BANG_(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(promesa.exec._STAR_default_executor_STAR_),f);\n}));\n\n(promesa.exec.submit_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (executor,f){\nreturn promesa.protocols._submit_BANG_(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(executor),f);\n}));\n\n(promesa.exec.submit_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Schedule a callable to be executed after the `ms` delay\n *   is reached.\n * \n *   In JVM it uses a scheduled executor service and in JS\n *   it uses the `setTimeout` function.\n */\npromesa.exec.schedule_BANG_ = (function promesa$exec$schedule_BANG_(var_args){\nvar G__18453 = arguments.length;\nswitch (G__18453) {\ncase 2:\nreturn promesa.exec.schedule_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.exec.schedule_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.exec.schedule_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (ms,f){\nreturn promesa.protocols._schedule_BANG_(promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$0(),ms,f);\n}));\n\n(promesa.exec.schedule_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (scheduler,ms,f){\nreturn promesa.protocols._schedule_BANG_(promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$1(scheduler),ms,f);\n}));\n\n(promesa.exec.schedule_BANG_.cljs$lang$maxFixedArity = 3);\n\n\n/**\n* @constructor\n * @implements {promesa.protocols.IExecutor}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.IWithMeta}\n*/\npromesa.exec.t_promesa$exec18466 = (function (meta18467){\nthis.meta18467 = meta18467;\nthis.cljs$lang$protocol_mask$partition0$ = 393216;\nthis.cljs$lang$protocol_mask$partition1$ = 0;\n});\n(promesa.exec.t_promesa$exec18466.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_18468,meta18467__$1){\nvar self__ = this;\nvar _18468__$1 = this;\nreturn (new promesa.exec.t_promesa$exec18466(meta18467__$1));\n}));\n\n(promesa.exec.t_promesa$exec18466.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_18468){\nvar self__ = this;\nvar _18468__$1 = this;\nreturn self__.meta18467;\n}));\n\n(promesa.exec.t_promesa$exec18466.prototype.promesa$protocols$IExecutor$ = cljs.core.PROTOCOL_SENTINEL);\n\n(promesa.exec.t_promesa$exec18466.prototype.promesa$protocols$IExecutor$_run_BANG_$arity$2 = (function (this$,f){\nvar self__ = this;\nvar this$__$1 = this;\ntry{return promesa.protocols._promise(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(promesa.exec.noop,f));\n}catch (e18485){var cause = e18485;\nreturn promesa.protocols._promise(cause);\n}}));\n\n(promesa.exec.t_promesa$exec18466.prototype.promesa$protocols$IExecutor$_submit_BANG_$arity$2 = (function (this$,f){\nvar self__ = this;\nvar this$__$1 = this;\ntry{return promesa.protocols._promise((f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null, )));\n}catch (e18489){var cause = e18489;\nreturn promesa.protocols._promise(cause);\n}}));\n\n(promesa.exec.t_promesa$exec18466.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"meta18467\",\"meta18467\",981671108,null)], null);\n}));\n\n(promesa.exec.t_promesa$exec18466.cljs$lang$type = true);\n\n(promesa.exec.t_promesa$exec18466.cljs$lang$ctorStr = \"promesa.exec/t_promesa$exec18466\");\n\n(promesa.exec.t_promesa$exec18466.cljs$lang$ctorPrWriter = (function (this__5287__auto__,writer__5288__auto__,opt__5289__auto__){\nreturn cljs.core._write(writer__5288__auto__,\"promesa.exec/t_promesa$exec18466\");\n}));\n\n/**\n * Positional factory function for promesa.exec/t_promesa$exec18466.\n */\npromesa.exec.__GT_t_promesa$exec18466 = (function promesa$exec$__GT_t_promesa$exec18466(meta18467){\nreturn (new promesa.exec.t_promesa$exec18466(meta18467));\n});\n\n\n/**\n * Creates an executor instance that run tasks in the same thread.\n */\npromesa.exec.current_thread_executor = (function promesa$exec$current_thread_executor(){\nreturn (new promesa.exec.t_promesa$exec18466(cljs.core.PersistentArrayMap.EMPTY));\n});\n\n/**\n* @constructor\n * @implements {promesa.protocols.IExecutor}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.IWithMeta}\n*/\npromesa.exec.t_promesa$exec18490 = (function (meta18491){\nthis.meta18491 = meta18491;\nthis.cljs$lang$protocol_mask$partition0$ = 393216;\nthis.cljs$lang$protocol_mask$partition1$ = 0;\n});\n(promesa.exec.t_promesa$exec18490.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_18492,meta18491__$1){\nvar self__ = this;\nvar _18492__$1 = this;\nreturn (new promesa.exec.t_promesa$exec18490(meta18491__$1));\n}));\n\n(promesa.exec.t_promesa$exec18490.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_18492){\nvar self__ = this;\nvar _18492__$1 = this;\nreturn self__.meta18491;\n}));\n\n(promesa.exec.t_promesa$exec18490.prototype.promesa$protocols$IExecutor$ = cljs.core.PROTOCOL_SENTINEL);\n\n(promesa.exec.t_promesa$exec18490.prototype.promesa$protocols$IExecutor$_run_BANG_$arity$2 = (function (this$,f){\nvar self__ = this;\nvar this$__$1 = this;\nreturn promesa.protocols._map(promesa.protocols._map(promesa.protocols._promise(null),(function (_){\ntry{return (f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null, ));\n}catch (e18495){var ___$1 = e18495;\nreturn null;\n}})),promesa.exec.noop);\n}));\n\n(promesa.exec.t_promesa$exec18490.prototype.promesa$protocols$IExecutor$_submit_BANG_$arity$2 = (function (this$,f){\nvar self__ = this;\nvar this$__$1 = this;\nreturn promesa.protocols._map(promesa.protocols._promise(null),(function (_){\nreturn (f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null, ));\n}));\n}));\n\n(promesa.exec.t_promesa$exec18490.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"meta18491\",\"meta18491\",-1983585844,null)], null);\n}));\n\n(promesa.exec.t_promesa$exec18490.cljs$lang$type = true);\n\n(promesa.exec.t_promesa$exec18490.cljs$lang$ctorStr = \"promesa.exec/t_promesa$exec18490\");\n\n(promesa.exec.t_promesa$exec18490.cljs$lang$ctorPrWriter = (function (this__5287__auto__,writer__5288__auto__,opt__5289__auto__){\nreturn cljs.core._write(writer__5288__auto__,\"promesa.exec/t_promesa$exec18490\");\n}));\n\n/**\n * Positional factory function for promesa.exec/t_promesa$exec18490.\n */\npromesa.exec.__GT_t_promesa$exec18490 = (function promesa$exec$__GT_t_promesa$exec18490(meta18491){\nreturn (new promesa.exec.t_promesa$exec18490(meta18491));\n});\n\n\n/**\n * An IExecutor that schedules tasks to be executed in the MicrotasksQueue.\n */\npromesa.exec.microtask_executor = (function promesa$exec$microtask_executor(){\nreturn (new promesa.exec.t_promesa$exec18490(cljs.core.PersistentArrayMap.EMPTY));\n});\n\n/**\n* @constructor\n * @implements {promesa.protocols.IScheduler}\n*/\npromesa.exec.Scheduler = (function (){\n});\n(promesa.exec.Scheduler.prototype.promesa$protocols$IScheduler$ = cljs.core.PROTOCOL_SENTINEL);\n\n(promesa.exec.Scheduler.prototype.promesa$protocols$IScheduler$_schedule_BANG_$arity$3 = (function (_,ms,f){\nvar self__ = this;\nvar ___$1 = this;\nvar done = cljs.core.volatile_BANG_(false);\nvar task = (function (){\ntry{return (f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null, ));\n}finally {cljs.core.vreset_BANG_(done,true);\n}});\nvar tid = setTimeout(task,ms);\nvar cancel = (function (){\nreturn clearTimeout(tid);\n});\nvar G__18498 = ({\"done\": done, \"cancelled\": false, \"cancel-fn\": cancel});\nreturn (promesa.exec.__GT_ScheduledTask.cljs$core$IFn$_invoke$arity$1 ? promesa.exec.__GT_ScheduledTask.cljs$core$IFn$_invoke$arity$1(G__18498) : promesa.exec.__GT_ScheduledTask.call(null, G__18498));\n}));\n\n(promesa.exec.Scheduler.getBasis = (function (){\nreturn cljs.core.PersistentVector.EMPTY;\n}));\n\n(promesa.exec.Scheduler.cljs$lang$type = true);\n\n(promesa.exec.Scheduler.cljs$lang$ctorStr = \"promesa.exec/Scheduler\");\n\n(promesa.exec.Scheduler.cljs$lang$ctorPrWriter = (function (this__5287__auto__,writer__5288__auto__,opt__5289__auto__){\nreturn cljs.core._write(writer__5288__auto__,\"promesa.exec/Scheduler\");\n}));\n\n/**\n * Positional factory function for promesa.exec/Scheduler.\n */\npromesa.exec.__GT_Scheduler = (function promesa$exec$__GT_Scheduler(){\nreturn (new promesa.exec.Scheduler());\n});\n\n/**\n * A scheduled thread pool constructor. A ScheduledExecutor (IScheduler\n *   in CLJS) instance allows execute asynchronous tasks some time later.\n */\npromesa.exec.scheduled_executor = (function promesa$exec$scheduled_executor(var_args){\nvar args__5732__auto__ = [];\nvar len__5726__auto___18531 = arguments.length;\nvar i__5727__auto___18532 = (0);\nwhile(true){\nif((i__5727__auto___18532 < len__5726__auto___18531)){\nargs__5732__auto__.push((arguments[i__5727__auto___18532]));\n\nvar G__18533 = (i__5727__auto___18532 + (1));\ni__5727__auto___18532 = G__18533;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5733__auto__ = ((((0) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((0)),(0),null)):null);\nreturn promesa.exec.scheduled_executor.cljs$core$IFn$_invoke$arity$variadic(argseq__5733__auto__);\n});\n\n(promesa.exec.scheduled_executor.cljs$core$IFn$_invoke$arity$variadic = (function (p__18500){\nvar map__18501 = p__18500;\nvar map__18501__$1 = cljs.core.__destructure_map(map__18501);\nvar parallelism = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__18501__$1,new cljs.core.Keyword(null,\"parallelism\",\"parallelism\",-930922333),(1));\nvar factory = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__18501__$1,new cljs.core.Keyword(null,\"factory\",\"factory\",63933746));\nreturn promesa.exec.__GT_Scheduler();\n}));\n\n(promesa.exec.scheduled_executor.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(promesa.exec.scheduled_executor.cljs$lang$applyTo = (function (seq18499){\nvar self__5712__auto__ = this;\nreturn self__5712__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq18499));\n}));\n\n\n/**\n* @constructor\n * @implements {cljs.core.IPending}\n * @implements {promesa.protocols.ICancellable}\n*/\npromesa.exec.ScheduledTask = (function (state){\nthis.state = state;\nthis.cljs$lang$protocol_mask$partition1$ = 1;\nthis.cljs$lang$protocol_mask$partition0$ = 0;\n});\n(promesa.exec.ScheduledTask.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nvar done_iref = promesa.exec.goog$module$goog$object.get(self__.state,\"done\");\nreturn cljs.core.deref(done_iref);\n}));\n\n(promesa.exec.ScheduledTask.prototype.promesa$protocols$ICancellable$ = cljs.core.PROTOCOL_SENTINEL);\n\n(promesa.exec.ScheduledTask.prototype.promesa$protocols$ICancellable$_cancelled_QMARK_$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn promesa.exec.goog$module$goog$object.get(self__.state,\"cancelled\");\n}));\n\n(promesa.exec.ScheduledTask.prototype.promesa$protocols$ICancellable$_cancel_BANG_$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nif(cljs.core.truth_(self__$1.promesa$protocols$ICancellable$_cancelled_QMARK_$arity$1(null, ))){\nreturn null;\n} else {\nvar cancel_fn = promesa.exec.goog$module$goog$object.get(self__.state,\"cancel-fn\");\npromesa.exec.goog$module$goog$object.set(self__.state,\"cancelled\",true);\n\nreturn (cancel_fn.cljs$core$IFn$_invoke$arity$0 ? cancel_fn.cljs$core$IFn$_invoke$arity$0() : cancel_fn.call(null, ));\n}\n}));\n\n(promesa.exec.ScheduledTask.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"state\",\"state\",-348086572,null)], null);\n}));\n\n(promesa.exec.ScheduledTask.cljs$lang$type = true);\n\n(promesa.exec.ScheduledTask.cljs$lang$ctorStr = \"promesa.exec/ScheduledTask\");\n\n(promesa.exec.ScheduledTask.cljs$lang$ctorPrWriter = (function (this__5287__auto__,writer__5288__auto__,opt__5289__auto__){\nreturn cljs.core._write(writer__5288__auto__,\"promesa.exec/ScheduledTask\");\n}));\n\n/**\n * Positional factory function for promesa.exec/ScheduledTask.\n */\npromesa.exec.__GT_ScheduledTask = (function promesa$exec$__GT_ScheduledTask(state){\nreturn (new promesa.exec.ScheduledTask(state));\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Executors & Schedulers facilities.","~:file","promesa/exec.cljc","~:line",7,"~:column",5,"~:end-line",7,"~:end-column",17],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$shadow.js.shim.module$react","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",["~$await","~$pmap","~$run!"]],"~:name","~$promesa.exec","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$promesa.protocols","^T","~$pt","^T","~$promesa.util","^V","~$pu","^V","~$goog.object","^X","~$gobj","^X","^F","^F","~$goog","^Z"],"~:seen",["^I",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^F","^F"],"~:form",["~#list",["~$ns","^N","Executors & Schedulers facilities.",["^14",["~:refer-clojure","~:exclude",["^L","^K","^J"]]],["^14",["^10",["^T","~:as","^U"],["^V","^18","^W"],["^X","^18","^Y"]]]]],"~:flags",["^ ","^10",["^I",[]]],"~:js-deps",[],"~:deps",["^Z","^F","^T","^V","^X"]],"^Q","^N","~:resource-id",["~:shadow.build.classpath/resource","promesa/exec.cljc"],"~:compiled-at",1735855677799,"^O",["^ ","^T","^T","^U","^T","^V","^V","^W","^V","^X","^X","^Y","^X","^F","^F","^Z","^Z"],"~:resource-name","promesa/exec.cljc","~:warnings",[],"~:source",";; This Source Code Form is subject to the terms of the Mozilla Public\n;; License, v. 2.0. If a copy of the MPL was not distributed with this\n;; file, You can obtain one at http://mozilla.org/MPL/2.0/.\n;;\n;; Copyright (c) Andrey Antukh <niwi@niwi.nz>\n\n(ns promesa.exec\n  \"Executors & Schedulers facilities.\"\n  (:refer-clojure :exclude [run! pmap await])\n  (:require [promesa.protocols :as pt]\n            [promesa.util :as pu]\n            #?(:cljs [goog.object :as gobj]))\n  #?(:clj\n     (:import\n      clojure.lang.Var\n      java.lang.AutoCloseable\n      java.time.Duration\n      java.util.concurrent.Callable\n      java.util.concurrent.CompletableFuture\n      java.util.concurrent.CompletionStage\n      java.util.concurrent.CountDownLatch\n      java.util.concurrent.Executor\n      java.util.concurrent.ExecutorService\n      java.util.concurrent.Executors\n      java.util.concurrent.ForkJoinPool\n      java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory\n      java.util.concurrent.ForkJoinWorkerThread\n      java.util.concurrent.Future\n      java.util.concurrent.ScheduledExecutorService\n      java.util.concurrent.ThreadFactory\n      java.util.concurrent.TimeUnit\n      java.util.concurrent.TimeoutException\n      java.util.concurrent.atomic.AtomicLong\n      java.util.function.Supplier)))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; --- Globals & Defaults (with CLJS Impl)\n\n(declare scheduled-executor)\n(declare current-thread-executor)\n(declare ->ScheduledTask)\n\n#?(:clj  (declare cached-executor))\n#?(:cljs (declare microtask-executor))\n\n(def ^:dynamic *default-scheduler* nil)\n(def ^:dynamic *default-executor* nil)\n\n(def virtual-threads-available?\n  \"Var that indicates the availability of virtual threads.\"\n  #?(:clj (and (pu/has-method? Thread \"ofVirtual\")\n               (try\n                 (eval '(Thread/ofVirtual))\n                 true\n                 (catch Throwable cause\n                   false)))\n     :cljs false))\n\n;; DEPRECATED\n(def ^{:deprecated true\n       :doc \"backward compatibility alias for `virtual-threads-available?`\"}\n  vthread-supported?\n  virtual-threads-available?)\n\n(def ^{:no-doc true} noop (constantly nil))\n\n#?(:clj\n   (defn- get-available-processors\n     []\n     (.availableProcessors (Runtime/getRuntime))))\n\n(defonce\n  ^{:doc \"Default scheduled executor instance.\"}\n  default-scheduler\n  (delay\n    #?(:clj  (scheduled-executor :parallelism (get-available-processors))\n       :cljs (scheduled-executor))))\n\n(defonce\n  ^{:doc \"Default executor instance, ForkJoinPool/commonPool in JVM, MicrotaskExecutor on JS.\"}\n  default-executor\n  (delay\n    #?(:clj  (ForkJoinPool/commonPool)\n       :cljs (microtask-executor))))\n\n;; Executor that executes the task in the calling thread\n(def ^{:doc \"Default Executor instance that runs the task in the same thread.\"}\n  default-current-thread-executor\n  (delay (current-thread-executor)))\n\n(defonce\n  ^{:doc \"A global, thread per task executor service.\"\n    :no-doc true}\n  default-thread-executor\n  #?(:clj  (delay (cached-executor))\n     :cljs default-executor))\n\n(defonce\n  ^{:doc \"A global, virtual thread per task executor service.\"\n    :no-doc true}\n  default-vthread-executor\n  #?(:clj  (if virtual-threads-available?\n             (delay (eval '(java.util.concurrent.Executors/newVirtualThreadPerTaskExecutor)))\n             default-thread-executor)\n     :cljs default-executor))\n\n(defn executor?\n  \"Returns true if `o` is an instane of Executor or satisfies IExecutor protocol.\"\n  [o]\n  #?(:clj  (or (instance? Executor o)\n               (satisfies? pt/IExecutor o))\n     :cljs (satisfies? pt/IExecutor o)))\n\n#?(:clj\n(defn shutdown!\n  \"Shutdowns the executor service.\"\n  [^ExecutorService executor]\n  (.shutdown executor)))\n\n#?(:clj\n(defn shutdown-now!\n  \"Shutdowns and interrupts the executor service.\"\n  [^ExecutorService executor]\n  (.shutdownNow executor)))\n\n#?(:clj\n(defn shutdown?\n  \"Check if execitor is in shutdown state.\"\n  [^ExecutorService executor]\n  (.isShutdown executor)))\n\n(defn resolve-executor\n  {:no-doc true}\n  ([] (resolve-executor nil))\n  ([executor]\n   (if (or (nil? executor) (= :default executor))\n     @default-executor\n     (case executor\n       :thread         (pu/maybe-deref default-thread-executor)\n       :vthread        (pu/maybe-deref default-vthread-executor)\n       :current-thread (pu/maybe-deref default-current-thread-executor)\n       (pu/maybe-deref executor)))))\n\n(defn resolve-scheduler\n  {:no-doc true}\n  ([] (resolve-scheduler nil))\n  ([scheduler]\n   (if (or (nil? scheduler) (= :default scheduler))\n     (pu/maybe-deref default-scheduler)\n     (pu/maybe-deref scheduler))))\n\n(defn wrap-bindings\n  {:no-doc true}\n  [f]\n  #?(:cljs f\n     :clj\n     (let [bindings (get-thread-bindings)]\n       (fn\n         ([]\n          (push-thread-bindings bindings)\n          (try\n            (f)\n            (finally\n              (pop-thread-bindings))))\n         ([a]\n          (push-thread-bindings bindings)\n          (try\n            (f a)\n            (finally\n              (pop-thread-bindings))))\n         ([a b]\n          (push-thread-bindings bindings)\n          (try\n            (f a b)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c]\n          (push-thread-bindings bindings)\n          (try\n            (f a b c)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c d]\n          (push-thread-bindings bindings)\n          (try\n            (f a b c d)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c d e]\n          (push-thread-bindings bindings)\n          (try\n            (f a b c d e)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c d e & args]\n          (push-thread-bindings bindings)\n          (try\n            (apply f a b c d e args)\n            (finally\n              (pop-thread-bindings))))))))\n\n;; --- Public API\n\n(defn run!\n  \"Run the task in the provided executor.\"\n  ([f]\n   (pt/-run! (resolve-executor *default-executor*) f))\n  ([executor f]\n   (pt/-run! (resolve-executor executor) f)))\n\n(defn submit!\n  \"Submit a task to be executed in a provided executor\n  and return a promise that will be completed with\n  the return value of a task.\n\n  A task is a plain clojure function.\"\n  ([f]\n   (pt/-submit! (resolve-executor *default-executor*) f))\n  ([executor f]\n   (pt/-submit! (resolve-executor executor) f)))\n\n(defn schedule!\n  \"Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function.\"\n  ([ms f]\n   (pt/-schedule! (resolve-scheduler) ms f))\n  ([scheduler ms f]\n   (pt/-schedule! (resolve-scheduler scheduler) ms f)))\n\n;; --- Pool & Thread Factories\n\n#?(:clj\n   (defn thread-factory?\n     \"Checks if `o` is an instance of ThreadFactory\"\n     [o]\n     (instance? ThreadFactory o)))\n\n#?(:clj\n   (defn- fn->thread-factory\n     \"Adapt a simple clojure function into a ThreadFactory instance.\"\n     [func]\n     (reify ThreadFactory\n       (^Thread newThread [_ ^Runnable runnable]\n        (func runnable)))))\n\n#?(:clj\n(def ^{:no-doc true :dynamic true}\n  *default-counter*\n  (AtomicLong. 0)))\n\n#?(:clj\n(defn get-next\n  \"Get next value from atomic long counter\"\n  {:no-doc true}\n  ([] (.getAndIncrement ^AtomicLong *default-counter*))\n  ([counter] (.getAndIncrement ^AtomicLong counter))))\n\n#?(:clj\n(defn thread-factory\n  \"Returns an instance of promesa default thread factory.\"\n  [& {:keys [name daemon priority]\n      :or {daemon true\n           priority Thread/NORM_PRIORITY\n           name \"promesa/thread/%s\"}}]\n  (let [counter (AtomicLong. 0)]\n    (reify ThreadFactory\n      (newThread [this runnable]\n        (doto (Thread. ^Runnable runnable)\n          (.setPriority (int priority))\n          (.setDaemon ^Boolean daemon)\n          (.setName (format name (get-next counter)))))))))\n\n#?(:clj\n(defn forkjoin-thread-factory\n  ^ForkJoinPool$ForkJoinWorkerThreadFactory\n  [& {:keys [name daemon] :or {name \"promesa/forkjoin/%s\" daemon true}}]\n  (let [counter (AtomicLong. 0)]\n    (reify ForkJoinPool$ForkJoinWorkerThreadFactory\n      (newThread [_ pool]\n        (let [thread (.newThread ForkJoinPool/defaultForkJoinWorkerThreadFactory pool)\n              tname  (format name (get-next counter))]\n          (.setName ^ForkJoinWorkerThread thread ^String tname)\n          (.setDaemon ^ForkJoinWorkerThread thread ^Boolean daemon)\n          thread))))))\n\n#?(:clj\n(defn- resolve-thread-factory\n  {:no-doc true}\n  ^ThreadFactory\n  [opts]\n  (cond\n    (thread-factory? opts) opts\n    (= :default opts)      (thread-factory)\n    (nil? opts)            (thread-factory)\n    (map? opts)            (thread-factory opts)\n    (fn? opts)             (fn->thread-factory opts)\n    :else                  (throw (ex-info \"Invalid thread factory\" {})))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; --- DEPRECATED\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n#?(:clj\n   (defn cached-pool\n     \"A cached thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([]\n      (Executors/newCachedThreadPool))\n     ([opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newCachedThreadPool factory)))))\n\n#?(:clj\n   (defn fixed-pool\n     \"A fixed thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([n]\n      (Executors/newFixedThreadPool (int n)))\n     ([n opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newFixedThreadPool (int n) factory)))))\n\n#?(:clj\n   (defn single-pool\n     \"A single thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([]\n      (Executors/newSingleThreadExecutor))\n     ([opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newSingleThreadExecutor factory)))))\n\n#?(:clj\n   (defn scheduled-pool\n     \"A scheduled thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([] (Executors/newScheduledThreadPool (int 0)))\n     ([n] (Executors/newScheduledThreadPool (int n)))\n     ([n opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newScheduledThreadPool (int n) factory)))))\n\n#?(:clj\n   (defn work-stealing-pool\n     \"Creates a work-stealing thread pool.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([] (Executors/newWorkStealingPool))\n     ([n] (Executors/newWorkStealingPool (int n)))))\n\n#?(:clj\n   (defn forkjoin-pool\n     {:deprecated \"9.0\" :no-doc true}\n     [{:keys [factory async? parallelism]\n       :or {async? true}\n       :as opts}]\n     (let [parallelism (or parallelism (get-available-processors))\n           factory     (cond\n                         (instance? ForkJoinPool$ForkJoinWorkerThreadFactory factory) factory\n                         (nil? factory) ForkJoinPool/defaultForkJoinWorkerThreadFactory\n                         :else (throw (ex-info \"Unexpected thread factory\" {:factory factory})))]\n       (ForkJoinPool. parallelism factory nil async?))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; --- END DEPRECATED\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n#?(:clj\n   (defn cached-executor\n     \"A cached thread executor pool constructor.\"\n     [& {:keys [factory]}]\n     (let [factory (or (some-> factory resolve-thread-factory)\n                       (thread-factory :name \"promesa/cached/%s\"))]\n       (Executors/newCachedThreadPool factory))))\n\n#?(:clj\n   (defn fixed-executor\n     \"A fixed thread executor pool constructor.\"\n     [& {:keys [parallelism factory]}]\n     (let [factory (or (some-> factory resolve-thread-factory)\n                       (thread-factory :name \"promesa/fixed/%s\"))]\n       (Executors/newFixedThreadPool (int parallelism) factory))))\n\n#?(:clj\n   (defn single-executor\n     \"A single thread executor pool constructor.\"\n     [& {:keys [factory]}]\n     (let [factory (or (some-> factory resolve-thread-factory)\n                       (thread-factory :name \"promesa/single/%s\"))]\n       (Executors/newSingleThreadExecutor factory))))\n\n(defn current-thread-executor\n  \"Creates an executor instance that run tasks in the same thread.\"\n  []\n  #?(:clj\n     (reify\n       Executor\n       (^void execute [_ ^Runnable f] (.run f))\n\n       pt/IExecutor\n       (-run! [this f]\n         (-> (pt/-promise nil)\n             (pt/-finally (fn [_ _]\n                            (f)))))\n       (-submit! [this f]\n         (-> (pt/-promise nil)\n             (pt/-map (fn [_] (f))))))\n\n     :cljs\n     (reify\n       pt/IExecutor\n       (-run! [this f]\n         (try\n           (pt/-promise (comp noop f))\n           (catch :default cause\n             (pt/-promise cause))))\n\n       (-submit! [this f]\n         (try\n           (pt/-promise (f))\n           (catch :default cause\n             (pt/-promise cause)))))))\n\n#?(:cljs\n   (defn microtask-executor\n     \"An IExecutor that schedules tasks to be executed in the MicrotasksQueue.\"\n     []\n     (reify\n       pt/IExecutor\n       (-run! [this f]\n         (-> (pt/-promise nil)\n             (pt/-map (fn [_]\n                        (try (f) (catch :default _ nil))))\n             (pt/-map noop)))\n\n       (-submit! [this f]\n         (-> (pt/-promise nil)\n             (pt/-map (fn [_] (f))))))))\n\n#?(:cljs\n   (deftype Scheduler []\n     pt/IScheduler\n     (-schedule! [_ ms f]\n       (let [done (volatile! false)\n             task #(try\n                     (f)\n                     (finally\n                       (vreset! done true)))\n             tid (js/setTimeout task ms)\n             cancel #(js/clearTimeout tid)]\n         (->ScheduledTask #js {:done done\n                               :cancelled false\n                               :cancel-fn cancel})))))\n\n(defn scheduled-executor\n  \"A scheduled thread pool constructor. A ScheduledExecutor (IScheduler\n  in CLJS) instance allows execute asynchronous tasks some time later.\"\n  [& {:keys [parallelism factory] :or {parallelism 1}}]\n  #?(:clj\n     (let [parallelism (or parallelism (get-available-processors))\n           factory     (or (some-> factory resolve-thread-factory)\n                           (thread-factory :name \"promesa/scheduled/%s\"))]\n\n\n       (doto (java.util.concurrent.ScheduledThreadPoolExecutor. (int parallelism) ^ThreadFactory factory)\n         (.setRemoveOnCancelPolicy true)))\n\n     :cljs\n     (->Scheduler)))\n\n#?(:clj\n   (when virtual-threads-available?\n     (eval\n      '(defn thread-per-task-executor\n         [& {:keys [factory]}]\n         (let [factory (or (some-> factory resolve-thread-factory)\n                           (thread-factory :name \"promesa/thread-per-task/%s\"))]\n           (Executors/newThreadPerTaskExecutor ^ThreadFactory factory))))))\n\n#?(:clj\n   (when virtual-threads-available?\n     (eval\n      '(defn vthread-per-task-executor\n         []\n         (Executors/newVirtualThreadPerTaskExecutor)))))\n\n#?(:clj\n   (defn forkjoin-executor\n     [& {:keys [factory async? parallelism] :or {async? true}}]\n     (let [parallelism (or parallelism (get-available-processors))\n           factory     (cond\n                         (instance? ForkJoinPool$ForkJoinWorkerThreadFactory factory) factory\n                         (nil? factory) (forkjoin-thread-factory)\n                         :else (throw (ex-info \"Unexpected thread factory\" {:factory factory})))]\n       (ForkJoinPool. (int parallelism) factory nil async?))))\n\n#?(:clj\n   (defn work-stealing-executor\n     \"An alias for the `forkjoin-executor`.\"\n     [& params]\n     (apply forkjoin-executor params)))\n\n#?(:clj\n   (defn configure-default-executor!\n     [& params]\n     (alter-var-root #'*default-executor*\n                     (fn [executor]\n                       (when (and (delay? executor) (realized? executor))\n                         (.close ^AutoCloseable @executor))\n                       (when (instance? AutoCloseable executor)\n                         (.close ^AutoCloseable executor))\n                       (apply forkjoin-executor params)))))\n\n#?(:clj\n   (extend-type Executor\n     pt/IExecutor\n     (-run! [this f]\n       (CompletableFuture/runAsync ^Runnable f ^Executor this))\n\n     (-submit! [this f]\n       (CompletableFuture/supplyAsync ^Supplier (pu/->Supplier f) ^Executor this))))\n\n\n;; --- Scheduler & ScheduledTask\n\n#?(:clj\n   (deftype ScheduledTask [^Future fut]\n     clojure.lang.IDeref\n     (deref [_] (.get fut))\n\n     clojure.lang.IBlockingDeref\n     (deref [_ ms default]\n       (try\n         (.get fut ms TimeUnit/MILLISECONDS)\n         (catch TimeoutException e\n           default)))\n\n     clojure.lang.IPending\n     (isRealized [_] (and (.isDone fut)\n                          (not (.isCancelled fut))))\n\n     pt/ICancellable\n     (-cancelled? [_]\n       (.isCancelled fut))\n     (-cancel! [_]\n       (when-not (.isCancelled fut)\n         (.cancel fut true)))\n\n     Future\n     (get [_] (.get fut))\n     (get [_ timeout unit] (.get fut timeout unit))\n     (isCancelled [_] (.isCancelled fut))\n     (isDone [_] (.isDone fut))\n     (cancel [_ interrupt?] (.cancel fut interrupt?)))\n\n   :cljs\n   (deftype ScheduledTask [state]\n     cljs.core/IPending\n     (-realized? [_]\n       (let [done-iref (gobj/get state \"done\")]\n         (deref done-iref)))\n\n     pt/ICancellable\n     (-cancelled? [_]\n       (gobj/get state \"cancelled\"))\n     (-cancel! [self]\n       (when-not (pt/-cancelled? self)\n         (let [cancel-fn (gobj/get state \"cancel-fn\")]\n           (gobj/set state \"cancelled\" true)\n           (cancel-fn))))))\n\n#?(:clj\n   (extend-type ScheduledExecutorService\n     pt/IScheduler\n     (-schedule! [this ms f]\n       (let [ms  (if (instance? Duration ms) (inst-ms ms) ms)\n             fut (.schedule this ^Callable f (long ms) TimeUnit/MILLISECONDS)]\n         (ScheduledTask. fut)))))\n\n(defmacro with-dispatch\n  \"Helper macro for dispatch execution of the body to an executor\n  service. The returned promise is not cancellable (the body will be\n  executed independently of the cancellation).\"\n  [executor & body]\n  `(-> (submit! ~executor (wrap-bindings (^:once fn* [] ~@body)))\n       (pt/-bind pt/-promise)))\n\n(defmacro with-executor\n  \"Binds the *default-executor* var with the provided executor,\n  executes the macro body. It also can optionally shutdown or shutdown\n  and interrupt on termination if you provide `^:shutdown` and\n  `^:interrupt` metadata.\n\n  **EXPERIMENTAL API:** This function should be considered\n  EXPERIMENTAL and may be changed or removed in future versions until\n  this notification is removed.\"\n  [executor & body]\n  (let [interrupt?   (-> executor meta :interrupt)\n        shutdown?    (-> executor meta :shutdown)\n        executor-sym (gensym \"executor\")]\n    `(let [~executor-sym ~executor\n           ~executor-sym (if (fn? ~executor-sym) (~executor-sym) ~executor-sym)]\n       (binding [*default-executor* ~executor-sym]\n         (try\n           ~@body\n           (finally\n             ~(when (or shutdown? interrupt?)\n                (list (if interrupt? 'promesa.exec/shutdown-now! 'promesa.exec/shutdown!) executor-sym))))))))\n\n#?(:clj\n(defn pmap\n  \"Analogous to the `clojure.core/pmap` with the excetion that it allows\n  use a custom executor (binded to *default-executor* var) The default\n  clojure chunk size (32) is used for evaluation and the real\n  parallelism is determined by the provided executor.\n\n\n  **EXPERIMENTAL API:** This function should be considered\n  EXPERIMENTAL and may be changed or removed in future versions until\n  this notification is removed.\"\n  {:experimental true}\n  ([f coll]\n   (let [executor (resolve-executor *default-executor*)\n         frame    (Var/cloneThreadBindingFrame)]\n     (->> coll\n          (map (fn [o] (pt/-submit! executor #(do\n                                                (Var/resetThreadBindingFrame frame)\n                                                (f o)))))\n          (clojure.lang.RT/iter)\n          (clojure.lang.RT/chunkIteratorSeq)\n          (map (fn [o] (.get ^CompletableFuture o))))))\n  ([f coll & colls]\n   (let [step-fn (fn step-fn [cs]\n                   (lazy-seq\n                    (let [ss (map seq cs)]\n                      (when (every? identity ss)\n                        (cons (map first ss) (step-fn (map rest ss)))))))]\n     (pmap #(apply f %) (step-fn (cons coll colls)))))))\n\n#?(:clj\n(defmacro thread\n  \"A low-level, not-pooled thread constructor, it accepts an optional\n  map as first argument and the body. The options map is interepreted\n  as options if a literal map is provided. The available options are:\n  `:name`, `:priority`, `:daemon` and `:virtual`. The `:virtual`\n  option is ignored if you are using a JVM that has no support for\n  Virtual Threads.\"\n  [opts & body]\n  (let [[opts body] (if (map? opts)\n                      [opts body]\n                      [nil (cons opts body)])\n        tname (or (:name opts)\n                  (format \"promesa/unpooled-thread/%s\" (get-next)))\n        tprio (:priority opts Thread/NORM_PRIORITY)\n        tdaem (:daemon opts true)\n        tvirt (:virtual opts false)\n        thr-s (-> (gensym \"thread-\")\n                  (vary-meta assoc :type `Thread))\n        run-s (-> (gensym \"runnable-\")\n                  (vary-meta assoc :type `Runnable))]\n    `(let [~run-s (^:once fn* [] ~@body)\n           ~thr-s ~(if virtual-threads-available?\n                     `(if ~tvirt\n                        (.. (Thread/ofVirtual)\n                            (name ~tname)\n                            (unstarted ~run-s))\n                        (.. (Thread/ofPlatform)\n                            (name ~tname)\n                            (priority (int ~tprio))\n                            (daemon (boolean ~tdaem))\n                            (unstarted ~run-s)))\n                     `(doto (Thread. ~run-s)\n                        (.setName ~tname)\n                        (.setPriority (int ~tprio))\n                        (.setDaemon (boolean ~tdaem))))]\n       (.start ~thr-s)\n       ~thr-s))))\n\n#?(:clj\n(defn current-thread\n  \"Return the current thread.\"\n  []\n  (Thread/currentThread)))\n\n#?(:clj\n(defn interrupted?\n  \"Check if the thread has the interrupted flag set.\n\n  There are two special cases:\n\n  Using the `:current` keyword as argument will check the interrupted\n  flag on the current thread.\n\n  Using the arity 0 (passing no arguments), then the current thread\n  will be checked and **WARNING** the interrupted flag reset to\n  `false`.\"\n  ([]\n   (Thread/interrupted))\n  ([thread]\n   (if (= :current thread)\n     (.isInterrupted (Thread/currentThread))\n     (.isInterrupted ^Thread thread)))))\n\n#?(:clj\n(defn thread-id\n  \"Retrieves the thread ID.\"\n  ([]\n   (.getId ^Thread (Thread/currentThread)))\n  ([^Thread thread]\n   (.getId thread))))\n\n#?(:clj\n(defn interrupt!\n  \"Interrupt a thread.\"\n  ([]\n   (.interrupt (Thread/currentThread)))\n  ([^Thread thread]\n   (.interrupt thread))))\n\n#?(:clj\n(defn thread?\n  \"Check if provided object is a thread instance.\"\n  [t]\n  (instance? Thread t)))\n\n#?(:clj\n(defn sleep\n  \"Turn the current thread to sleep accept a number of milliseconds or\n  Duration instance.\"\n  [ms]\n  (if (instance? Duration ms)\n    (Thread/sleep (int (.toMillis ^Duration ms)))\n    (Thread/sleep (int ms)))))\n","~:reader-features",["^I",["~:cljs"]],"~:used-var-namespaces",["^I",["^T","^F","~$js","^V","^N"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["promesa.exec/*default-scheduler*","promesa.exec/*default-executor*","promesa.exec/virtual-threads-available?","promesa.exec/vthread-supported?","promesa.exec/noop","cljs.core/constantly","js/promesa","js/promesa.exec","js/promesa.exec.default-scheduler","promesa.exec/default-scheduler","cljs.core/Delay","promesa.exec/scheduled-executor","js/promesa.exec.default-executor","promesa.exec/default-executor","promesa.exec/microtask-executor","promesa.exec/default-current-thread-executor","promesa.exec/current-thread-executor","js/promesa.exec.default-thread-executor","promesa.exec/default-thread-executor","js/promesa.exec.default-vthread-executor","promesa.exec/default-vthread-executor","promesa.exec/executor?","o","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","promesa.protocols/IExecutor","var_args","G__18432","promesa.exec/resolve-executor","js/Error","promesa.exec.resolve_executor","executor","cljs.core/deref","cljs.core._EQ_","G__18435","cljs.core/Keyword","promesa.util/maybe-deref","G__18439","promesa.exec/resolve-scheduler","promesa.exec.resolve_scheduler","scheduler","promesa.exec/wrap-bindings","f","G__18445","promesa.exec/run!","promesa.protocols/-run!","G__18449","promesa.exec/submit!","promesa.protocols/-submit!","G__18453","promesa.exec/schedule!","ms","promesa.protocols/-schedule!","promesa.exec/t_promesa$exec18466","this","e18485","promesa.protocols/-promise","cljs.core.comp","cause","e18489","promesa.exec/t_promesa$exec18490","promesa.protocols/-map","_","e18495","this__5287__auto__","writer__5288__auto__","opt__5289__auto__","cljs.core/-write","promesa.exec/Scheduler","promesa.exec/->Scheduler","done","cljs.core/volatile!","task","cljs.core/vreset!","tid","js/setTimeout","cancel","js/clearTimeout","G__18498","promesa.exec/->ScheduledTask","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","p__18500","map__18501","cljs.core/--destructure-map","cljs.core.get","seq18499","self__5712__auto__","cljs.core/seq","parallelism","factory","promesa.exec/ScheduledTask","state","done-iref","promesa.exec.goog$module$goog$object.get","self","cancel-fn","promesa.exec.goog$module$goog$object.set"]],"~:used-vars",["^I",["~$cljs.core/--destructure-map","~$cljs.core/PROTOCOL_SENTINEL","~$cljs.core/comp","~$promesa.exec/default-current-thread-executor","~$js/promesa.exec.default-vthread-executor","~$promesa.protocols/-map","~$promesa.exec/scheduled-executor","~$cljs.core/=","~$promesa.exec/resolve-executor","~$cljs.core/-write","~$cljs.core/IndexedSeq","~$promesa.exec/wrap-bindings","~$promesa.exec/*default-executor*","~$promesa.protocols/-schedule!","~$cljs.core/deref","~$cljs.core/seq","~$promesa.exec.goog$module$goog$object.set","~$cljs.core/Keyword","~$promesa.protocols/-run!","~$cljs.core/vreset!","~$promesa.exec/vthread-supported?","~$cljs.core/Delay","~$promesa.protocols/-promise","~$promesa.exec/submit!","~$js/setTimeout","~$promesa.exec/default-vthread-executor","~$cljs.core/native-satisfies?","~$promesa.protocols/IExecutor","~$promesa.exec/->t_promesa$exec18466","~$promesa.exec/->Scheduler","~$promesa.protocols/-submit!","~$promesa.exec/default-executor","~$js/promesa.exec.default-executor","~$promesa.protocols/-cancelled?","~$cljs.core/volatile!","~$promesa.exec.goog$module$goog$object.get","~$promesa.exec/microtask-executor","~$promesa.exec/executor?","~$promesa.util/maybe-deref","~$cljs.core/get","~$cljs.core/constantly","~$promesa.exec/*default-scheduler*","~$promesa.exec/->ScheduledTask","~$promesa.exec/t_promesa$exec18466","~$js/promesa.exec.default-thread-executor","~$promesa.exec/ScheduledTask","~$promesa.exec/->t_promesa$exec18490","~$js/promesa.exec","~$js/promesa","~$promesa.exec/default-scheduler","~$cljs.core/not","~$promesa.exec/noop","~$promesa.exec/virtual-threads-available?","~$js/clearTimeout","~$promesa.exec/Scheduler","~$promesa.exec/t_promesa$exec18490","~$promesa.exec/default-thread-executor","~$promesa.exec/schedule!","~$js/Error","~$js/promesa.exec.default-scheduler","~$promesa.exec/current-thread-executor","~$promesa.exec/resolve-scheduler","~$promesa.exec/run!"]]],"~:cache-keys",["~#cmap",[["^1=","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^Z","~$goog.dom.HtmlElement"]]],["^1=","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z"]]],["^1=","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.asserts","~$goog.string.internal","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1=","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^3;","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^3<"]]],["^1=","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^3;"]]],["^1=","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z"]]],["^1=","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z"]]],["^1=","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z"]]],["^1=","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^39","^3<"]]],["^1=","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z"]]],["^1=","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z"]]],["^1=","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^3;"]]],"~:SHADOW-TIMESTAMP",[1733506754000,1733506754000,1715719162000],["^1=","promesa/util.cljc"],["a4fe657acbb7c1b0539820874bab2fa0b59bb229","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^F","^T"]]],["^1=","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^3;","~$goog.reflect"]]],["^1=","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^3;","~$goog.fs.blob","^3?","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3A","^3B"]]],["^1=","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z"]]],["^1=","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z"]]],["^1=","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^3A","~$goog.html.SafeUrl","^3B","^3;","^3<"]]],["^1=","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^3;","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3F","~$goog.html.SafeStyle","^3H","^3@","~$goog.html.uncheckedconversions","^3A","^3<"]]],["^1=","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","~$goog.dom.TagName","^3;","~$goog.dom.element"]]],["^1=","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^3A","^3F","^3M","~$goog.html.SafeStyleSheet","^3H","^3O","^3@","^3B","^3;","~$goog.labs.userAgent.browser","~$goog.array","^X","^3<","~$goog.dom.tags","^3G"]]],["^1=","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^X"]]],["^1=","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z"]]],["^1=","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1=","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^3S","^3;","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1=","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^3:"]]],["^1=","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z"]]],["^1=","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z"]]],["^1=","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",[]]],["^1=","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^3S","^X"]]],["^1=","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","~$goog.dom.safe","^3N","^3A","^3<"]]],["^1=","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z"]]],["^1=","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^3<","^3>"]]],["^1=","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z"]]],["^1=","promesa/protocols.cljc"],["a4fe657acbb7c1b0539820874bab2fa0b59bb229","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^F"]]],["^1=","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","~$goog.flags"]]],["^1=","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^3V","^3O"]]],["^1=","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^3;","^3L","^3F","^3M","^3Q","^3H","^3@","^3A","^3<"]]],["^1=","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z"]]],["^1=","cljs/core.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","~$goog.math.Long","~$goog.math.Integer","^3X","^X","^3S","~$goog.Uri","~$goog.string.StringBuffer"]]],["^1=","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^3A","^3B","^3G","^3;"]]],["^1=","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^3A","^3M","^3B","^X","^3;","^3<"]]],["^1=","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^3D"]]],["^1=","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^3;","^3X"]]],["^1=","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^3;","^3B"]]],["^1=","promesa/exec.cljc"],["a4fe657acbb7c1b0539820874bab2fa0b59bb229","^34",["^ ","^35",null,"^36",["^I",[]],"^37",["^Z","^F","^T","^V","^X"]]]]],"~:clj-info",["^ ","jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes/and_or.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/compiler.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/util.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/tagged_literals.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/env.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl/namespaces.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/binaryage/devtools/0.9.7/devtools-0.9.7.jar!/devtools/defaults.clj",1725206106000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/instant.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/core.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/js_deps.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/data/json.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64_vlq.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/externs.clj",1715719162000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Executors & Schedulers facilities.","^7","promesa/exec.cljc","^8",7,"^9",5,"^:",7,"^;",17],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",["^J","^K","^L"]],"^M","^N","^O",["^ "],"^R",null,"^S",["^ ","^T","^T","^U","^T","^V","^V","^W","^V","^X","^X","^Y","^X","^F","^F","^Z","^Z"],"^[",["^I",["^10"]],"~:shadow/js-access-global",["^I",["clearTimeout","Error","setTimeout"]],"^11",null,"~:defs",["^ ","~$ScheduledTask",["^ ","~:num-fields",1,"~:protocols",["^I",["~$cljs.core/IPending","~$promesa.protocols/ICancellable"]],"^M","^2L","^7","promesa/exec.cljc","^;",26,"~:type",true,"^9",13,"^8",560,"~:record",false,"^:",560,"~:tag","~$function","~:skip-protocol-flag",["^I",["^50"]]],"~$default-scheduler",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",75,"^9",3,"^:",75,"^;",20,"^6","Default scheduled executor instance."],"^M","^2P","^7","promesa/exec.cljc","^;",20,"^9",1,"^8",73,"^:",75,"^54","^24","^6","Default scheduled executor instance."],"~$vthread-supported?",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",63,"^9",3,"^:",63,"^;",21,"~:deprecated",true,"^6","backward compatibility alias for `virtual-threads-available?`"],"^M","^23","^7","promesa/exec.cljc","^;",21,"^9",1,"^8",61,"^59",true,"^:",63,"^54","~$boolean","^6","backward compatibility alias for `virtual-threads-available?`"],"~$executor?",["^ ","~:protocol-inline",null,"^5",["^ ","^7","promesa/exec.cljc","^8",108,"^9",7,"^:",108,"^;",16,"~:arglists",["^14",["~$quote",["^14",[["~$o"]]]]],"^6","Returns true if `o` is an instane of Executor or satisfies IExecutor protocol."],"^M","^2D","^7","promesa/exec.cljc","^;",16,"~:method-params",["^14",[["~$o"]]],"~:protocol-impl",null,"~:arglists-meta",["^14",[null,null]],"^9",1,"~:variadic?",false,"^8",108,"~:ret-tag","^5:","^:",108,"~:max-fixed-arity",1,"~:fn-var",true,"^5=",["^14",["^5>",["^14",[["~$o"]]]]],"^6","Returns true if `o` is an instane of Executor or satisfies IExecutor protocol."],"~$*default-scheduler*",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",47,"^9",16,"^:",47,"^;",35,"~:dynamic",true],"^M","^2H","^7","promesa/exec.cljc","^;",35,"^9",1,"^5G",true,"^8",47,"^:",47,"^54","~$any"],"~$t_promesa$exec18490",["^ ","^4Z",1,"^4[",["^I",["^2:","~$cljs.core/IMeta","~$cljs.core/IWithMeta"]],"^M","^2V","^7","promesa/exec.cljc","^52",true,"~:anonymous",true,"^9",null,"^8",null,"^53",false,"^54","^55","^56",["^I",["^5J","^5K"]]],"~$t_promesa$exec18466",["^ ","^4Z",1,"^4[",["^I",["^2:","^5J","^5K"]],"^M","^2J","^7","promesa/exec.cljc","^52",true,"^5L",true,"^9",null,"^8",null,"^53",false,"^54","^55","^56",["^I",["^5J","^5K"]]],"~$schedule!",["^ ","^5<",null,"^5",["^ ","^7","promesa/exec.cljc","^8",223,"^9",7,"^:",223,"^;",16,"^5=",["^14",["^5>",["^14",[["~$ms","~$f"],["~$scheduler","^5O","~$f"]]]]],"^6","Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function.","~:top-fn",["^ ","^5B",false,"~:fixed-arity",3,"^5D",3,"^5?",[["^5O","~$f"],["^5P","^5O","~$f"]],"^5=",["^14",[["^5O","~$f"],["^5P","^5O","~$f"]]],"^5A",["^14",[null,null]]]],"^M","^2X","^7","promesa/exec.cljc","^;",16,"^5Q",["^ ","^5B",false,"^5R",3,"^5D",3,"^5?",[["^5O","~$f"],["^5P","^5O","~$f"]],"^5=",["^14",[["^5O","~$f"],["^5P","^5O","~$f"]]],"^5A",["^14",[null,null]]],"^5?",[["^5O","~$f"],["^5P","^5O","~$f"]],"^5@",null,"^5R",3,"^5A",["^14",[null,null]],"^9",1,"^5B",false,"~:methods",[["^ ","^5R",2,"^5B",false,"^54","^5H"],["^ ","^5R",3,"^5B",false,"^54","^5H"]],"^8",223,"^:",223,"^5D",3,"^5E",true,"^5=",["^14",[["^5O","~$f"],["^5P","^5O","~$f"]]],"^6","Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function."],"~$->t_promesa$exec18490",["^ ","^5<",null,"^5",["^ ","^5L",true,"^4[",["^I",["^2:","^5J","^5K"]],"^56",["^I",["^5J","^5K"]],"~:factory","~:positional","^5=",["^14",["^5>",["^14",[["~$meta18491"]]]]],"^6","Positional factory function for promesa.exec/t_promesa$exec18490.","^7",null],"^4[",["^I",["^2:","^5J","^5K"]],"^M","^2M","^7","promesa/exec.cljc","^5?",["^14",[["^5W"]]],"^5@",null,"^5A",["^14",[null,null]],"^5L",true,"^9",null,"^5B",false,"^5U","^5V","^8",null,"^5C","^2V","^5D",1,"^5E",true,"^5=",["^14",["^5>",["^14",[["^5W"]]]]],"^56",["^I",["^5J","^5K"]],"^6","Positional factory function for promesa.exec/t_promesa$exec18490."],"~$microtask-executor",["^ ","^5<",null,"^5",["^ ","^7","promesa/exec.cljc","^8",428,"^9",10,"^:",428,"^;",28,"^5=",["^14",["^5>",["^14",[[]]]]],"^6","An IExecutor that schedules tasks to be executed in the MicrotasksQueue."],"^M","^2C","^7","promesa/exec.cljc","^;",28,"^5?",["^14",[[]]],"^5@",null,"^5A",["^14",[null,null]],"^9",4,"^5B",false,"^8",428,"^5C","^2V","^:",428,"^5D",0,"^5E",true,"^5=",["^14",["^5>",["^14",[[]]]]],"^6","An IExecutor that schedules tasks to be executed in the MicrotasksQueue."],"~$virtual-threads-available?",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",50,"^9",6,"^:",50,"^;",32],"^M","^2S","^7","promesa/exec.cljc","^;",32,"^9",1,"^8",50,"^:",50,"^54","^5:","^6","Var that indicates the availability of virtual threads."],"~$noop",["^ ","~:no-doc",true,"^5",["^ ","^7","promesa/exec.cljc","^8",66,"^9",22,"^:",66,"^;",26,"^5[",true],"^M","^2R","^7","promesa/exec.cljc","^;",26,"^9",1,"^8",66,"^:",66,"^54","^55"],"~$scheduled-executor",["^ ","^5<",null,"^5",["^ ","^7","promesa/exec.cljc","^8",458,"^9",7,"^:",458,"^;",25,"^5=",["^14",["^5>",["^14",[["~$&",["^ ","~:keys",["~$parallelism","~$factory"],"~:or",["^ ","^62",1]]]]]]],"^6","A scheduled thread pool constructor. A ScheduledExecutor (IScheduler\n  in CLJS) instance allows execute asynchronous tasks some time later.","^5Q",["^ ","^5B",true,"^5R",0,"^5D",0,"^5?",[["^14",[["^ ","^61",["^62","^63"],"^64",["^ ","^62",1]]]]],"^5=",["^14",[["~$&",["^ ","^61",["^62","^63"],"^64",["^ ","^62",1]]]]],"^5A",["^14",[null]]]],"^M","^1Q","^7","promesa/exec.cljc","^;",25,"^5Q",["^ ","^5B",true,"^5R",0,"^5D",0,"^5?",[["^14",[["^ ","^61",["^62","^63"],"^64",["^ ","^62",1]]]]],"^5=",["^14",[["~$&",["^ ","^61",["^62","^63"],"^64",["^ ","^62",1]]]]],"^5A",["^14",[null]]],"^5?",[["^14",[["^ ","^61",["^62","^63"],"^64",["^ ","^62",1]]]]],"^5@",null,"^5R",0,"^5A",["^14",[null]],"^9",1,"^5B",true,"^5S",[["^ ","^5R",0,"^5B",true,"^54","^2U"]],"^8",458,"^5C","^5H","^:",458,"^5D",0,"^5E",true,"^5=",["^14",[["~$&",["^ ","^61",["^62","^63"],"^64",["^ ","^62",1]]]]],"^6","A scheduled thread pool constructor. A ScheduledExecutor (IScheduler\n  in CLJS) instance allows execute asynchronous tasks some time later."],"~$default-thread-executor",["^ ","^5[",true,"^5",["^ ","^7","promesa/exec.cljc","^8",95,"^9",3,"^:",95,"^;",26,"^6","A global, thread per task executor service.","^5[",true],"^M","^2W","^7","promesa/exec.cljc","^;",26,"^9",1,"^8",92,"^:",95,"^54","^24","^6","A global, thread per task executor service."],"~$resolve-executor",["^ ","^5[",true,"^5<",null,"^5",["^ ","^7","promesa/exec.cljc","^8",133,"^9",7,"^:",133,"^;",23,"^5=",["^14",["^5>",["^14",[[],["~$executor"]]]]],"^5[",true,"^5Q",["^ ","^5B",false,"^5R",1,"^5D",1,"^5?",[[],["^67"]],"^5=",["^14",[[],["^67"]]],"^5A",["^14",[null,null]]]],"^M","^1S","^7","promesa/exec.cljc","^;",23,"^5Q",["^ ","^5B",false,"^5R",1,"^5D",1,"^5?",[[],["^67"]],"^5=",["^14",[[],["^67"]]],"^5A",["^14",[null,null]]],"^5?",[[],["^67"]],"^5@",null,"^5R",1,"^5A",["^14",[null,null]],"^9",1,"^5B",false,"^5S",[["^ ","^5R",0,"^5B",false,"^54","^5H"],["^ ","^5R",1,"^5B",false,"^54",["^I",[null,"^5H"]]]],"^8",133,"^:",133,"^5D",1,"^5E",true,"^5=",["^14",[[],["^67"]]]],"~$current-thread-executor",["^ ","^5<",null,"^5",["^ ","^7","promesa/exec.cljc","^8",395,"^9",7,"^:",395,"^;",30,"^5=",["^14",["^5>",["^14",[[]]]]],"^6","Creates an executor instance that run tasks in the same thread."],"^M","^2[","^7","promesa/exec.cljc","^;",30,"^5?",["^14",[[]]],"^5@",null,"^5A",["^14",[null,null]],"^9",1,"^5B",false,"^8",395,"^5C","^2J","^:",395,"^5D",0,"^5E",true,"^5=",["^14",["^5>",["^14",[[]]]]],"^6","Creates an executor instance that run tasks in the same thread."],"~$wrap-bindings",["^ ","^5[",true,"^5<",null,"^5",["^ ","^7","promesa/exec.cljc","^8",153,"^9",7,"^:",153,"^;",20,"^5=",["^14",["^5>",["^14",[["~$f"]]]]],"^5[",true],"^M","^1V","^7","promesa/exec.cljc","^;",20,"^5?",["^14",[["~$f"]]],"^5@",null,"^5A",["^14",[null,null]],"^9",1,"^5B",false,"^8",153,"^:",153,"^5D",1,"^5E",true,"^5=",["^14",["^5>",["^14",[["~$f"]]]]]],"~$resolve-scheduler",["^ ","^5[",true,"^5<",null,"^5",["^ ","^7","promesa/exec.cljc","^8",145,"^9",7,"^:",145,"^;",24,"^5=",["^14",["^5>",["^14",[[],["^5P"]]]]],"^5[",true,"^5Q",["^ ","^5B",false,"^5R",1,"^5D",1,"^5?",[[],["^5P"]],"^5=",["^14",[[],["^5P"]]],"^5A",["^14",[null,null]]]],"^M","^30","^7","promesa/exec.cljc","^;",24,"^5Q",["^ ","^5B",false,"^5R",1,"^5D",1,"^5?",[[],["^5P"]],"^5=",["^14",[[],["^5P"]]],"^5A",["^14",[null,null]]],"^5?",[[],["^5P"]],"^5@",null,"^5R",1,"^5A",["^14",[null,null]],"^9",1,"^5B",false,"^5S",[["^ ","^5R",0,"^5B",false,"^54","^5H"],["^ ","^5R",1,"^5B",false,"^54",["^I",[null,"^5H"]]]],"^8",145,"^:",145,"^5D",1,"^5E",true,"^5=",["^14",[[],["^5P"]]]],"~$default-executor",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",82,"^9",3,"^:",82,"^;",19,"^6","Default executor instance, ForkJoinPool/commonPool in JVM, MicrotaskExecutor on JS."],"^M","^2>","^7","promesa/exec.cljc","^;",19,"^9",1,"^8",80,"^:",82,"^54","^24","^6","Default executor instance, ForkJoinPool/commonPool in JVM, MicrotaskExecutor on JS."],"^L",["^ ","^5<",null,"^5",["^ ","^7","promesa/exec.cljc","^8",205,"^9",7,"^:",205,"^;",11,"^5=",["^14",["^5>",["^14",[["~$f"],["^67","~$f"]]]]],"^6","Run the task in the provided executor.","^5Q",["^ ","^5B",false,"^5R",2,"^5D",2,"^5?",[["~$f"],["^67","~$f"]],"^5=",["^14",[["~$f"],["^67","~$f"]]],"^5A",["^14",[null,null]]]],"^M","^31","^7","promesa/exec.cljc","^;",11,"^5Q",["^ ","^5B",false,"^5R",2,"^5D",2,"^5?",[["~$f"],["^67","~$f"]],"^5=",["^14",[["~$f"],["^67","~$f"]]],"^5A",["^14",[null,null]]],"^5?",[["~$f"],["^67","~$f"]],"^5@",null,"^5R",2,"^5A",["^14",[null,null]],"^9",1,"^5B",false,"^5S",[["^ ","^5R",1,"^5B",false,"^54","^5H"],["^ ","^5R",2,"^5B",false,"^54","^5H"]],"^8",205,"^:",205,"^5D",2,"^5E",true,"^5=",["^14",[["~$f"],["^67","~$f"]]],"^6","Run the task in the provided executor."],"~$default-current-thread-executor",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",89,"^9",3,"^:",89,"^;",34,"^6","Default Executor instance that runs the task in the same thread."],"^M","^1N","^7","promesa/exec.cljc","^;",34,"^9",1,"^8",88,"^:",89,"^54","^24","^6","Default Executor instance that runs the task in the same thread."],"~$Scheduler",["^ ","^4Z",0,"^4[",["^I",["~$promesa.protocols/IScheduler"]],"^M","^2U","^7","promesa/exec.cljc","^;",22,"^52",true,"^9",13,"^8",444,"^53",false,"^:",444,"^54","^55","^56",null],"~$default-vthread-executor",["^ ","^5[",true,"^5",["^ ","^7","promesa/exec.cljc","^8",102,"^9",3,"^:",102,"^;",27,"^6","A global, virtual thread per task executor service.","^5[",true],"^M","^28","^7","promesa/exec.cljc","^;",27,"^9",1,"^8",99,"^:",102,"^54","^24","^6","A global, virtual thread per task executor service."],"~$->t_promesa$exec18466",["^ ","^5<",null,"^5",["^ ","^5L",true,"^4[",["^I",["^2:","^5J","^5K"]],"^56",["^I",["^5J","^5K"]],"^5U","^5V","^5=",["^14",["^5>",["^14",[["~$meta18467"]]]]],"^6","Positional factory function for promesa.exec/t_promesa$exec18466.","^7",null],"^4[",["^I",["^2:","^5J","^5K"]],"^M","^2;","^7","promesa/exec.cljc","^5?",["^14",[["^6A"]]],"^5@",null,"^5A",["^14",[null,null]],"^5L",true,"^9",null,"^5B",false,"^5U","^5V","^8",null,"^5C","^2J","^5D",1,"^5E",true,"^5=",["^14",["^5>",["^14",[["^6A"]]]]],"^56",["^I",["^5J","^5K"]],"^6","Positional factory function for promesa.exec/t_promesa$exec18466."],"~$*default-executor*",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",48,"^9",16,"^:",48,"^;",34,"^5G",true],"^M","^1W","^7","promesa/exec.cljc","^;",34,"^9",1,"^5G",true,"^8",48,"^:",48,"^54","^5H"],"~$->Scheduler",["^ ","^5<",null,"^5",["^ ","^4[",["^I",["^6>"]],"^7","promesa/exec.cljc","^;",22,"^9",13,"^5U","^5V","^8",444,"^:",444,"^5=",["^14",["^5>",["^14",[[]]]]],"^56",null,"^6","Positional factory function for promesa.exec/Scheduler."],"^4[",["^I",["^6>"]],"^M","^2<","^7","promesa/exec.cljc","^;",22,"^5?",["^14",[[]]],"^5@",null,"^5A",["^14",[null,null]],"^9",4,"^5B",false,"^5U","^5V","^8",444,"^5C","^2U","^:",444,"^5D",0,"^5E",true,"^5=",["^14",["^5>",["^14",[[]]]]],"^56",null,"^6","Positional factory function for promesa.exec/Scheduler."],"~$submit!",["^ ","^5<",null,"^5",["^ ","^7","promesa/exec.cljc","^8",212,"^9",7,"^:",212,"^;",14,"^5=",["^14",["^5>",["^14",[["~$f"],["^67","~$f"]]]]],"^6","Submit a task to be executed in a provided executor\n  and return a promise that will be completed with\n  the return value of a task.\n\n  A task is a plain clojure function.","^5Q",["^ ","^5B",false,"^5R",2,"^5D",2,"^5?",[["~$f"],["^67","~$f"]],"^5=",["^14",[["~$f"],["^67","~$f"]]],"^5A",["^14",[null,null]]]],"^M","^26","^7","promesa/exec.cljc","^;",14,"^5Q",["^ ","^5B",false,"^5R",2,"^5D",2,"^5?",[["~$f"],["^67","~$f"]],"^5=",["^14",[["~$f"],["^67","~$f"]]],"^5A",["^14",[null,null]]],"^5?",[["~$f"],["^67","~$f"]],"^5@",null,"^5R",2,"^5A",["^14",[null,null]],"^9",1,"^5B",false,"^5S",[["^ ","^5R",1,"^5B",false,"^54","^5H"],["^ ","^5R",2,"^5B",false,"^54","^5H"]],"^8",212,"^:",212,"^5D",2,"^5E",true,"^5=",["^14",[["~$f"],["^67","~$f"]]],"^6","Submit a task to be executed in a provided executor\n  and return a promise that will be completed with\n  the return value of a task.\n\n  A task is a plain clojure function."],"~$->ScheduledTask",["^ ","^5<",null,"^5",["^ ","^4[",["^I",["^50","^51"]],"^7","promesa/exec.cljc","^;",26,"^9",13,"^5U","^5V","^8",560,"^:",560,"^5=",["^14",["^5>",["^14",[["~$state"]]]]],"^56",["^I",["^50"]],"^6","Positional factory function for promesa.exec/ScheduledTask."],"^4[",["^I",["^50","^51"]],"^M","^2I","^7","promesa/exec.cljc","^;",26,"^5?",["^14",[["^6F"]]],"^5@",null,"^5A",["^14",[null,null]],"^9",4,"^5B",false,"^5U","^5V","^8",560,"^5C","^2L","^:",560,"^5D",1,"^5E",true,"^5=",["^14",["^5>",["^14",[["^6F"]]]]],"^56",["^I",["^50"]],"^6","Positional factory function for promesa.exec/ScheduledTask."]],"^12",["^ ","^F","^F"],"~:cljs.analyzer/constants",["^ ","^[",["^I",["~:parallelism","^6A","~:default","^5W","^5U","^6F"]],"~:order",["^6I","^6A","^5W","^6H","^5U","^6F"]],"^19",["^ ","^10",["^I",[]]],"^1:",[],"^1;",["^Z","^F","^T","^V","^X"]],"^Q","^N","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^33",[["^6M","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^6M","~:shadow-tweaks"],null,["^6M","~:source-map-inline"],null,["^6M","~:shadow-optimize-constants"],null,["^6M","~:elide-asserts"],false,["^6M","~:optimize-constants"],null,["^6M","^1@"],null,["^6M","~:external-config"],null,["^6M","~:tooling-config"],null,["^6M","~:emit-constants"],null,["^6M","~:load-tests"],null,["^6M","~:form-size-threshold"],null,["^6M","~:global-goog-object&array"],null,["^6M","~:data-readers"],null,["^6M","~:infer-externs"],"~:auto",["^6M","^1B"],null,["^6O","~:js-provider"],"^10",["~:mode"],"~:dev",["^6M","~:fn-invoke-direct"],null,["^6M","~:source-map"],"/dev/null"]]]