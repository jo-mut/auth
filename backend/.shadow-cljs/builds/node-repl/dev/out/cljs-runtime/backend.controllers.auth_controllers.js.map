{"version":3,"sources":["backend/controllers/auth_controllers.cljs"],"mappings":";AAQA,+CAAA,/CAAMA,sGAASC;AAAf,AACE,QAAMC,YAAeD;;AAEvB,sDAAA,tDAAME;AAAN,AACE,gEAAS,AAACC,DACD,iBAAA,lBACA,8BAAA,zCACA,AAACC;;AAEZ,sEAAA,tEAAMC,oJACHC,IAAIC,QAAQC;AADf,AAEE,cAAA,eAAA,zBAAMC;IACAC,QAAM,AAAOC,wCAAI,qBAAA,2CAAA,hEAACC,2HAAkBL,iBAAUC,OAAOC;AAD3D,AAEM,WAAA,aAAA,cAAA,gBAAA,mBAAA,zEAASH,kBAAWI,2EAGqB,CAAA,CAAA,CAAA,CAAA,MAAA,QAAA,QAAA,QAAA;;AAC7CA;;AAEJ,kDAAA,lDAAMG,4GACHC,MAAMC;AADT,AAEE,uDAAA,hDAACC,0EAAyDD;;AAE5D,sDAAA,kEAAAE,xHAAMI,oHACHf;AADH,AAAA,IAAAY,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEACeJ;eADf,AAAAM,4CAAAF,eAAA,tEACqBI;WADrB,AAAAF,4CAAAF,eAAA,lEAC8BK;AAD9B,AAEE,IAAMC,mBAAmB,CAAG,CAAA,CAAA,CAAA,OAAA,QAAA,QAAA,UAAkB,AAAMC;IAC9CV,qBAAmB,AAACb;AAD1B,OAEM,6CAAA,7CAACwB,oCAAcJ,pCACf,wDAAO,WAAKK,1EAeZ;AAfO,AACE,IAAMC,OAAK,KAAAC,gCAAA,WAA+Cf,mBACAa,yBACAJ,oCACAC,uCACAT;AAJ1D,AAMG,OAAAe,wBAAA,AAAAC,2BAAA,MAAA,WAAAC;AAAA,AAAA,OAAAF,wBAAA,AAAAC,wCAAA,WAAQG,xBAAW,AAAON;AAA1B,AAAA,OAAAE,wBAAA,AAAAC,yDAAA,WAAAE,zCACE,uBAAA,tBAAM,AAAYC;AADpB,AAAA,OAAAJ,wBAAA,AAAAC,iQAAA,WAAAE,jPAEE,yNAAA,zNAAC5B,oEAA+BC,IAAI,AAAA,iFAAM,AAAC6B,mDAAQD;AAFrD,AAAA,OAAAH,2BAGMzB,AACA,WAAA,XACA,uBAAA,aAAA,iBAAA,qCAEqB,AAAC6B,mDAAQD;;;;;UACxC,WAAKE;AAAL,OACM9B,AACA,WAAA,lBACA,8BAAA,aAAA,kBAAA,mCAEqB,AAAW8B;;;AAGtD,+CAAA,/CAAMC;AAAN,AACE,kBAAKC,IAAIhC;AAAT,AACE,IAAMkC,OAAK,qHAAA,2EAAA,hMAACL,0DAAQ,AAAQG;IAA5BC,aACoCC;IADpCD,iBAAA,AAAApB,4BAAAoB;YAAA,AAAAnB,4CAAAmB,eAAA,nEACczB;eADd,AAAAM,4CAAAmB,eAAA,tEACoBjB;WADpB,AAAAF,4CAAAmB,eAAA,lEAC6BhB;AAD7B,AAEE,AAACkB,yGAAQnC;;AACT,OAAAwB,wBAAA,AAAAC,2BAAA,MAAA,WAAAC;AAAA,AAAA,OAAAF,wBAAA,AAAAC,4IAAA,WAAQW,zEAAgB,wCAAA,xCAAUb,mDAAwBf,tGAAQ,AAAC6B;AAAnE,AAAA,OAAAZ,2BACE,kBAAIW,mBACF,AACMpC,AACA,WAAA,XACA,uBAAA,aAAA,kBAAA,yBAEN,iBAAA,AAGE,+DAAA,2CAAA,6DAAA,qEAAA,rOAACe,oDAAef,sGAAeQ,kEACAQ,8DACAC;gBALjC,QAAAqB,JAMkBC;AANlB,OAOQvC,AACA,WAAA,lBACA,8BAAA,aAAA,kBACqB,AAAWuC;;;;;;AAIlD,6CAAA,7CAAMC;AAAN,AACE,kBAAKR,IAAKhC;AAAV,OACMA,PAAI,gBAAA;;;AAEZ,8CAAA,9CAAMyC;AAAN,AACE,kBAAKT,IAAKhC;AAAV,OACMA,PAAI,gBAAA","names":["backend.controllers.auth-controllers/get-env","key","js/process.env","backend.controllers.auth-controllers/generate-token","js/Math.random","js/Math.floor","backend.controllers.auth-controllers/generate-token-and-set-cookies","res","user-id","secret","options","token","js/shadow.js.shim.module$jsonwebtoken","cljs.core/clj->js","backend.controllers.auth-controllers/send-email","email","verification-token","backend.mailtrap.emails/send-verification-email","p__12156","map__12157","cljs.core/--destructure-map","cljs.core.get","backend.controllers.auth-controllers/handle-sign-up","password","name","token-expires-at","js/Date","js/shadow.js.shim.module$bcryptjs.hash","hashed-password","user","backend.models.user-models/user","promesa.protocols/-bind","promesa.protocols/-promise","___11991__auto__","___11959__auto__","saved-user","cljs.core.js__GT_clj","err","backend.controllers.auth-controllers/sign-up","req","map__12158","body","cljs.core.println","user-exist?","promesa.core.promise","e12159","e","backend.controllers.auth-controllers/login","backend.controllers.auth-controllers/logout"],"sourcesContent":["(ns backend.controllers.auth-controllers\n  (:require\n   [\"bcryptjs\" :as bcryptjs]\n   [\"jsonwebtoken\" :as jwt]\n   [promesa.core :as p]\n   [backend.models.user-models :as models]\n   [backend.mailtrap.emails :as emails]))\n\n(defn get-env [key]\n  (aget js/process.env key))\n\n(defn generate-token []\n  (str (-> (js/Math.random)\n           (* 900000)\n           (+ 100000)\n           (js/Math.floor))))\n\n(defn generate-token-and-set-cookies\n  [res user-id secret]\n  (let [options #js {:expiresIn \"7d\"}\n        token (.sign jwt (clj->js {:user-id user-id}) secret options)]\n    (-> (.cookie res \"auth\" token #js {:httpOnly true\n                                       :secure   false\n                                       :sameSite \"strict\"\n                                       :maxAge   (* 7 24 60 60 1000)}))\n    token))\n\n(defn send-email\n  [email verification-token]\n  (emails/send-verification-email \"johnmutuku628@gmail.com\" verification-token))\n\n(defn handle-sign-up\n  [res {:keys [email password name]}]\n  (let [token-expires-at   (+ (* 24 60 60 1000) (.now js/Date))\n        verification-token (generate-token)]\n    (-> (bcryptjs/hash password 10)\n        (.then (fn [hashed-password]\n                 (let [user (models/user. #js {:email                      email\n                                               :password                   hashed-password\n                                               :name                       name\n                                               :verificationTokenExpiredAt token-expires-at\n                                               :verificationToken          verification-token})]\n                   (->\n                    (p/let [saved-user (.save user)]\n                      (set! (.-password saved-user) nil)\n                      (generate-token-and-set-cookies res (:_id (js->clj saved-user)) \"mysecret\")\n                      (-> res\n                          (.status 201)\n                          (.json #js {:success true\n                                      :message \"User created successfully\"\n                                      :user    (js->clj saved-user)})))))))\n        (.catch (fn [err]\n                  (-> res\n                      (.status 500)\n                      (.json #js {:success false\n                                  :message \"Error hashing password\"\n                                  :error   (.-message err)})))))))\n\n\n(defn sign-up []\n  (fn [req res]\n    (let [body (js->clj (.-body req) :keywordize-keys true)\n          {:keys [email password name]} body]\n      (println res)\n      (p/let [user-exist? (-> (.findOne models/user #js {:email email}) (p/promise))]\n        (if user-exist?\n          (do\n            (-> res\n                (.status 400)\n                (.json #js {:success false\n                            :message \"User already exists\"})))\n          (try\n            ;; (when-not (or email password name)\n            ;;   (throw (js/Error. \"All fields are required\")))\n            (handle-sign-up res {:email    email\n                                 :password password\n                                 :name     name})\n            (catch :default e\n              (-> res\n                  (.status 500)\n                  (.json #js {:success false\n                              :message (.-message e)})))))))))\n\n\n\n(defn login []\n  (fn [req, res]\n    (-> res (.send \"log in route\"))))\n\n(defn logout []\n  (fn [req, res]\n    (-> res (.send \"log out route\"))))"]}