{"version":3,"sources":["backend/controllers/auth_controllers.cljs"],"mappings":"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","names":["backend.controllers.auth-controllers/generate-token-and-set-cookies","res","user-id","secret","options","token","js/shadow.js.shim.module$jsonwebtoken","backend.controllers.auth-controllers/check-auth","req","backend.db.models.user-models/user","user","e","p__13735","map__13736","cljs.core/--destructure-map","cljs.core.get","backend.controllers.auth-controllers/handle-sign-up","email","password","name","token-expires-at","js/Date","verification-token","backend.utils.core/generate-code","js/shadow.js.shim.module$bcryptjs.hash","hashed-password","backend.mailtrap.emails/send-verification-email","backend.utils.core/get-env","cljs.core.js__GT_clj","err","backend.controllers.auth-controllers/sign-up","map__13737","body","backend.controllers.auth-controllers/isPasswordValid","js/shadow.js.shim.module$bcryptjs.compare","valid-password?","backend.controllers.auth-controllers/login","_","backend.controllers.auth-controllers/logout","backend.controllers.auth-controllers/verify-email","code","js/Date.now","backend.mailtrap.emails/send-welcome-email","backend.controllers.auth-controllers/forgot-password","js/shadow.js.shim.module$crypto","expire-at","reset-url","backend.mailtrap.emails/send-password-reset-email","backend.controllers.auth-controllers/reset-password","params","backend.mailtrap.emails/send-reset-password-success-email"],"sourcesContent":["(ns backend.controllers.auth-controllers\n  (:require\n   [\"bcryptjs\" :as bcryptjs]\n   [\"crypto\" :as crypto]\n   [\"jsonwebtoken\" :as jwt]\n   [backend.mailtrap.emails :as emails]\n   [backend.utils.core :as utils]\n   [backend.db.models.user-models :as models]))\n\n(defn generate-token-and-set-cookies\n  [res user-id]\n  (let [secret \"mysecret\"\n        options #js {:expiresIn \"7d\"}\n        token (.sign jwt #js {:user-id user-id} secret options)]\n    (-> (.cookie ^js res \"auth\" token #js {:httpOnly true\n                                           :secure   false\n                                           :sameSite \"strict\"\n                                           :maxAge   (* 7 24 60 60 1000)}))\n    token))\n\n(defn check-auth []\n  (fn [req res]\n    (->\n     (.findById models/user (.-userId ^js req))\n     (.then\n      (fn [user]\n        (if user\n          (do\n            (set! (.-password ^js user) nil)\n            (->\n             res\n             (.status 200)\n             (.json   {:success true\n                       :user    ^js user})))\n          (-> res\n              (.status 400)\n              (.json #js {:success false\n                          :message \"Invalid password\"})))))\n     (.catch\n      (fn [e]\n        (-> res\n            (.status 400)\n            (.json #js {:success false\n                        :message (.-message e)})))))))\n\n(defn handle-sign-up\n  [res {:keys [email password name]}]\n  (let [token-expires-at   (+ (* 24 60 60 1000) (.now js/Date))\n        verification-token (utils/generate-code)]\n    (-> (bcryptjs/hash password 10)\n        (.then\n         (fn [hashed-password]\n           (let [user (models/user. #js {:email                      email\n                                         :password                   hashed-password\n                                         :name                       name\n                                         :verificationTokenExpiredAt token-expires-at\n                                         :verificationToken          verification-token})]\n\n             (.save ^js user))))\n        (.then\n         (fn [user]\n           (set! (.-password user) nil)\n           (generate-token-and-set-cookies res (.-_id ^js user))\n           (emails/send-verification-email (utils/get-env \"EMAIL\") verification-token)\n           (-> res\n               (.status 201)\n               (.json #js {:success true\n                           :message \"User created successfully\"\n                           :user    (js->clj user)}))))\n        (.catch\n         (fn [err]\n           (-> res\n               (.status 500)\n               (.json #js {:success false\n                           :message \"Error saving user\"\n                           :error   (.-message err)})))))))\n\n\n(defn sign-up []\n  (fn [req res]\n    (let [body (js->clj (.-body req) :keywordize-keys true)\n          {:keys [email password name]} body]\n      (->\n       (.findOne models/user #js {:email email})\n       (.then\n        (fn [user]\n          (if user\n            (-> res\n                (.status 400)\n                (.json #js {:success false\n                            :message \"User already exists\"}))\n            (->\n             (handle-sign-up res {:email    email\n                                  :password password\n                                  :name     name})\n             (.catch\n              (fn [err]\n                (-> res\n                    (.status 500)\n                    (.json #js {:success false\n                                :message (.-message err)}))))))))\n       (.catch\n        (fn [err]\n          (-> res\n              (.status 500)\n              (.json #js {:success false\n                          :message (.-message err)}))))))))\n\n\n(defn isPasswordValid [res password user]\n  (->\n   (bcryptjs/compare password (.-password user))\n   (.then\n    (fn [valid-password?]\n      (when-not valid-password?\n        (-> res\n            (.status 400)\n            (.json #js {:success false\n                        :message \"Invalid password\"})))))))\n\n(defn login []\n  (fn [req res]\n    (let [body (.-body req)\n          email (.-email body)\n          password (.-password body)]\n      (->\n       (.findOne models/user #js {:email email})\n       (.then\n        (fn [user]\n          (when-not user\n            (->\n             res\n             (.status 400)\n             (.json #js {:subject false\n                         :message \"Invalid credentials\"})))\n\n          (isPasswordValid res password ^js user)\n          (generate-token-and-set-cookies res (.-_id ^js user))\n          (set! (.-lastLogin ^js user) (js/Date.))\n\n          (->\n           (.save user)\n           (.then\n            (fn [_]\n              (set! (.-password user) nil)\n              (-> res\n                  (.status 200)\n                  (.json #js {:success true\n                              :message \"Logged in successfully\"\n                              :user    ^js user})))))))\n\n       (.catch\n        (fn [e]\n          (-> res\n              (.status 200)\n              (.json #js {:success true\n                          :message (.-message e)}))))))))\n\n(defn logout []\n  (fn [req res]\n    (.clearCookie  ^js res \"token\")\n    (-> res\n        (.status 200)\n        (.json #js {:success true\n                    :message \"Logged out successfully\"}))))\n\n\n(defn verify-email []\n  (fn [req res]\n    (let [body (.-body req)\n          code (.-code body)]\n      (->\n       (.findOne models/user #js {:verificationToken code\n                                  :verificationTokenExpiredAt #js {:$gt (js/Date.now)}})\n       (.then\n        (fn [user]\n          (when-not ^js user\n            (-> res\n                (.status 400)\n                (.json #js {:subject false\n                            :message \"Invalid or expired verification code\"})))\n\n          (set! (.-isVerified ^js user) true)\n          (set! (.-verificationToken ^js user) nil)\n          (set! (.-verificationTokenExpiredAt ^js user) nil)\n\n          (->\n           (.save user)\n           (.then\n            (fn [_]\n              (emails/send-welcome-email (.-email ^js user) (.-name ^js user))\n              (set! (.-password user) nil)\n              (-> res\n                  (.status 200)\n                  (.json #js {:subject true\n                              :message \"Email verified successfully\"\n                              :user    user})))))))\n       (.catch\n        (fn [e]\n          (-> res\n              (.status 500)\n              (.json #js {:success false\n                          :message (.-message e)}))))))))\n\n\n\n\n(defn forgot-password []\n  (fn [req res]\n    (let [body (.-body req)\n          email (.-email body)\n          token (.toString (.randomBytes crypto 20) \"hex\")\n          expire-at (+ (* 1 60 60 1000) (.now js/Date))\n          reset-url (str (utils/get-env \"CLIENT_URL\") \"/reset-password/\" token)]\n      (->\n       (.findOne models/user #js {:email email})\n       (.then\n        (fn [user]\n          (when-not ^js user\n            (-> res\n                (.status 400)\n                (.json #js {:subject false\n                            :message \"User not found\"})))\n          (set! (.-resetPasswordToken ^js user) token)\n          (set! (.-resetPasswordExpiredAt ^js user) expire-at)\n\n          (->\n           (.save user)\n           (.then\n            (fn []\n              (emails/send-password-reset-email (.-email user) reset-url))))))\n       (.catch\n        (fn [e]\n          (-> res\n              (.status 400)\n              (.json #js {:success false\n                          :message (.-message e)}))))))))\n\n(defn reset-password []\n  (fn [req res]\n    (let [body  (.-body ^js req)\n          params (.-params ^js req)\n          token (.-token ^js params)\n          password (.-password ^js body)\n          hashed-password (bcryptjs/hash password 10)]\n\n      (->\n       (.findOne models/user #js {:resetPasswordToken         token\n                                  :resetPasswordExpiredAt #js {:$gt (js/Date.now)}})\n       (.then\n        (fn [user]\n          (when-not user\n            (-> res\n                (.status 400)\n                (.json #js {:subject false\n                            :message \"User not found\"})))\n\n          (set! (.-password ^js user) hashed-password)\n          (set! (.-resetPasswordToken ^js user) nil)\n          (set! (.-resetPasswordExpiredAt ^js user) nil)\n\n          (->\n           (.save user)\n           (.then\n            (fn []\n              (emails/send-reset-password-success-email (.-email user)))))))\n\n       (.catch\n        (fn [e]\n          (-> res\n              (.status 400)\n              (.json #js {:success false\n                          :message (.-message e)}))))))))"]}