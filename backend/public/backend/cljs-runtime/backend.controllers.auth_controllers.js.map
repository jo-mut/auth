{"version":3,"sources":["backend/controllers/auth_controllers.cljs"],"mappings":"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","names":["backend.controllers.auth-controllers/get-env","key","js/process.env","backend.controllers.auth-controllers/generate-token","js/Math.random","js/Math.floor","backend.controllers.auth-controllers/generate-token-and-set-cookies","res","user-id","secret","options","token","js/shadow.js.shim.module$jsonwebtoken","cljs.core/clj->js","backend.controllers.auth-controllers/send-email","email","verification-token","backend.mailtrap.emails/send-verification-email","p__12142","map__12143","cljs.core/--destructure-map","cljs.core.get","backend.controllers.auth-controllers/handle-sign-up","password","name","token-expires-at","js/Date","js/shadow.js.shim.module$bcryptjs.hash","hashed-password","user","backend.models.user-models/user","promesa.protocols/-bind","promesa.protocols/-promise","___11991__auto__","___11959__auto__","saved-user","js/console.log","cljs.core.js__GT_clj","promesa.core.catch$","err","backend.controllers.auth-controllers/sign-up","req","map__12144","body","cljs.core.println","user-exist?","promesa.core.promise","e12145","e","backend.controllers.auth-controllers/login","backend.controllers.auth-controllers/logout","backend.controllers.auth-controllers/verify-email","map__12146","code","js/Date.now","promesa.core.then","user-map","cljs.core.assoc","backend.mailtrap.emails/send-welcome-email","promesa.core/catch"],"sourcesContent":["(ns backend.controllers.auth-controllers\n  (:require\n   [\"bcryptjs\" :as bcryptjs]\n   [\"jsonwebtoken\" :as jwt]\n   [promesa.core :as p]\n   [backend.mailtrap.emails :as emails]\n   [backend.models.user-models :as models]))\n\n(defn get-env [key]\n  (aget js/process.env key))\n\n(defn generate-token []\n  (str (-> (js/Math.random)\n           (* 900000)\n           (+ 100000)\n           (js/Math.floor))))\n\n(defn generate-token-and-set-cookies\n  [res user-id secret]\n  (let [options #js {:expiresIn \"7d\"}\n        token (.sign jwt (clj->js {:user-id user-id}) secret options)]\n    (-> (.cookie res \"auth\" token #js {:httpOnly true\n                                       :secure   false\n                                       :sameSite \"strict\"\n                                       :maxAge   (* 7 24 60 60 1000)}))\n    token))\n\n(defn send-email\n  [email verification-token]\n  (emails/send-verification-email email verification-token))\n\n(defn handle-sign-up\n  [res {:keys [email password name]}]\n  (let [token-expires-at   (+ (* 24 60 60 1000) (.now js/Date))\n        verification-token (generate-token)]\n    (-> (bcryptjs/hash password 10)\n        (.then (fn [hashed-password]\n                 (let [user (models/user. #js {:email                      email\n                                               :password                   hashed-password\n                                               :name                       name\n                                               :verificationTokenExpiredAt token-expires-at\n                                               :verificationToken          verification-token})]\n                   (->\n                    (p/let [saved-user (.save user)]\n                      (js/console.log \"saved user: \" saved-user)\n                      (set! (.-password saved-user) nil)\n                      (generate-token-and-set-cookies res (:_id (js->clj saved-user)) \"mysecret\")\n                      (send-email \"johnmutuku628@gmail.com\" verification-token)\n                      (-> res\n                          (.status 201)\n                          (.json #js {:success true\n                                      :message \"User created successfully\"\n                                      :user    (js->clj saved-user)})))\n                    (p/catch (fn [err]\n                               (-> res\n                                   (.status 500)\n                                   (.json #js {:success false\n                                               :message \"Error saving user\"\n                                               :error   (.-message err)}))))))))\n        (.catch (fn [err]\n                  (-> res\n                      (.status 500)\n                      (.json #js {:success false\n                                  :message \"Error hashing password\"\n                                  :error   (.-message err)})))))))\n\n\n(defn sign-up []\n  (fn [req res]\n    (let [body (js->clj (.-body req) :keywordize-keys true)\n          {:keys [email password name]} body]\n      (println res)\n      (p/let [user-exist? (-> (.findOne models/user #js {:email email}) (p/promise))]\n        (if user-exist?\n          (do\n            (-> res\n                (.status 400)\n                (.json #js {:success false\n                            :message \"User already exists\"})))\n          (try\n            ;; (when-not (or email password name)\n            ;;   (throw (js/Error. \"All fields are required\")))\n            (handle-sign-up res {:email    email\n                                 :password password\n                                 :name     name})\n            (catch :default e\n              (-> res\n                  (.status 500)\n                  (.json #js {:success false\n                              :message (.-message e)})))))))))\n\n\n\n(defn login []\n  (fn [req res]\n    (-> res (.send \"log in route\"))))\n\n(defn logout []\n  (fn [req res]\n    (-> res (.send \"log out route\"))))\n\n(defn verify-email []\n  (fn [req res]\n    (let [{:keys [code]} (:body (js->clj req))]\n      (js/console.log \"code -===== \" req)\n      (->\n       (p/let [user (-> (.findOne models/user #js {:verificationToken \"497655\"\n                                                   :verificationTokenExpiredAt #js {:$gt (js/Date.now)}})\n                        (p/then (fn [user]\n                                 (let [user-map (js->clj user)]\n                                   user-map)))\n                        (p/catch (fn [e]\n                                  (js/console.log \"user not found \" e))))]\n\n         (when-not user\n           (-> res\n               (.status 400)\n               (.json #js {:subject false\n                           :message \"Invalid or expired verification code\"})))\n\n         (assoc user :isVerified true :verificationToken nil :verificationTokenExpiredAt nil)\n         (js/console.log \"user ===== \" user)\n\n        ;;  (set! (.-isVerified user) true)\n        ;;  (set! (.-verificationToken user) nil)\n        ;;  (set! (.-verificationTokenExpiredAt user) nil))\n\n         (->\n          (.save (clj->js user))\n          (.then (fn []\n                   (emails/send-welcome-email (:email user) (:name user))\n                   (js/console.log \"saved user \")))\n          (.catch (fn [e]\n                    (js/console.log \"Failed to save user\"))))\n\n         (-> res\n             (.status 200)\n             (.json #js {:subject true\n                         :message \"Email verified successfully\"\n                         :user   #js {}}))\n\n\n         (p/catch (fn [e]\n                    (-> res\n                        (.status 500)\n                        (.json #js {:success false\n                                    :message (.-message e)})))))))))"]}