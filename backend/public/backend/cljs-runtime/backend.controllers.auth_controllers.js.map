{"version":3,"sources":["backend/controllers/auth_controllers.cljs"],"mappings":"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","names":["backend.controllers.auth-controllers/generate-token-and-set-cookies","res","user-id","secret","options","token","js/shadow.js.shim.module$jsonwebtoken","cljs.core/clj->js","backend.controllers.auth-controllers/check-auth","req","promesa.protocols/-bind","promesa.protocols/-promise","___11854__auto__","___11822__auto__","user","backend.db.models.user-models/user","promesa.core.catch$","e","p__12276","map__12277","cljs.core/--destructure-map","cljs.core.get","backend.controllers.auth-controllers/handle-sign-up","email","password","name","token-expires-at","js/Date","verification-token","backend.utils.core/generate-code","js/shadow.js.shim.module$bcryptjs.hash","hashed-password","cljs.core.js__GT_clj","backend.mailtrap.emails/send-verification-email","backend.utils.core/get-env","err","backend.controllers.auth-controllers/sign-up","map__12278","body","user-exist?","e12279","backend.controllers.auth-controllers/isPasswordValid","js/shadow.js.shim.module$bcryptjs.compare","promesa.core.then","isPasswordValid","backend.controllers.auth-controllers/login","_","backend.controllers.auth-controllers/logout","backend.controllers.auth-controllers/verify-email","code","js/Date.now","backend.mailtrap.emails/send-welcome-email","backend.controllers.auth-controllers/forgot-password","js/shadow.js.shim.module$crypto","expire-at","reset-url","backend.mailtrap.emails/send-password-reset-email","backend.controllers.auth-controllers/reset-password","params","backend.mailtrap.emails/send-reset-password-success-email"],"sourcesContent":["(ns backend.controllers.auth-controllers\n  (:require\n   [\"bcryptjs\" :as bcryptjs]\n   [\"crypto\" :as crypto]\n   [\"jsonwebtoken\" :as jwt]\n   [promesa.core :as p]\n   [backend.mailtrap.emails :as emails]\n   [backend.utils.core :as utils]\n   [backend.db.models.user-models :as models]))\n\n(defn generate-token-and-set-cookies\n  [res user-id]\n  (let [secret \"mysecret\"\n        options #js {:expiresIn \"7d\"}\n        token (.sign jwt (clj->js {:user-id user-id}) secret options)]\n    (-> (.cookie ^js res \"auth\" token #js {:httpOnly true\n                                           :secure   false\n                                           :sameSite \"strict\"\n                                           :maxAge   (* 7 24 60 60 1000)}))\n    token))\n\n(defn check-auth []\n  (fn [req res]\n    (->\n     (p/let [user (.findById models/user (.-userId ^js req))]\n       (when-not user\n         (-> res\n             (.status 400)\n             (.json #js {:success false\n                         :message \"Invalid password\"})))\n\n       (set! (.-password ^js user) nil)\n\n       (-> res\n           (.status 200)\n           (.json   {:success true\n                     :user    ^js user})))\n     (p/catch\n      (fn [e]\n        (-> res\n            (.status 400)\n            (.json #js {:success false\n                        :message (.-message e)})))))))\n\n(defn handle-sign-up\n  [res {:keys [email password name]}]\n  (let [token-expires-at   (+ (* 24 60 60 1000) (.now js/Date))\n        verification-token (utils/generate-code)]\n    (-> (bcryptjs/hash password 10)\n        (.then\n         (fn [hashed-password]\n           (let [user (models/user. #js {:email                      email\n                                         :password                   hashed-password\n                                         :name                       name\n                                         :verificationTokenExpiredAt token-expires-at\n                                         :verificationToken          verification-token})]\n\n             (.save ^js user)\n             (.then\n              (fn []\n                (set! (.-password user) nil)\n                (generate-token-and-set-cookies res (:_id (js->clj user)))\n                (emails/send-verification-email (utils/get-env \"EMAIL\") verification-token)\n                (-> res\n                    (.status 201)\n                    (.json #js {:success true\n                                :message \"User created successfully\"\n                                :user    (js->clj user)}))))\n             (.catch\n              (fn [err]\n                (-> res\n                    (.status 500)\n                    (.json #js {:success false\n                                :message \"Error saving user\"\n                                :error   (.-message err)})))))))\n        (.catch\n         (fn [err]\n           (-> res\n               (.status 500)\n               (.json #js {:success false\n                           :message \"Error hashing password\"\n                           :error   (.-message err)})))))))\n\n\n(defn sign-up []\n  (fn [req res]\n    (let [body (js->clj (.-body req) :keywordize-keys true)\n          {:keys [email password name]} body]\n      (p/let [user-exist? (.findOne models/user #js {:email email})]\n        (if user-exist?\n          (-> res\n              (.status 400)\n              (.json #js {:success false\n                          :message \"User already exists\"}))\n          (try\n            ;; (when-not (or email password name)\n            ;;   (throw (js/Error. \"All fields are required\")))\n            (handle-sign-up res {:email    email\n                                 :password password\n                                 :name     name})\n            (catch :default e\n              (-> res\n                  (.status 500)\n                  (.json #js {:success false\n                              :message (.-message e)})))))))))\n\n\n(defn isPasswordValid [res password user]\n  (->\n   (bcryptjs/compare password (.-password user))\n   (p/then\n    (fn [isPasswordValid]\n      (when-not isPasswordValid\n        (-> res\n            (.status 400)\n            (.json #js {:success false\n                        :message \"Invalid password\"})))))))\n\n(defn login []\n  (fn [req res]\n    (let [body (.-body req)\n          email (.-email body)\n          password (.-password body)]\n      (->\n       (p/let [user (.findOne models/user #js {:email email})]\n         (if user\n           (do\n             (isPasswordValid res password ^js user)\n             (generate-token-and-set-cookies res (.-_id ^js user))\n             (set! (.-lastLogin ^js user) (js/Date.))\n\n             (->\n              (.save user)\n              (p/then\n               (fn [_]\n                 (set! (.-password user) nil)\n                 (-> res\n                     (.status 200)\n                     (.json #js {:success true\n                                 :message \"Logged in successfully\"\n                                 :user    ^js user}))))))\n\n           (->\n            res\n            (.status 400)\n            (.json #js {:subject false\n                        :message \"Invalid credentials\"}))))\n\n       (p/catch\n        (fn [e]\n          (-> res\n              (.status 200)\n              (.json #js {:success true\n                          :message (.-message e)}))))))))\n\n(defn logout []\n  (fn [req res]\n    (.clearCookie  ^js res \"token\")\n    (-> res\n        (.status 200)\n        (.json #js {:success true\n                    :message \"Logged out successfully\"}))))\n\n\n(defn verify-email []\n  (fn [req res]\n    (let [body (.-body req)\n          code (.-code body)]\n      (->\n       (p/let [user (.findOne models/user #js {:verificationToken code\n                                               :verificationTokenExpiredAt #js {:$gt (js/Date.now)}})]\n\n         (when-not ^js user\n           (-> res\n               (.status 400)\n               (.json #js {:subject false\n                           :message \"Invalid or expired verification code\"})))\n\n         (set! (.-isVerified ^js user) true)\n         (set! (.-verificationToken ^js user) nil)\n         (set! (.-verificationTokenExpiredAt ^js user) nil)\n\n         (->\n          (.save user)\n          (p/then (fn [_]\n                    (emails/send-welcome-email (.-email ^js user) (.-name ^js user))\n                    (set! (.-password user) nil)\n                    (-> res\n                        (.status 200)\n                        (.json #js {:subject true\n                                    :message \"Email verified successfully\"\n                                    :user    user}))))))\n       (p/catch (fn [e]\n                  (-> res\n                      (.status 500)\n                      (.json #js {:success false\n                                  :message (.-message e)}))))))))\n\n\n\n\n(defn forgot-password []\n  (fn [req res]\n    (let [body (.-body req)\n          email (.-email body)\n          token (.toString (.randomBytes crypto 20) \"hex\")\n          expire-at (+ (* 1 60 60 1000) (.now js/Date))\n          reset-url (str (utils/get-env \"CLIENT_URL\") \"/reset-password/\" token)]\n      (->\n       (p/let [user (.findOne models/user #js {:email email})]\n\n         (when-not ^js user\n           (-> res\n               (.status 400)\n               (.json #js {:subject false\n                           :message \"User not found\"})))\n         (set! (.-resetPasswordToken ^js user) token)\n         (set! (.-resetPasswordExpiredAt ^js user) expire-at)\n\n         (->\n          (.save user)\n          (p/then (fn []\n                    (emails/send-password-reset-email (.-email user) reset-url)))))\n       (p/catch\n        (fn [e]\n          (-> res\n              (.status 400)\n              (.json #js {:success false\n                          :message (.-message e)}))))))))\n\n(defn reset-password []\n  (fn [req res]\n    (let [body  (.-body ^js req)\n          params (.-params ^js req)\n          token (.-token ^js params)\n          password (.-password ^js body)\n          hashed-password (bcryptjs/hash password 10)]\n\n      (->\n       (p/let [user (.findOne models/user #js {:resetPasswordToken         token\n                                               :resetPasswordExpiredAt #js {:$gt (js/Date.now)}})]\n         (when-not user\n           (-> res\n               (.status 400)\n               (.json #js {:subject false\n                           :message \"User not found\"})))\n\n         (set! (.-password ^js user) hashed-password)\n         (set! (.-resetPasswordToken ^js user) nil)\n         (set! (.-resetPasswordExpiredAt ^js user) nil)\n\n         (->\n          (.save user)\n          (p/then\n           (fn []\n             (emails/send-reset-password-success-email (.-email user))))))\n       (p/catch\n        (fn [e]\n          (-> res\n              (.status 400)\n              (.json #js {:success false\n                          :message (.-message e)}))))))))"]}