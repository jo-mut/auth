{"version":3,"sources":["backend/controllers/auth_controllers.cljs"],"mappings":";AAQA,+CAAA,/CAAMA,sGAASC;AAAf,AACE,QAAMC,YAAeD;;AAEvB,sDAAA,tDAAME;AAAN,AACE,qDAAS,AAASC,DACT,sCAAA,vCACA,mDAAA,nDACA,mEAAQA;;AAEnB,sEAAA,tEAAMC,oJACHC,IAAIC,QAAQC;AADf,AAEE,cAAA,eAAA,zBAAMI;IAANH,aACwBF;IADxBE,iBAAA,AAAAC,4BAAAD;cAAA,AAAAE,4CAAAF,eAAA,rEACcI;IACRC,QAAM,iBAAAC,eAAC,AAAOC;AAAR,AAAA,QAAAD,6CAAAA,qEAAAA,1BAAaF,kDAAAA,1CAAQL,kDAAAA,3CAAOI,kDAAAA;;AAFxC,AAGM,IAAAK,iBAAA;IAAAC,iBAAsBJ;IAAtBK,iBAAA,cAAA,iJAAA,jIAC0C,sGAAA,tGAACE,6CAAE,6CAAA,7CAACrB,wGAEJ,CAAA,CAAA,CAAA,CAAA,MAAA,QAAA,QAAA,QAAA;IAH1CoB,qBAAC,AAASd;AAAV,AAAA,CAAAc,mDAAAA,iDAAAH,eAAAC,eAAAC,kBAAAC,8BAAAH,eAAAC,eAAAC;;AAIJL;;AAEJ,+CAAA,2DAAAQ,1GAAME,sGACHlB;AADH,AAAA,IAAAiB,aAAAD;IAAAC,iBAAA,AAAAb,4BAAAa;YAAA,AAAAZ,4CAAAY,eAAA,nEACeE;eADf,AAAAd,4CAAAY,eAAA,tEACqBG;WADrB,AAAAf,4CAAAY,eAAA,lEAC8BI;AAD9B,AAEE,IAAMC,kBAAuBC,AAAS,6CAAA,TAAQH;IACxCI,mBAAmB,CAAA,CAAA,sCAAA,QAAA,QAAA,rDAAG,6BAAA,5BAAGC;IACzBC,qBAAmB,AAAC7B;IACpB8B,OAAmB,KAAAC,gCAAA,WAAuCT,mBACAG,yBACAD,0BACAG,wCACAE;IAC1DG,WAAS,mDAAA,4DAAA,/GAACC,8CAAMH;AARtB,AASM,AAAOA,AACP,iBAAO,WAAKA,5BAEZ;AAFO,AACE,gHAAA,zGAACI,mIAAkCJ;UACpC,WAAKK;AAAL,AACE,gHAAA,zGAACD,uIAAsCC;;;AACrD,wEAAA,2CAAA,nHAACjC,oEAA+BC,0GAAe,AAAO2B,iBAAO,6CAAA,7CAACjC;;OAC1DM,PAAI,+BAAA,aAAA,iBAAA,7CAAO,AAAA,kFAE4B6B;;AAE/C,sDAAA,tDAAMI;AAAN,AACE,kBAAKC,IAAKlC;AAAV,AACE,IAAAmC,aAAoCD;IAApCC,iBAAA,AAAA/B,4BAAA+B;YAAA,AAAA9B,4CAAA8B,eAAA,nEAAchB;eAAd,AAAAd,4CAAA8B,eAAA,tEAAoBf;WAApB,AAAAf,4CAAA8B,eAAA,lEAA6Bd;AAA7B,AACE,oBAAM,iBAAAe,mBAAIjB;AAAJ,AAAA,oBAAAiB;AAAAA;;AAAA,IAAAA,uBAAUhB;AAAV,AAAA,oBAAAgB;AAAAA;;AAAmBf;;;;AAAzB,AACE,IAAMgB,oBAAY,AAAUT,wCAAYT;AAAxC,AACE,oBAAIkB;AACF,gHAAA,zGAACN;;AACD,wDAAA,2CAAA,6DAAA,qEAAA,9NAACb,6CAAQlB,sGAAemB,kEACAC,8DACAC;;;AAN9B;;;;AAQN,6CAAA,7CAAMiB;AAAN,AACE,kBAAKJ,IAAKlC;AAAV,OACMA,PAAI,gBAAA;;;AAEZ,8CAAA,9CAAMuC;AAAN,AACE,kBAAKL,IAAKlC;AAAV,OACMA,PAAI,gBAAA","names":["backend.controllers.auth-controllers/get-env","key","js/process.env","backend.controllers.auth-controllers/generate-token","backend.utils.number/math","backend.controllers.auth-controllers/generate-token-and-set-cookies","res","payload","secret","map__12659","cljs.core/--destructure-map","cljs.core.get","options","user-id","token","fexpr__12660","backend.controllers.auth-controllers/jwt","G__12662","G__12663","G__12664","fexpr__12661","cljs.core._EQ_","p__12665","map__12666","backend.controllers.auth-controllers/sign-up","email","password","name","hashed-password","js/shadow.js.shim.module$bcryptjs","token-expires-at","backend.utils.number/date","verification-token","user","backend.models.user-models/user","new-user","cljs.core.assoc","cljs.core.println","err","backend.controllers.auth-controllers/handle-sign-up","req","map__12667","or__5002__auto__","user-exist?","backend.controllers.auth-controllers/login","backend.controllers.auth-controllers/logout"],"sourcesContent":["(ns backend.controllers.auth-controllers\n  (:require\n   [\"bcryptjs\" :as bcryptjs]\n   [\"jwt\" :as jsonwebtoken]\n   [promesa.core :as p]\n   [backend.utils.number :as number]\n   [backend.models.user-models :as models]))\n\n(defn get-env [key]\n  (aget js/process.env key))\n\n(defn generate-token []\n  (str (-> (.random number/math)\n           (* 900000)\n           (+ 100000)\n           (.floor number/math))))\n\n(defn generate-token-and-set-cookies\n  [res payload secret]\n  (let [options #js {:expiresIn \"7d\"}\n        {:keys [user-id]} payload\n        token ((.sign jwt) user-id secret options)]\n    (-> ((.cookie res) \"auth\" token #js {:httpOnly true\n                                         :secure  (= (get-env \"NODE_ENV\") \"production\")\n                                         :sameSite \"strict\"\n                                         :maxAge  (* 7 24 60 60 1000)}))\n    token))\n\n(defn sign-up\n  [res {:keys [email password name]}]\n  (let [hashed-password    (-> bcryptjs (.hash  password 10))\n        token-expires-at   (* (+ number/date 24) 60 60 1000)\n        verification-token (generate-token)\n        user               (models/user. #js {:email              email\n                                              :password           hashed-password\n                                              :name               name\n                                              :token-expires-at   token-expires-at\n                                              :verification-token verification-token})\n        new-user (assoc user :password nil)]\n    (-> (.save user)\n        (.then (fn [user]\n                 (println \"User saved successfully\" user)))\n        (.catch (fn [err]\n                  (println \"Error while saving the user\" err))))\n    (generate-token-and-set-cookies res, {:user-id (.-_id user)} (get-env \"JWT_SECRET\"))\n    (-> res (.json (.status 201) #js {:success true\n                                      :message \"User created successfully\"\n                                      :user    new-user}))))\n\n(defn handle-sign-up []\n  (fn [req, res]\n    (let [{:keys [email password name]} req]\n      (when (or email password name)\n        (let [user-exist? (.findOne models/user email)]\n          (if user-exist?\n            (println \"User already exists\")\n            (sign-up res {:email    email\n                          :password password\n                          :name     name})))))))\n\n(defn login []\n  (fn [req, res]\n    (-> res (.send \"log in route\"))))\n\n(defn logout []\n  (fn [req, res]\n    (-> res (.send \"log out route\"))))"]}