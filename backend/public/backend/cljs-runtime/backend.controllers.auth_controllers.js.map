{"version":3,"sources":["backend/controllers/auth_controllers.cljs"],"mappings":"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","names":["backend.controllers.auth-controllers/get-env","key","js/process.env","backend.controllers.auth-controllers/generate-token","js/Math.random","js/Math.floor","backend.controllers.auth-controllers/generate-token-and-set-cookies","res","user-id","secret","options","token","js/shadow.js.shim.module$jsonwebtoken","cljs.core/clj->js","p__12158","map__12159","cljs.core/--destructure-map","cljs.core.get","backend.controllers.auth-controllers/handle-sign-up","email","password","name","token-expires-at","js/Date","verification-token","js/shadow.js.shim.module$bcryptjs.hash","hashed-password","user","backend.db.models.user-models/user","promesa.protocols/-bind","promesa.protocols/-promise","___11991__auto__","___11959__auto__","saved-user","cljs.core.js__GT_clj","backend.mailtrap.emails/send-verification-email","promesa.core.catch$","err","backend.controllers.auth-controllers/sign-up","req","map__12160","body","cljs.core.println","user-exist?","e12161","e","backend.controllers.auth-controllers/isPasswordValid","js/shadow.js.shim.module$bcryptjs.compare","promesa.core.then","isPasswordValid","backend.controllers.auth-controllers/login","_","backend.controllers.auth-controllers/logout","backend.controllers.auth-controllers/verify-email","code","js/Date.now","js/console.log","backend.mailtrap.emails/send-welcome-email"],"sourcesContent":["(ns backend.controllers.auth-controllers\n  (:require\n   [\"bcryptjs\" :as bcryptjs]\n   [\"jsonwebtoken\" :as jwt]\n   [promesa.core :as p]\n   [backend.mailtrap.emails :as emails]\n   [backend.db.models.user-models :as models]))\n\n(defn get-env [key]\n  (aget js/process.env key))\n\n(defn generate-token []\n  (str (-> (js/Math.random)\n           (* 900000)\n           (+ 100000)\n           (js/Math.floor))))\n\n(defn generate-token-and-set-cookies\n  [res user-id]\n  (let [secret \"mysecret\"\n        options #js {:expiresIn \"7d\"}\n        token (.sign jwt (clj->js {:user-id user-id}) secret options)]\n    (-> (.cookie res \"auth\" token #js {:httpOnly true\n                                       :secure   false\n                                       :sameSite \"strict\"\n                                       :maxAge   (* 7 24 60 60 1000)}))\n    token))\n\n(defn handle-sign-up\n  [res {:keys [email password name]}]\n  (let [token-expires-at   (+ (* 24 60 60 1000) (.now js/Date))\n        verification-token (generate-token)]\n    (-> (bcryptjs/hash password 10)\n        (.then (fn [hashed-password]\n                 (let [user (models/user. #js {:email                      email\n                                               :password                   hashed-password\n                                               :name                       name\n                                               :verificationTokenExpiredAt token-expires-at\n                                               :verificationToken          verification-token})]\n                   (->\n                    (p/let [saved-user (.save user)]\n                      (set! (.-password saved-user) nil)\n                      (generate-token-and-set-cookies res (:_id (js->clj saved-user)))\n                      (emails/send-verification-email (get-env \"EMAIL\") verification-token)\n                      (-> res\n                          (.status 201)\n                          (.json #js {:success true\n                                      :message \"User created successfully\"\n                                      :user    (js->clj saved-user)})))\n                    (p/catch (fn [err]\n                               (-> res\n                                   (.status 500)\n                                   (.json #js {:success false\n                                               :message \"Error saving user\"\n                                               :error   (.-message err)}))))))))\n        (.catch (fn [err]\n                  (-> res\n                      (.status 500)\n                      (.json #js {:success false\n                                  :message \"Error hashing password\"\n                                  :error   (.-message err)})))))))\n\n\n(defn sign-up []\n  (fn [req res]\n    (let [body (js->clj (.-body req) :keywordize-keys true)\n          {:keys [email password name]} body]\n      (println res)\n      (p/let [user-exist? (.findOne models/user #js {:email email}) (p/promise)]\n        (if user-exist?\n          (-> res\n              (.status 400)\n              (.json #js {:success false\n                          :message \"User already exists\"}))\n          (try\n            ;; (when-not (or email password name)\n            ;;   (throw (js/Error. \"All fields are required\")))\n            (handle-sign-up res {:email    email\n                                 :password password\n                                 :name     name})\n            (catch :default e\n              (-> res\n                  (.status 500)\n                  (.json #js {:success false\n                              :message (.-message e)})))))))))\n\n\n(defn isPasswordValid [res password user]\n  (->\n   (bcryptjs/compare password (.-password user))\n   (p/then\n    (fn [isPasswordValid]\n      (when-not isPasswordValid\n        (-> res\n            (.status 400)\n            (.json #js {:success false\n                        :message \"Invalid password\"})))))))\n\n(defn login []\n  (fn [req res]\n    (let [body (.-body req)\n          email (.-email body)\n          password (.-password body)]\n      (->\n       (p/let [user (.findOne models/user #js {:email email})]\n         (if user\n           (do\n             (isPasswordValid res password user)\n             (generate-token-and-set-cookies res (.-_id user))\n             (set! (.-lastLogin user) (js/Date.))\n\n             (->\n              (.save user)\n              (p/then\n               (fn [_]\n                 (set! (.-password user) nil)\n                 (-> res\n                     (.status 200)\n                     (.json #js {:success true\n                                 :message \"Logged in successfully\"\n                                 :user    user}))))))\n\n           (->\n            res\n            (.status 400)\n            (.json #js {:subject false\n                        :message \"Invalid credentials\"}))))\n\n       (p/catch\n        (fn [e]\n          (-> res\n              (.status 200)\n              (.json #js {:success true\n                          :message (.-message e)}))))))))\n\n(defn logout []\n  (fn [req res]\n    (.clearCookie res \"token\")\n    (-> res\n        (.status 200)\n        (.json #js {:success true\n                    :message \"Logged out successfully\"}))))\n\n\n(defn verify-email []\n  (fn [req res]\n    (let [body (.-body req)\n          code (.-code body)]\n      (->\n       (p/let [user (-> (.findOne models/user #js {:verificationToken code\n                                                   :verificationTokenExpiredAt #js {:$gt (js/Date.now)}})\n                        (p/catch (fn [e]\n                                   (js/console.log \"user not found \" e))))]\n\n         (when-not user\n           (-> res\n               (.status 400)\n               (.json #js {:subject false\n                           :message \"Invalid or expired verification code\"})))\n\n         (set! (.-isVerified user) true)\n         (set! (.-verificationToken user) nil)\n         (set! (.-verificationTokenExpiredAt user) nil)\n\n         (->\n          (.save user)\n          (p/then (fn [_]\n                    (emails/send-welcome-email (.-email user) (.-name user))\n                    (set! (.-password user) nil)\n                    (-> res\n                        (.status 200)\n                        (.json #js {:subject true\n                                    :message \"Email verified successfully\"\n                                    :user    user}))))))\n       (p/catch (fn [e]\n                  (-> res\n                      (.status 500)\n                      (.json #js {:success false\n                                  :message (.-message e)}))))))))"]}