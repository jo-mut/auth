{"version":3,"sources":["promesa/exec.cljc"],"mappings":"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","names":["promesa.exec/*default-scheduler*","promesa.exec/*default-executor*","promesa.exec/virtual-threads-available?","promesa.exec/vthread-supported?","promesa.exec/noop","cljs.core/constantly","js/promesa","js/promesa.exec","js/promesa.exec.default-scheduler","promesa.exec/default-scheduler","cljs.core/Delay","promesa.exec/scheduled-executor","js/promesa.exec.default-executor","promesa.exec/default-executor","promesa.exec/microtask-executor","promesa.exec/default-current-thread-executor","promesa.exec/current-thread-executor","js/promesa.exec.default-thread-executor","promesa.exec/default-thread-executor","js/promesa.exec.default-vthread-executor","promesa.exec/default-vthread-executor","promesa.exec/executor?","o","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","promesa.protocols/IExecutor","var_args","G__10745","promesa.exec/resolve-executor","js/Error","promesa.exec.resolve_executor","executor","cljs.core/deref","cljs.core._EQ_","G__10749","cljs.core/Keyword","promesa.util/maybe-deref","G__10752","promesa.exec/resolve-scheduler","promesa.exec.resolve_scheduler","scheduler","promesa.exec/wrap-bindings","f","G__10759","promesa.exec/run!","promesa.protocols/-run!","G__10768","promesa.exec/submit!","promesa.protocols/-submit!","G__10773","promesa.exec/schedule!","ms","promesa.protocols/-schedule!","promesa.exec/t_promesa$exec10778","this","e10784","promesa.protocols/-promise","cljs.core.comp","cause","e10785","promesa.exec/t_promesa$exec10786","promesa.protocols/-map","_","e10789","this__5287__auto__","writer__5288__auto__","opt__5289__auto__","cljs.core/-write","promesa.exec/Scheduler","promesa.exec/->Scheduler","done","cljs.core/volatile!","task","cljs.core/vreset!","tid","js/setTimeout","cancel","js/clearTimeout","G__10790","promesa.exec/->ScheduledTask","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","p__10792","map__10793","cljs.core/--destructure-map","cljs.core.get","seq10791","self__5712__auto__","cljs.core/seq","parallelism","factory","promesa.exec/ScheduledTask","state","done-iref","promesa.exec.goog$module$goog$object.get","self","cancel-fn","promesa.exec.goog$module$goog$object.set"],"sourcesContent":[";; This Source Code Form is subject to the terms of the Mozilla Public\n;; License, v. 2.0. If a copy of the MPL was not distributed with this\n;; file, You can obtain one at http://mozilla.org/MPL/2.0/.\n;;\n;; Copyright (c) Andrey Antukh <niwi@niwi.nz>\n\n(ns promesa.exec\n  \"Executors & Schedulers facilities.\"\n  (:refer-clojure :exclude [run! pmap await])\n  (:require [promesa.protocols :as pt]\n            [promesa.util :as pu]\n            #?(:cljs [goog.object :as gobj]))\n  #?(:clj\n     (:import\n      clojure.lang.Var\n      java.lang.AutoCloseable\n      java.time.Duration\n      java.util.concurrent.Callable\n      java.util.concurrent.CompletableFuture\n      java.util.concurrent.CompletionStage\n      java.util.concurrent.CountDownLatch\n      java.util.concurrent.Executor\n      java.util.concurrent.ExecutorService\n      java.util.concurrent.Executors\n      java.util.concurrent.ForkJoinPool\n      java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory\n      java.util.concurrent.ForkJoinWorkerThread\n      java.util.concurrent.Future\n      java.util.concurrent.ScheduledExecutorService\n      java.util.concurrent.ThreadFactory\n      java.util.concurrent.TimeUnit\n      java.util.concurrent.TimeoutException\n      java.util.concurrent.atomic.AtomicLong\n      java.util.function.Supplier)))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; --- Globals & Defaults (with CLJS Impl)\n\n(declare scheduled-executor)\n(declare current-thread-executor)\n(declare ->ScheduledTask)\n\n#?(:clj  (declare cached-executor))\n#?(:cljs (declare microtask-executor))\n\n(def ^:dynamic *default-scheduler* nil)\n(def ^:dynamic *default-executor* nil)\n\n(def virtual-threads-available?\n  \"Var that indicates the availability of virtual threads.\"\n  #?(:clj (and (pu/has-method? Thread \"ofVirtual\")\n               (try\n                 (eval '(Thread/ofVirtual))\n                 true\n                 (catch Throwable cause\n                   false)))\n     :cljs false))\n\n;; DEPRECATED\n(def ^{:deprecated true\n       :doc \"backward compatibility alias for `virtual-threads-available?`\"}\n  vthread-supported?\n  virtual-threads-available?)\n\n(def ^{:no-doc true} noop (constantly nil))\n\n#?(:clj\n   (defn- get-available-processors\n     []\n     (.availableProcessors (Runtime/getRuntime))))\n\n(defonce\n  ^{:doc \"Default scheduled executor instance.\"}\n  default-scheduler\n  (delay\n    #?(:clj  (scheduled-executor :parallelism (get-available-processors))\n       :cljs (scheduled-executor))))\n\n(defonce\n  ^{:doc \"Default executor instance, ForkJoinPool/commonPool in JVM, MicrotaskExecutor on JS.\"}\n  default-executor\n  (delay\n    #?(:clj  (ForkJoinPool/commonPool)\n       :cljs (microtask-executor))))\n\n;; Executor that executes the task in the calling thread\n(def ^{:doc \"Default Executor instance that runs the task in the same thread.\"}\n  default-current-thread-executor\n  (delay (current-thread-executor)))\n\n(defonce\n  ^{:doc \"A global, thread per task executor service.\"\n    :no-doc true}\n  default-thread-executor\n  #?(:clj  (delay (cached-executor))\n     :cljs default-executor))\n\n(defonce\n  ^{:doc \"A global, virtual thread per task executor service.\"\n    :no-doc true}\n  default-vthread-executor\n  #?(:clj  (if virtual-threads-available?\n             (delay (eval '(java.util.concurrent.Executors/newVirtualThreadPerTaskExecutor)))\n             default-thread-executor)\n     :cljs default-executor))\n\n(defn executor?\n  \"Returns true if `o` is an instane of Executor or satisfies IExecutor protocol.\"\n  [o]\n  #?(:clj  (or (instance? Executor o)\n               (satisfies? pt/IExecutor o))\n     :cljs (satisfies? pt/IExecutor o)))\n\n#?(:clj\n(defn shutdown!\n  \"Shutdowns the executor service.\"\n  [^ExecutorService executor]\n  (.shutdown executor)))\n\n#?(:clj\n(defn shutdown-now!\n  \"Shutdowns and interrupts the executor service.\"\n  [^ExecutorService executor]\n  (.shutdownNow executor)))\n\n#?(:clj\n(defn shutdown?\n  \"Check if execitor is in shutdown state.\"\n  [^ExecutorService executor]\n  (.isShutdown executor)))\n\n(defn resolve-executor\n  {:no-doc true}\n  ([] (resolve-executor nil))\n  ([executor]\n   (if (or (nil? executor) (= :default executor))\n     @default-executor\n     (case executor\n       :thread         (pu/maybe-deref default-thread-executor)\n       :vthread        (pu/maybe-deref default-vthread-executor)\n       :current-thread (pu/maybe-deref default-current-thread-executor)\n       (pu/maybe-deref executor)))))\n\n(defn resolve-scheduler\n  {:no-doc true}\n  ([] (resolve-scheduler nil))\n  ([scheduler]\n   (if (or (nil? scheduler) (= :default scheduler))\n     (pu/maybe-deref default-scheduler)\n     (pu/maybe-deref scheduler))))\n\n(defn wrap-bindings\n  {:no-doc true}\n  [f]\n  #?(:cljs f\n     :clj\n     (let [bindings (get-thread-bindings)]\n       (fn\n         ([]\n          (push-thread-bindings bindings)\n          (try\n            (f)\n            (finally\n              (pop-thread-bindings))))\n         ([a]\n          (push-thread-bindings bindings)\n          (try\n            (f a)\n            (finally\n              (pop-thread-bindings))))\n         ([a b]\n          (push-thread-bindings bindings)\n          (try\n            (f a b)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c]\n          (push-thread-bindings bindings)\n          (try\n            (f a b c)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c d]\n          (push-thread-bindings bindings)\n          (try\n            (f a b c d)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c d e]\n          (push-thread-bindings bindings)\n          (try\n            (f a b c d e)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c d e & args]\n          (push-thread-bindings bindings)\n          (try\n            (apply f a b c d e args)\n            (finally\n              (pop-thread-bindings))))))))\n\n;; --- Public API\n\n(defn run!\n  \"Run the task in the provided executor.\"\n  ([f]\n   (pt/-run! (resolve-executor *default-executor*) f))\n  ([executor f]\n   (pt/-run! (resolve-executor executor) f)))\n\n(defn submit!\n  \"Submit a task to be executed in a provided executor\n  and return a promise that will be completed with\n  the return value of a task.\n\n  A task is a plain clojure function.\"\n  ([f]\n   (pt/-submit! (resolve-executor *default-executor*) f))\n  ([executor f]\n   (pt/-submit! (resolve-executor executor) f)))\n\n(defn schedule!\n  \"Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function.\"\n  ([ms f]\n   (pt/-schedule! (resolve-scheduler) ms f))\n  ([scheduler ms f]\n   (pt/-schedule! (resolve-scheduler scheduler) ms f)))\n\n;; --- Pool & Thread Factories\n\n#?(:clj\n   (defn thread-factory?\n     \"Checks if `o` is an instance of ThreadFactory\"\n     [o]\n     (instance? ThreadFactory o)))\n\n#?(:clj\n   (defn- fn->thread-factory\n     \"Adapt a simple clojure function into a ThreadFactory instance.\"\n     [func]\n     (reify ThreadFactory\n       (^Thread newThread [_ ^Runnable runnable]\n        (func runnable)))))\n\n#?(:clj\n(def ^{:no-doc true :dynamic true}\n  *default-counter*\n  (AtomicLong. 0)))\n\n#?(:clj\n(defn get-next\n  \"Get next value from atomic long counter\"\n  {:no-doc true}\n  ([] (.getAndIncrement ^AtomicLong *default-counter*))\n  ([counter] (.getAndIncrement ^AtomicLong counter))))\n\n#?(:clj\n(defn thread-factory\n  \"Returns an instance of promesa default thread factory.\"\n  [& {:keys [name daemon priority]\n      :or {daemon true\n           priority Thread/NORM_PRIORITY\n           name \"promesa/thread/%s\"}}]\n  (let [counter (AtomicLong. 0)]\n    (reify ThreadFactory\n      (newThread [this runnable]\n        (doto (Thread. ^Runnable runnable)\n          (.setPriority (int priority))\n          (.setDaemon ^Boolean daemon)\n          (.setName (format name (get-next counter)))))))))\n\n#?(:clj\n(defn forkjoin-thread-factory\n  ^ForkJoinPool$ForkJoinWorkerThreadFactory\n  [& {:keys [name daemon] :or {name \"promesa/forkjoin/%s\" daemon true}}]\n  (let [counter (AtomicLong. 0)]\n    (reify ForkJoinPool$ForkJoinWorkerThreadFactory\n      (newThread [_ pool]\n        (let [thread (.newThread ForkJoinPool/defaultForkJoinWorkerThreadFactory pool)\n              tname  (format name (get-next counter))]\n          (.setName ^ForkJoinWorkerThread thread ^String tname)\n          (.setDaemon ^ForkJoinWorkerThread thread ^Boolean daemon)\n          thread))))))\n\n#?(:clj\n(defn- resolve-thread-factory\n  {:no-doc true}\n  ^ThreadFactory\n  [opts]\n  (cond\n    (thread-factory? opts) opts\n    (= :default opts)      (thread-factory)\n    (nil? opts)            (thread-factory)\n    (map? opts)            (thread-factory opts)\n    (fn? opts)             (fn->thread-factory opts)\n    :else                  (throw (ex-info \"Invalid thread factory\" {})))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; --- DEPRECATED\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n#?(:clj\n   (defn cached-pool\n     \"A cached thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([]\n      (Executors/newCachedThreadPool))\n     ([opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newCachedThreadPool factory)))))\n\n#?(:clj\n   (defn fixed-pool\n     \"A fixed thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([n]\n      (Executors/newFixedThreadPool (int n)))\n     ([n opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newFixedThreadPool (int n) factory)))))\n\n#?(:clj\n   (defn single-pool\n     \"A single thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([]\n      (Executors/newSingleThreadExecutor))\n     ([opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newSingleThreadExecutor factory)))))\n\n#?(:clj\n   (defn scheduled-pool\n     \"A scheduled thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([] (Executors/newScheduledThreadPool (int 0)))\n     ([n] (Executors/newScheduledThreadPool (int n)))\n     ([n opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newScheduledThreadPool (int n) factory)))))\n\n#?(:clj\n   (defn work-stealing-pool\n     \"Creates a work-stealing thread pool.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([] (Executors/newWorkStealingPool))\n     ([n] (Executors/newWorkStealingPool (int n)))))\n\n#?(:clj\n   (defn forkjoin-pool\n     {:deprecated \"9.0\" :no-doc true}\n     [{:keys [factory async? parallelism]\n       :or {async? true}\n       :as opts}]\n     (let [parallelism (or parallelism (get-available-processors))\n           factory     (cond\n                         (instance? ForkJoinPool$ForkJoinWorkerThreadFactory factory) factory\n                         (nil? factory) ForkJoinPool/defaultForkJoinWorkerThreadFactory\n                         :else (throw (ex-info \"Unexpected thread factory\" {:factory factory})))]\n       (ForkJoinPool. parallelism factory nil async?))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; --- END DEPRECATED\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n#?(:clj\n   (defn cached-executor\n     \"A cached thread executor pool constructor.\"\n     [& {:keys [factory]}]\n     (let [factory (or (some-> factory resolve-thread-factory)\n                       (thread-factory :name \"promesa/cached/%s\"))]\n       (Executors/newCachedThreadPool factory))))\n\n#?(:clj\n   (defn fixed-executor\n     \"A fixed thread executor pool constructor.\"\n     [& {:keys [parallelism factory]}]\n     (let [factory (or (some-> factory resolve-thread-factory)\n                       (thread-factory :name \"promesa/fixed/%s\"))]\n       (Executors/newFixedThreadPool (int parallelism) factory))))\n\n#?(:clj\n   (defn single-executor\n     \"A single thread executor pool constructor.\"\n     [& {:keys [factory]}]\n     (let [factory (or (some-> factory resolve-thread-factory)\n                       (thread-factory :name \"promesa/single/%s\"))]\n       (Executors/newSingleThreadExecutor factory))))\n\n(defn current-thread-executor\n  \"Creates an executor instance that run tasks in the same thread.\"\n  []\n  #?(:clj\n     (reify\n       Executor\n       (^void execute [_ ^Runnable f] (.run f))\n\n       pt/IExecutor\n       (-run! [this f]\n         (-> (pt/-promise nil)\n             (pt/-finally (fn [_ _]\n                            (f)))))\n       (-submit! [this f]\n         (-> (pt/-promise nil)\n             (pt/-map (fn [_] (f))))))\n\n     :cljs\n     (reify\n       pt/IExecutor\n       (-run! [this f]\n         (try\n           (pt/-promise (comp noop f))\n           (catch :default cause\n             (pt/-promise cause))))\n\n       (-submit! [this f]\n         (try\n           (pt/-promise (f))\n           (catch :default cause\n             (pt/-promise cause)))))))\n\n#?(:cljs\n   (defn microtask-executor\n     \"An IExecutor that schedules tasks to be executed in the MicrotasksQueue.\"\n     []\n     (reify\n       pt/IExecutor\n       (-run! [this f]\n         (-> (pt/-promise nil)\n             (pt/-map (fn [_]\n                        (try (f) (catch :default _ nil))))\n             (pt/-map noop)))\n\n       (-submit! [this f]\n         (-> (pt/-promise nil)\n             (pt/-map (fn [_] (f))))))))\n\n#?(:cljs\n   (deftype Scheduler []\n     pt/IScheduler\n     (-schedule! [_ ms f]\n       (let [done (volatile! false)\n             task #(try\n                     (f)\n                     (finally\n                       (vreset! done true)))\n             tid (js/setTimeout task ms)\n             cancel #(js/clearTimeout tid)]\n         (->ScheduledTask #js {:done done\n                               :cancelled false\n                               :cancel-fn cancel})))))\n\n(defn scheduled-executor\n  \"A scheduled thread pool constructor. A ScheduledExecutor (IScheduler\n  in CLJS) instance allows execute asynchronous tasks some time later.\"\n  [& {:keys [parallelism factory] :or {parallelism 1}}]\n  #?(:clj\n     (let [parallelism (or parallelism (get-available-processors))\n           factory     (or (some-> factory resolve-thread-factory)\n                           (thread-factory :name \"promesa/scheduled/%s\"))]\n\n\n       (doto (java.util.concurrent.ScheduledThreadPoolExecutor. (int parallelism) ^ThreadFactory factory)\n         (.setRemoveOnCancelPolicy true)))\n\n     :cljs\n     (->Scheduler)))\n\n#?(:clj\n   (when virtual-threads-available?\n     (eval\n      '(defn thread-per-task-executor\n         [& {:keys [factory]}]\n         (let [factory (or (some-> factory resolve-thread-factory)\n                           (thread-factory :name \"promesa/thread-per-task/%s\"))]\n           (Executors/newThreadPerTaskExecutor ^ThreadFactory factory))))))\n\n#?(:clj\n   (when virtual-threads-available?\n     (eval\n      '(defn vthread-per-task-executor\n         []\n         (Executors/newVirtualThreadPerTaskExecutor)))))\n\n#?(:clj\n   (defn forkjoin-executor\n     [& {:keys [factory async? parallelism] :or {async? true}}]\n     (let [parallelism (or parallelism (get-available-processors))\n           factory     (cond\n                         (instance? ForkJoinPool$ForkJoinWorkerThreadFactory factory) factory\n                         (nil? factory) (forkjoin-thread-factory)\n                         :else (throw (ex-info \"Unexpected thread factory\" {:factory factory})))]\n       (ForkJoinPool. (int parallelism) factory nil async?))))\n\n#?(:clj\n   (defn work-stealing-executor\n     \"An alias for the `forkjoin-executor`.\"\n     [& params]\n     (apply forkjoin-executor params)))\n\n#?(:clj\n   (defn configure-default-executor!\n     [& params]\n     (alter-var-root #'*default-executor*\n                     (fn [executor]\n                       (when (and (delay? executor) (realized? executor))\n                         (.close ^AutoCloseable @executor))\n                       (when (instance? AutoCloseable executor)\n                         (.close ^AutoCloseable executor))\n                       (apply forkjoin-executor params)))))\n\n#?(:clj\n   (extend-type Executor\n     pt/IExecutor\n     (-run! [this f]\n       (CompletableFuture/runAsync ^Runnable f ^Executor this))\n\n     (-submit! [this f]\n       (CompletableFuture/supplyAsync ^Supplier (pu/->Supplier f) ^Executor this))))\n\n\n;; --- Scheduler & ScheduledTask\n\n#?(:clj\n   (deftype ScheduledTask [^Future fut]\n     clojure.lang.IDeref\n     (deref [_] (.get fut))\n\n     clojure.lang.IBlockingDeref\n     (deref [_ ms default]\n       (try\n         (.get fut ms TimeUnit/MILLISECONDS)\n         (catch TimeoutException e\n           default)))\n\n     clojure.lang.IPending\n     (isRealized [_] (and (.isDone fut)\n                          (not (.isCancelled fut))))\n\n     pt/ICancellable\n     (-cancelled? [_]\n       (.isCancelled fut))\n     (-cancel! [_]\n       (when-not (.isCancelled fut)\n         (.cancel fut true)))\n\n     Future\n     (get [_] (.get fut))\n     (get [_ timeout unit] (.get fut timeout unit))\n     (isCancelled [_] (.isCancelled fut))\n     (isDone [_] (.isDone fut))\n     (cancel [_ interrupt?] (.cancel fut interrupt?)))\n\n   :cljs\n   (deftype ScheduledTask [state]\n     cljs.core/IPending\n     (-realized? [_]\n       (let [done-iref (gobj/get state \"done\")]\n         (deref done-iref)))\n\n     pt/ICancellable\n     (-cancelled? [_]\n       (gobj/get state \"cancelled\"))\n     (-cancel! [self]\n       (when-not (pt/-cancelled? self)\n         (let [cancel-fn (gobj/get state \"cancel-fn\")]\n           (gobj/set state \"cancelled\" true)\n           (cancel-fn))))))\n\n#?(:clj\n   (extend-type ScheduledExecutorService\n     pt/IScheduler\n     (-schedule! [this ms f]\n       (let [ms  (if (instance? Duration ms) (inst-ms ms) ms)\n             fut (.schedule this ^Callable f (long ms) TimeUnit/MILLISECONDS)]\n         (ScheduledTask. fut)))))\n\n(defmacro with-dispatch\n  \"Helper macro for dispatch execution of the body to an executor\n  service. The returned promise is not cancellable (the body will be\n  executed independently of the cancellation).\"\n  [executor & body]\n  `(-> (submit! ~executor (wrap-bindings (^:once fn* [] ~@body)))\n       (pt/-bind pt/-promise)))\n\n(defmacro with-executor\n  \"Binds the *default-executor* var with the provided executor,\n  executes the macro body. It also can optionally shutdown or shutdown\n  and interrupt on termination if you provide `^:shutdown` and\n  `^:interrupt` metadata.\n\n  **EXPERIMENTAL API:** This function should be considered\n  EXPERIMENTAL and may be changed or removed in future versions until\n  this notification is removed.\"\n  [executor & body]\n  (let [interrupt?   (-> executor meta :interrupt)\n        shutdown?    (-> executor meta :shutdown)\n        executor-sym (gensym \"executor\")]\n    `(let [~executor-sym ~executor\n           ~executor-sym (if (fn? ~executor-sym) (~executor-sym) ~executor-sym)]\n       (binding [*default-executor* ~executor-sym]\n         (try\n           ~@body\n           (finally\n             ~(when (or shutdown? interrupt?)\n                (list (if interrupt? 'promesa.exec/shutdown-now! 'promesa.exec/shutdown!) executor-sym))))))))\n\n#?(:clj\n(defn pmap\n  \"Analogous to the `clojure.core/pmap` with the excetion that it allows\n  use a custom executor (binded to *default-executor* var) The default\n  clojure chunk size (32) is used for evaluation and the real\n  parallelism is determined by the provided executor.\n\n\n  **EXPERIMENTAL API:** This function should be considered\n  EXPERIMENTAL and may be changed or removed in future versions until\n  this notification is removed.\"\n  {:experimental true}\n  ([f coll]\n   (let [executor (resolve-executor *default-executor*)\n         frame    (Var/cloneThreadBindingFrame)]\n     (->> coll\n          (map (fn [o] (pt/-submit! executor #(do\n                                                (Var/resetThreadBindingFrame frame)\n                                                (f o)))))\n          (clojure.lang.RT/iter)\n          (clojure.lang.RT/chunkIteratorSeq)\n          (map (fn [o] (.get ^CompletableFuture o))))))\n  ([f coll & colls]\n   (let [step-fn (fn step-fn [cs]\n                   (lazy-seq\n                    (let [ss (map seq cs)]\n                      (when (every? identity ss)\n                        (cons (map first ss) (step-fn (map rest ss)))))))]\n     (pmap #(apply f %) (step-fn (cons coll colls)))))))\n\n#?(:clj\n(defmacro thread\n  \"A low-level, not-pooled thread constructor, it accepts an optional\n  map as first argument and the body. The options map is interepreted\n  as options if a literal map is provided. The available options are:\n  `:name`, `:priority`, `:daemon` and `:virtual`. The `:virtual`\n  option is ignored if you are using a JVM that has no support for\n  Virtual Threads.\"\n  [opts & body]\n  (let [[opts body] (if (map? opts)\n                      [opts body]\n                      [nil (cons opts body)])\n        tname (or (:name opts)\n                  (format \"promesa/unpooled-thread/%s\" (get-next)))\n        tprio (:priority opts Thread/NORM_PRIORITY)\n        tdaem (:daemon opts true)\n        tvirt (:virtual opts false)\n        thr-s (-> (gensym \"thread-\")\n                  (vary-meta assoc :type `Thread))\n        run-s (-> (gensym \"runnable-\")\n                  (vary-meta assoc :type `Runnable))]\n    `(let [~run-s (^:once fn* [] ~@body)\n           ~thr-s ~(if virtual-threads-available?\n                     `(if ~tvirt\n                        (.. (Thread/ofVirtual)\n                            (name ~tname)\n                            (unstarted ~run-s))\n                        (.. (Thread/ofPlatform)\n                            (name ~tname)\n                            (priority (int ~tprio))\n                            (daemon (boolean ~tdaem))\n                            (unstarted ~run-s)))\n                     `(doto (Thread. ~run-s)\n                        (.setName ~tname)\n                        (.setPriority (int ~tprio))\n                        (.setDaemon (boolean ~tdaem))))]\n       (.start ~thr-s)\n       ~thr-s))))\n\n#?(:clj\n(defn current-thread\n  \"Return the current thread.\"\n  []\n  (Thread/currentThread)))\n\n#?(:clj\n(defn interrupted?\n  \"Check if the thread has the interrupted flag set.\n\n  There are two special cases:\n\n  Using the `:current` keyword as argument will check the interrupted\n  flag on the current thread.\n\n  Using the arity 0 (passing no arguments), then the current thread\n  will be checked and **WARNING** the interrupted flag reset to\n  `false`.\"\n  ([]\n   (Thread/interrupted))\n  ([thread]\n   (if (= :current thread)\n     (.isInterrupted (Thread/currentThread))\n     (.isInterrupted ^Thread thread)))))\n\n#?(:clj\n(defn thread-id\n  \"Retrieves the thread ID.\"\n  ([]\n   (.getId ^Thread (Thread/currentThread)))\n  ([^Thread thread]\n   (.getId thread))))\n\n#?(:clj\n(defn interrupt!\n  \"Interrupt a thread.\"\n  ([]\n   (.interrupt (Thread/currentThread)))\n  ([^Thread thread]\n   (.interrupt thread))))\n\n#?(:clj\n(defn thread?\n  \"Check if provided object is a thread instance.\"\n  [t]\n  (instance? Thread t)))\n\n#?(:clj\n(defn sleep\n  \"Turn the current thread to sleep accept a number of milliseconds or\n  Duration instance.\"\n  [ms]\n  (if (instance? Duration ms)\n    (Thread/sleep (int (.toMillis ^Duration ms)))\n    (Thread/sleep (int ms)))))\n"],"x_google_ignoreList":[0]}