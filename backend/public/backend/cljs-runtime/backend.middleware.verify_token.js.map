{"version":3,"sources":["backend/middleware/verify_token.cljs"],"mappings":";AAKA,+CAAA,/CAAMA;AAAN,AACE,kBAAKC,IAAIC,IAAIC;AAAb,AACE,IAAMC,QAAcH,AAAI,AAAY;AAApC,AACE,IAAA,AACE,oBAAUG;AAAV;AAAA,AACMF,AACA,WAAA,XACA,uBAAA,aAAA,kBAAA;;;AAEN,IAAMI,UAAQ,AAASC,0CAAIH,MAAM,2BAAA,3BAACI;AAAlC,AACE,oBAAUF;AAAV;AAAA,AACMJ,AACA,WAAA,XACA,uBAAA,aAAA,kBAAA;;;AAEN,CAAM,AAAcD,aAAK,AAAcK;;AACvC,QAACH,qCAAAA,uCAAAA;gBAbL,QAAAE,JAckBI;AAdlB,OAeOP,AACA,WAAA,lBACA,8BAAA,aAAA,kBAAA","names":["backend.middleware.verify-token/verify-token","req","res","next","token","e11989","decoded","js/shadow.js.shim.module$jsonwebtoken","backend.utils.core/get-env","e"],"sourcesContent":["(ns backend.middleware.verify-token\n  (:require\n   [backend.utils.core :as utils]\n   [\"jsonwebtoken\" :as jwt]))\n\n(defn verify-token []\n  (fn [req res next]\n    (let [token (-> ^js req (.-cookies) (.-token))]\n      (try\n        (when-not token\n          (-> res\n              (.status 401)\n              (.json   #js {:success false\n                            :message \"Unauthorised - no token provided\"})))\n        (let [decoded (.verify jwt token (utils/get-env \"JWT_SECRET\"))]\n          (when-not decoded\n            (-> res\n                (.status 401)\n                (.json   #js {:success false\n                              :message \"Unauthorised - no token provided\"})))\n          (set! (.-userId ^js req) (.-userId ^js decoded))\n          (next))\n        (catch :default e\n         (-> res\n             (.status 500)\n             (.json   #js {:success false\n                           :message \"Server error\"})))))))"]}